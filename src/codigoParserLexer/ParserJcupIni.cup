package ParserLexer;
import java_cup.runtime.*;

// Tabla de símbolos
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

action code {:

    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolor
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){
            System.out.println("Tabla de simbolo: " + key);
            System.out.println("La tabla contiene estos valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }
:}

parser code {:
    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    
:}

init with {: :};
scan with {: return lex.next_token(); :};

/* Literales */
terminal            IDENTIFIER, INTEGER_INTEGRAL, STRING_LITERAL;

/* Lexer navideño */
terminal            EMPEZONAVIDAD, NAVIDAD, FESTIVAL, FIESTA, PERSONA, l_SANTA , l_SANTA_CLAUS, l_PAPANOEL, l_PASCUERO, l_COLACHO, ENTREGA, ELFO1, ELFO2, ELFO3, ELFO4, ELFO5, ELFO6;
terminal            GRINCH, QUIEN, RODOLFO, COMETA, BAILARIN, CUPIDO, DONNER, DASHER, ELFO, HADA, DUENDE, ENVUELVE, ENVOLTURA, HACE, REVISA, ENVIA, CORTA, MELCHOR, GASPAR, BALTASAR, POLO;
terminal            ABRECUENTO, CIERRACUENTO, ABREEMPAQUE, CIERRAEMPAQUE, ABREREGALO, CIERRAREGALO, FINREGALO, SANTACLAUS, PAPANOEL, SANNICOLAS, SINTERKLASS, VIEJITOPASCUERO, COLACHO;
terminal            ENTREGAREGALOS, MUERDAGO, NARRA, ESCUCHA, SANTACLAUSULA;

/* No terminales */
non terminal            poloNorte, t_navidad, t_santas, literales_navidenios, literal_no_nums, literal_nums, bolsanavidenia, pNocheBuena, pbolsanavideniaAux, narraNavidad, escuchaNavidad, entregaRegalos;
non terminal            grinchYQuien, unidadNavidenia, logisticadeNavidad, reyesMagos, regalo, cuerpo, ayudanteDeSanta, ayudaDefFunNav, definirFunNav, corta;
non terminal            elfos, elfos_g, elfos_nums, comp_elfosN, comp_elfosG, regaloprin, declPapaNoel, declSanNicolas, declSantaClaus, declSantaClausula, declColacho, inicioNav;
non terminal            opciones, whileStmt, forStmt, cuerpoMain, regaloExtn, antartica, compN, compG, doWhileStmt, envia, elfoStm, hadaStm, duendeStm, renos;
non terminal            decl_G, llamadaNavidenia, ids;

//Precedence
precedence left RODOLFO,COMETA;
precedence left BAILARIN,CUPIDO;
precedence left DONNER,DASHER;
precedence left ELFO1, ELFO2, ELFO3, ELFO4, ELFO5, ELFO6, GRINCH, QUIEN, MELCHOR, GASPAR, BALTASAR;


/* Inicio */
start with entregaRegalos;

//Grupos de literales
literales_navidenios ::= l_SANTA:lst {:RESULT = lst;:} | l_SANTA_CLAUS:lst {:RESULT = lst;:} | l_PAPANOEL:lst {:RESULT = lst;:} | l_PASCUERO:lst {:RESULT = lst;:};

literal_nums ::= l_SANTA:lst {:RESULT = lst;:} | l_PASCUERO:lst {:RESULT = lst;:};

literal_no_nums ::= l_SANTA_CLAUS:lst {:RESULT = lst;:} | l_PAPANOEL:lst {:RESULT = lst;:};

//Operadores unarios
unidadNavidenia ::= GRINCH | QUIEN;
opciones ::= literales_navidenios:lst | PERSONA;
grinchYQuien ::= unidadNavidenia opciones;

//Operadores logicos
logisticadeNavidad ::= MELCHOR | GASPAR;
reyesMagos ::= opciones logisticadeNavidad opciones
                | BALTASAR opciones;

//Print
narraNavidad ::= NARRA ABRECUENTO regaloprin CIERRACUENTO FINREGALO;

//read
escuchaNavidad ::= ESCUCHA ABRECUENTO regaloprin CIERRACUENTO FINREGALO;

//Tipos
t_santas ::= SANTACLAUS:tst {:RESULT = tst;:} 
            | PAPANOEL:tst {:RESULT = tst;:} 
            | SANNICOLAS:tst {:RESULT = tst;:}
            | SINTERKLASS:tst {:RESULT = tst;:} 
            | VIEJITOPASCUERO:tst {:RESULT = tst;:} 
            | COLACHO:tst {:RESULT = tst;:};

//public o private
t_navidad ::= FESTIVAL | FIESTA;

//Estructuras de control

//return
envia ::= ENVIA regaloprin FINREGALO;

//Break
corta ::= CORTA FINREGALO;

elfos_g ::= ELFO1 | ELFO2;

elfos_nums ::= ELFO3 | ELFO4 | ELFO5 | ELFO6;

//comparaciones que requieren numeros(>, <, >= <_)
compN ::= literal_nums:lst | PERSONA | l_SANTA_CLAUS;
comp_elfosN ::= compN elfos_nums compN;

//comparaciones generales(==, !=)
compG ::= literales_navidenios:tl | PERSONA;
comp_elfosG ::= compG elfos_g compG;


// Renos
renos ::= COMETA:rn {:RESULT = rn;:}
         | RODOLFO:rn {:RESULT = rn;:} 
         | BAILARIN:rn {:RESULT = rn;:} 
         | CUPIDO:rn {:RESULT = rn;:} 
         | DONNER:rn {:RESULT = rn;:} 
         | DASHER:rn {:RESULT = rn;:};


//operaciones aritmeticas

regaloprin ::= COMETA regaloprin
       | BALTASAR regaloprin
       | regaloprin renos:rn regaloprin {:System.out.println(rn);:}
       | ABRECUENTO regaloprin CIERRACUENTO
       | literales_navidenios
       | regaloprin logisticadeNavidad regaloprin
       | regaloprin unidadNavidenia regaloprin
       | regaloprin elfos_g regaloprin
       | regaloprin elfos_nums regaloprin
       | PERSONA;


//Declaracion de variables

//redeclaracion de datos ejemplo:
//num = 0|
decl_G ::= PERSONA ENTREGA regaloprin FINREGALO;


//int
declPapaNoel ::= POLO PAPANOEL PERSONA FINREGALO
                | POLO PAPANOEL PERSONA ENTREGA regaloprin FINREGALO;

//float
declSanNicolas ::= POLO SANNICOLAS PERSONA FINREGALO
                | POLO SANNICOLAS PERSONA ENTREGA regaloprin FINREGALO;

//bool
declSantaClausula ::= POLO SANTACLAUSULA PERSONA FINREGALO
                    | POLO SANTACLAUSULA PERSONA ENTREGA regaloprin FINREGALO;

//string
declSantaClaus ::= POLO SANTACLAUS PERSONA FINREGALO
                | POLO SANTACLAUS PERSONA ENTREGA l_PAPANOEL FINREGALO
                | POLO SANTACLAUS PERSONA ENTREGA PERSONA FINREGALO;

//char (necesita cambiarse actualmente usa el literal de string)
declColacho ::= POLO COLACHO PERSONA FINREGALO
                | POLO COLACHO PERSONA ENTREGA l_PAPANOEL FINREGALO
                | POLO COLACHO PERSONA ENTREGA PERSONA FINREGALO;

//este se coloca para que la linea de dregalo sea más corta
inicioNav ::= declPapaNoel | declSanNicolas | declSantaClaus | declSantaClausula | declColacho;

cuerpo ::= ABREREGALO regalo CIERRAREGALO;

//Ciclos

//While
//while ( i <_ 5 ){}
whileStmt ::= ENVOLTURA ABRECUENTO comp_elfosN CIERRACUENTO cuerpo
            | ENVOLTURA ABRECUENTO comp_elfosG CIERRACUENTO cuerpo
            | ENVOLTURA ABRECUENTO l_SANTA_CLAUS CIERRACUENTO cuerpo;

//do until (do while)
//do{ cuerpo }until ( i <_ 5 )|
doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO comp_elfosN CIERRACUENTO FINREGALO
                | HACE cuerpo REVISA ABRECUENTO comp_elfosG CIERRACUENTO FINREGALO
                | HACE cuerpo REVISA ABRECUENTO l_SANTA_CLAUS CIERRACUENTO FINREGALO;

//For 
//for(x=2,x<20,++x)
forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo
            | ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo;

//if - elif - else
//if
elfoStm::= ELFO ABRECUENTO comp_elfosN CIERRACUENTO cuerpo
            | ELFO ABRECUENTO comp_elfosG CIERRACUENTO cuerpo;

//elif
hadaStm::= HADA ABRECUENTO comp_elfosN CIERRACUENTO cuerpo
            | HADA ABRECUENTO comp_elfosG CIERRACUENTO cuerpo;

//else
duendeStm ::= DUENDE cuerpo;


//Funciones 
ayudanteDeSanta ::= t_santas:tsc PERSONA:per {:System.out.println(tsc);:}
                    | PERSONA;

ayudaDefFunNav ::= ayudanteDeSanta
                    | ayudaDefFunNav MUERDAGO ayudanteDeSanta;

//Llamada de funciones
//hola|()
//adios|(intx, in)
ids ::= PERSONA
    | ids MUERDAGO PERSONA;
llamadaNavidenia ::= PERSONA FINREGALO ABRECUENTO CIERRACUENTO 
                  |  PERSONA FINREGALO ABRECUENTO ids CIERRACUENTO;


// Se asigna el token seleccionado a su respectiva tabla de símbolos
// En este caso el valor de retorno, el nombre de la función y si es una función main o no
definirFunNav ::= EMPEZONAVIDAD t_santas:tsc PERSONA:per ABRECUENTO CIERRACUENTO 
                {:
                String tipoTabla = "main";
                if (per.toString().equals("main"))
                        tipoTabla = "tipo:main: "+tsc.toString();
                else
                        tipoTabla = "tipo:function: "+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablaSimbolos.put(currentHash, funcionMain);
                
                :}
                

                | EMPEZONAVIDAD t_santas:tsc PERSONA:per ABRECUENTO ayudaDefFunNav CIERRACUENTO 
                {:
                String tipoTabla = "main";
                if (per.toString().equals("main"))
                        tipoTabla = "tipo:main: "+tsc.toString();
                else
                        tipoTabla = "tipo:function: "+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablaSimbolos.put(currentHash, funcionMain);
                
                :};

bolsanavidenia ::= definirFunNav
                | definirFunNav cuerpo;

pbolsanavideniaAux ::=  bolsanavidenia
                    | pbolsanavideniaAux bolsanavidenia;

pNocheBuena ::= pbolsanavideniaAux;


//funcion main
cuerpoMain ::= ABREREGALO regaloExtn CIERRAREGALO;

entregaRegalos ::= {:
                    System.out.println("Empieza el asunto");
                    :} 
                    EMPEZONAVIDAD VIEJITOPASCUERO ENTREGAREGALOS ABRECUENTO CIERRACUENTO cuerpoMain 
                    {:
                    imprimirTablaSimbolos();
                    System.out.println("Termina el asunto");
                    :};

//Encapsula todas las regaloprinesiones para que se puedan colocar dentro de las funciones
poloNorte  ::= narraNavidad | corta | envia | regaloprin | inicioNav | whileStmt | forStmt | doWhileStmt | elfoStm | hadaStm | duendeStm | decl_G | llamadaNavidenia | escuchaNavidad;

//Produccion de expresiones
regalo ::= poloNorte
            | regalo poloNorte;

antartica ::= bolsanavidenia | poloNorte;

regaloExtn ::= antartica
            | regaloExtn antartica;