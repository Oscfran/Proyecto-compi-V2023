
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\010\007\000\002\011\007\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\051" +
    "\005\000\002\024\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\030\004\000\002\031\003\000\002\031\003" +
    "\000\002\032\004\000\002\032\005\000\002\014\003\000" +
    "\002\014\003\000\002\013\004\000\002\034\005\000\002" +
    "\033\003\000\002\033\003\000\002\015\003\000\002\015" +
    "\003\000\002\035\004\000\002\035\005\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\005\000\002" +
    "\026\006\000\002\042\010\000\002\042\004\000\002\056" +
    "\006\000\002\020\005\000\002\064\011\000\002\064\004" +
    "\000\002\065\014\000\002\065\004\000\002\066\003\000" +
    "\002\066\005\000\002\063\006\000\002\063\011\000\002" +
    "\043\007\000\002\050\011\000\002\044\015\000\002\044" +
    "\016\000\002\044\017\000\002\052\007\000\002\053\007" +
    "\000\002\054\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\062\003\000\002\062\005\000\002\060" +
    "\005\000\002\060\006\000\002\061\004\000\002\021\004" +
    "\000\002\022\003\000\002\022\005\000\002\057\005\000" +
    "\002\023\005\000\002\023\006\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\006\003\000\002\006" +
    "\004\000\002\007\003\000\002\007\004\000\002\067\002" +
    "\000\002\003\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\017\003\000\002\017\004" +
    "\000\002\047\003\000\002\047\003\000\002\046\003\000" +
    "\002\046\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\003\uffa1\004\uffa1\001\002\000\004\002" +
    "\314\001\002\000\006\003\010\004\007\001\002\000\010" +
    "\002\uffa3\003\uffa3\004\uffa3\001\002\000\020\060\027\061" +
    "\016\062\023\063\026\064\020\065\030\072\021\001\002" +
    "\000\010\055\311\056\310\057\307\001\002\000\012\002" +
    "\uffa5\003\uffa5\004\uffa5\055\036\001\002\000\004\051\015" +
    "\001\002\000\010\002\uffa0\003\010\004\007\001\002\000" +
    "\010\002\uffa2\003\uffa2\004\uffa2\001\002\000\022\052\024" +
    "\060\027\061\016\062\023\063\026\064\020\065\030\072" +
    "\021\001\002\000\004\007\ufff8\001\002\000\004\007\034" +
    "\001\002\000\004\007\ufff5\001\002\000\004\007\ufff3\001" +
    "\002\000\006\052\uffad\067\uffad\001\002\000\004\007\ufff7" +
    "\001\002\000\012\002\uffaa\003\uffaa\004\uffaa\055\uffaa\001" +
    "\002\000\006\052\032\067\031\001\002\000\004\007\ufff6" +
    "\001\002\000\004\007\ufff9\001\002\000\004\007\ufff4\001" +
    "\002\000\020\060\027\061\016\062\023\063\026\064\020" +
    "\065\030\072\021\001\002\000\012\002\uffa9\003\uffa9\004" +
    "\uffa9\055\uffa9\001\002\000\006\052\uffac\067\uffac\001\002" +
    "\000\006\052\uffae\067\uffae\001\002\000\010\002\uffa4\003" +
    "\uffa4\004\uffa4\001\002\000\060\003\102\007\052\010\045" +
    "\011\064\012\065\013\046\014\054\024\100\025\121\027" +
    "\075\034\117\035\050\036\056\037\072\040\120\041\071" +
    "\043\113\044\101\047\103\050\043\051\105\070\066\071" +
    "\111\001\002\000\046\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\045\uffe2\046\uffe2\052\uffe2\054\uffe2\057\uffe2" +
    "\067\uffe2\001\002\000\062\003\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\024\uffb6\025\uffb6\027\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\043" +
    "\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6\056\uffb6\070\uffb6" +
    "\071\uffb6\001\002\000\062\003\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\014\uff95\024\uff95\025\uff95\027\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\043" +
    "\uff95\044\uff95\047\uff95\050\uff95\051\uff95\056\uff95\070\uff95" +
    "\071\uff95\001\002\000\062\003\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\024\uffb9\025\uffb9\027\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043" +
    "\uffb9\044\uffb9\047\uffb9\050\uffb9\051\uffb9\056\uffb9\070\uffb9" +
    "\071\uffb9\001\002\000\020\060\027\061\016\062\023\063" +
    "\026\064\020\065\030\072\021\001\002\000\046\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\045\uffd4\046\uffd4" +
    "\052\uffd4\054\uffd4\057\uffd4\067\uffd4\001\002\000\046\016" +
    "\000\017\000\020\000\021\000\022\000\023\000\026\000" +
    "\027\000\030\000\031\000\032\000\033\000\045\000\046" +
    "\000\052\000\054\000\057\000\067\000\001\002\000\046" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\045\ufffd" +
    "\046\ufffd\052\ufffd\054\ufffd\057\ufffd\067\ufffd\001\002\000" +
    "\062\003\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\024\uffb7\025\uffb7\027\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\056\uffb7\070\uffb7\071\uffb7\001\002\000" +
    "\004\051\275\001\002\000\062\003\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\056\uffb5\070" +
    "\uffb5\071\uffb5\001\002\000\044\015\272\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\045\uffd5\046\uffd5\051\131" +
    "\053\130\001\002\000\036\016\155\017\154\020\153\021" +
    "\152\022\151\023\147\026\156\027\144\030\141\031\160" +
    "\032\157\033\145\045\143\046\146\001\002\000\046\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\045\ufffc\046" +
    "\ufffc\052\ufffc\054\ufffc\057\ufffc\067\ufffc\001\002\000\046" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\045\uffdb" +
    "\046\uffdb\052\uffdb\054\uffdb\057\uffdb\067\uffdb\001\002\000" +
    "\004\055\036\001\002\000\062\003\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\043\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8\056\uffb8\070" +
    "\uffb8\071\uffb8\001\002\000\062\003\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\024\uff9c\025\uff9c\027" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\043\uff9c\044\uff9c\047\uff9c\050\uff9c\051\uff9c\056\uff9c\070" +
    "\uff9c\071\uff9c\001\002\000\062\003\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\043\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\056\uffb4\070" +
    "\uffb4\071\uffb4\001\002\000\046\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\045\uffda\046\uffda\052\uffda\054\uffda" +
    "\057\uffda\067\uffda\001\002\000\062\003\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\024\uff9f\025\uff9f" +
    "\027\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\043\uff9f\044\uff9f\047\uff9f\050\uff9f\051\uff9f\056\uff9f" +
    "\070\uff9f\071\uff9f\001\002\000\046\016\uffff\017\uffff\020" +
    "\uffff\021\uffff\022\uffff\023\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\045\uffff\046\uffff\052\uffff\054" +
    "\uffff\057\uffff\067\uffff\001\002\000\046\016\ufffe\017\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\045\ufffe\046\ufffe\052\ufffe" +
    "\054\ufffe\057\ufffe\067\ufffe\001\002\000\004\051\265\001" +
    "\002\000\062\003\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\024\uff97\025\uff97\027\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\043\uff97\044\uff97" +
    "\047\uff97\050\uff97\051\uff97\056\uff97\070\uff97\071\uff97\001" +
    "\002\000\040\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\045\uffd3\046\uffd3\057\264\001\002\000\004\055\036" +
    "\001\002\000\004\051\217\001\002\000\046\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\045\uffd2\046\uffd2\052" +
    "\uffd2\054\uffd2\057\uffd2\067\uffd2\001\002\000\062\003\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\024" +
    "\uff9b\025\uff9b\027\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\043\uff9b\044\uff9b\047\uff9b\050\uff9b\051" +
    "\uff9b\056\uff9b\070\uff9b\071\uff9b\001\002\000\030\007\126" +
    "\010\045\011\064\012\065\013\046\014\054\024\100\025" +
    "\121\027\075\047\103\051\105\001\002\000\046\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\045\uffd0\046\uffd0" +
    "\052\uffd0\054\uffd0\057\uffd0\067\uffd0\001\002\000\062\003" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99" +
    "\024\uff99\025\uff99\027\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\043\uff99\044\uff99\047\uff99\050\uff99" +
    "\051\uff99\056\uff99\070\uff99\071\uff99\001\002\000\030\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\024\uffdf" +
    "\025\uffdf\027\uffdf\047\uffdf\051\uffdf\001\002\000\004\057" +
    "\215\001\002\000\004\057\214\001\002\000\030\007\126" +
    "\010\045\011\064\012\065\013\046\014\054\024\100\025" +
    "\121\027\075\047\103\051\105\001\002\000\062\003\uff9a" +
    "\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\024" +
    "\uff9a\025\uff9a\027\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\043\uff9a\044\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\056\uff9a\070\uff9a\071\uff9a\001\002\000\030\007\126" +
    "\010\045\011\064\012\065\013\046\014\054\024\100\025" +
    "\121\027\075\047\103\051\105\001\002\000\062\003\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\024" +
    "\uff9e\025\uff9e\027\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\043\uff9e\044\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\056\uff9e\070\uff9e\071\uff9e\001\002\000\062\003\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\024" +
    "\uff9d\025\uff9d\027\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\043\uff9d\044\uff9d\047\uff9d\050\uff9d\051" +
    "\uff9d\056\uff9d\070\uff9d\071\uff9d\001\002\000\040\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\045\uffd1\046\uffd1" +
    "\057\210\001\002\000\004\051\204\001\002\000\062\003" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\024\uff96\025\uff96\027\uff96\034\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\043\uff96\044\uff96\047\uff96\050\uff96" +
    "\051\uff96\056\uff96\070\uff96\071\uff96\001\002\000\030\007" +
    "\126\010\045\011\064\012\065\013\046\014\054\024\100" +
    "\025\121\027\075\047\103\051\105\001\002\000\046\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\045\uffe3\046" +
    "\uffe3\052\uffe3\054\uffe3\057\uffe3\067\uffe3\001\002\000\030" +
    "\007\126\010\045\011\064\012\065\013\046\014\054\024" +
    "\100\025\121\027\075\047\103\051\105\001\002\000\062" +
    "\003\102\007\052\010\045\011\064\012\065\013\046\014" +
    "\054\024\100\025\121\027\075\034\117\035\050\036\056" +
    "\037\072\040\120\041\071\043\113\044\101\047\103\050" +
    "\043\051\105\056\200\070\066\071\111\001\002\000\004" +
    "\051\173\001\002\000\004\051\123\001\002\000\030\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\024\uffde" +
    "\025\uffde\027\uffde\047\uffde\051\uffde\001\002\000\062\003" +
    "\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98" +
    "\024\uff98\025\uff98\027\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\043\uff98\044\uff98\047\uff98\050\uff98" +
    "\051\uff98\056\uff98\070\uff98\071\uff98\001\002\000\030\007" +
    "\126\010\045\011\064\012\065\013\046\014\054\024\100" +
    "\025\121\027\075\047\103\051\105\001\002\000\046\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\045\uffd1\046" +
    "\uffd1\052\uffd1\054\uffd1\057\uffd1\067\uffd1\001\002\000\040" +
    "\016\155\017\154\020\153\021\152\022\151\023\147\026" +
    "\156\027\144\030\141\031\160\032\157\033\145\045\143" +
    "\046\146\052\171\001\002\000\052\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\045\uffd5\046\uffd5\051\131\052" +
    "\uffd5\053\130\054\uffd5\057\uffd5\067\uffd5\001\002\000\046" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\045\uffd3" +
    "\046\uffd3\052\uffd3\054\uffd3\057\uffd3\067\uffd3\001\002\000" +
    "\030\007\126\010\045\011\064\012\065\013\046\014\054" +
    "\024\100\025\121\027\075\047\103\051\105\001\002\000" +
    "\032\007\126\010\045\011\064\012\065\013\046\014\054" +
    "\024\100\025\121\027\075\047\103\051\105\052\132\001" +
    "\002\000\046\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\045\uffb1\046\uffb1\052\uffb1\054\uffb1\057\uffb1\067\uffb1" +
    "\001\002\000\042\016\155\017\154\020\153\021\152\022" +
    "\151\023\147\026\156\027\144\030\141\031\160\032\157" +
    "\033\145\045\143\046\146\052\uffb3\067\uffb3\001\002\000" +
    "\006\052\135\067\136\001\002\000\046\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\045\uffb0\046\uffb0\052\uffb0" +
    "\054\uffb0\057\uffb0\067\uffb0\001\002\000\030\007\126\010" +
    "\045\011\064\012\065\013\046\014\054\024\100\025\121" +
    "\027\075\047\103\051\105\001\002\000\042\016\155\017" +
    "\154\020\153\021\152\022\151\023\147\026\156\027\144" +
    "\030\141\031\160\032\157\033\145\045\143\046\146\052" +
    "\uffb2\067\uffb2\001\002\000\030\007\126\010\045\011\064" +
    "\012\065\013\046\014\054\024\100\025\121\027\075\047" +
    "\103\051\105\001\002\000\030\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\024\uffe8\025\uffe8\027\uffe8\047" +
    "\uffe8\051\uffe8\001\002\000\030\007\126\010\045\011\064" +
    "\012\065\013\046\014\054\024\100\025\121\027\075\047" +
    "\103\051\105\001\002\000\030\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\024\uffd9\025\uffd9\027\uffd9\047" +
    "\uffd9\051\uffd9\001\002\000\030\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\024\uffea\025\uffea\027\uffea\047" +
    "\uffea\051\uffea\001\002\000\030\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\024\uffe5\025\uffe5\027\uffe5\047" +
    "\uffe5\051\uffe5\001\002\000\030\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\024\uffd8\025\uffd8\027\uffd8\047" +
    "\uffd8\051\uffd8\001\002\000\030\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\024\uffeb\025\uffeb\027\uffeb\047" +
    "\uffeb\051\uffeb\001\002\000\030\007\126\010\045\011\064" +
    "\012\065\013\046\014\054\024\100\025\121\027\075\047" +
    "\103\051\105\001\002\000\030\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\024\uffec\025\uffec\027\uffec\047" +
    "\uffec\051\uffec\001\002\000\030\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\024\uffed\025\uffed\027\uffed\047" +
    "\uffed\051\uffed\001\002\000\030\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\024\uffee\025\uffee\027\uffee\047" +
    "\uffee\051\uffee\001\002\000\030\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\024\uffef\025\uffef\027\uffef\047" +
    "\uffef\051\uffef\001\002\000\030\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\024\ufff0\025\ufff0\027\ufff0\047" +
    "\ufff0\051\ufff0\001\002\000\030\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\024\uffe9\025\uffe9\027\uffe9\047" +
    "\uffe9\051\uffe9\001\002\000\030\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\024\uffe6\025\uffe6\027\uffe6\047" +
    "\uffe6\051\uffe6\001\002\000\030\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\024\uffe7\025\uffe7\027\uffe7\047" +
    "\uffe7\051\uffe7\001\002\000\046\016\155\017\154\020\153" +
    "\021\152\022\151\023\147\026\156\027\144\030\141\031" +
    "\160\032\157\033\145\045\143\046\146\052\uffdc\054\uffdc" +
    "\057\uffdc\067\uffdc\001\002\000\046\016\155\017\154\020" +
    "\153\021\152\022\151\023\147\026\156\027\144\030\141" +
    "\031\160\032\157\033\145\045\143\046\146\052\uffd6\054" +
    "\uffd6\057\uffd6\067\uffd6\001\002\000\046\016\155\017\154" +
    "\020\153\021\152\022\151\023\147\026\156\027\144\030" +
    "\141\031\160\032\157\033\145\045\143\046\146\052\uffe0" +
    "\054\uffe0\057\uffe0\067\uffe0\001\002\000\040\016\155\017" +
    "\154\020\153\021\152\022\151\023\147\026\156\027\144" +
    "\030\141\031\160\032\157\033\145\045\143\046\146\054" +
    "\165\001\002\000\050\015\166\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\045\uffc3\046\uffc3\052\uffc3\054\uffc3" +
    "\057\uffc3\067\uffc3\001\002\000\030\007\126\010\045\011" +
    "\064\012\065\013\046\014\054\024\100\025\121\027\075" +
    "\047\103\051\105\001\002\000\040\016\155\017\154\020" +
    "\153\021\152\022\151\023\147\026\156\027\144\030\141" +
    "\031\160\032\157\033\145\045\143\046\146\057\170\001" +
    "\002\000\046\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\045\uffc2\046\uffc2\052\uffc2\054\uffc2\057\uffc2\067\uffc2" +
    "\001\002\000\004\055\036\001\002\000\062\003\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\024\uffc1" +
    "\025\uffc1\027\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\056\uffc1\070\uffc1\071\uffc1\001\002\000\030\007\126\010" +
    "\045\011\064\012\065\013\046\014\054\024\100\025\121" +
    "\027\075\047\103\051\105\001\002\000\040\016\155\017" +
    "\154\020\153\021\152\022\151\023\147\026\156\027\144" +
    "\030\141\031\160\032\157\033\145\045\143\046\146\052" +
    "\175\001\002\000\004\055\036\001\002\000\062\003\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\043\uffbc\044\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\056\uffbc\070\uffbc\071\uffbc\001\002\000\062\003\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\024" +
    "\uff94\025\uff94\027\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\043\uff94\044\uff94\047\uff94\050\uff94\051" +
    "\uff94\056\uff94\070\uff94\071\uff94\001\002\000\070\002\uffca" +
    "\003\uffca\004\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\024\uffca\025\uffca\027\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\047\uffca\050\uffca\051\uffca\056\uffca\070\uffca\071\uffca" +
    "\001\002\000\046\016\155\017\154\020\153\021\152\022" +
    "\151\023\147\026\156\027\144\030\141\031\160\032\157" +
    "\033\145\045\143\046\146\052\uffdd\054\uffdd\057\uffdd\067" +
    "\uffdd\001\002\000\040\016\155\017\154\020\153\021\152" +
    "\022\151\023\147\026\156\027\144\030\141\031\160\032" +
    "\157\033\145\045\143\046\146\057\203\001\002\000\062" +
    "\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\024\ufff2\025\ufff2\027\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\056\ufff2\070\ufff2\071\ufff2\001\002\000\030" +
    "\007\126\010\045\011\064\012\065\013\046\014\054\024" +
    "\100\025\121\027\075\047\103\051\105\001\002\000\040" +
    "\016\155\017\154\020\153\021\152\022\151\023\147\026" +
    "\156\027\144\030\141\031\160\032\157\033\145\045\143" +
    "\046\146\052\206\001\002\000\004\057\207\001\002\000" +
    "\062\003\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\024\ufffa\025\ufffa\027\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\056\ufffa\070\ufffa\071\ufffa\001\002\000" +
    "\062\003\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\024\uffe4\025\uffe4\027\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\056\uffe4\070\uffe4\071\uffe4\001\002\000" +
    "\040\016\155\017\154\020\153\021\152\022\151\023\147" +
    "\026\156\027\144\030\141\031\160\032\157\033\145\045" +
    "\143\046\146\052\212\001\002\000\046\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\045\uffcf\046\uffcf\052\uffcf" +
    "\054\uffcf\057\uffcf\067\uffcf\001\002\000\046\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\045\uffd7\046\uffd7\052" +
    "\uffd7\054\uffd7\057\uffd7\067\uffd7\001\002\000\062\003\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\024" +
    "\uffcc\025\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\044\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\056\uffcc\070\uffcc\071\uffcc\001\002\000\062\003\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\024" +
    "\ufff1\025\ufff1\027\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\043\ufff1\044\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\056\ufff1\070\ufff1\071\ufff1\001\002\000\046\016\155" +
    "\017\154\020\153\021\152\022\151\023\147\026\uffe1\027" +
    "\uffe1\030\141\031\160\032\157\033\145\045\143\046\146" +
    "\052\uffe1\054\uffe1\057\uffe1\067\uffe1\001\002\000\010\007" +
    "\220\050\221\061\222\001\002\000\004\015\246\001\002" +
    "\000\004\061\234\001\002\000\004\007\223\001\002\000" +
    "\004\015\224\001\002\000\004\010\225\001\002\000\004" +
    "\067\226\001\002\000\030\007\126\010\045\011\064\012" +
    "\065\013\046\014\054\024\100\025\121\027\075\047\103" +
    "\051\105\001\002\000\040\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\045\uffe2\046\uffe2\067\230\001\002\000" +
    "\006\024\100\025\121\001\002\000\004\052\232\001\002" +
    "\000\004\055\036\001\002\000\062\003\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\056\uffbe" +
    "\070\uffbe\071\uffbe\001\002\000\004\007\235\001\002\000" +
    "\004\015\236\001\002\000\030\007\126\010\045\011\064" +
    "\012\065\013\046\014\054\024\100\025\121\027\075\047" +
    "\103\051\105\001\002\000\040\016\155\017\154\020\153" +
    "\021\152\022\151\023\147\026\156\027\144\030\141\031" +
    "\160\032\157\033\145\045\143\046\146\067\240\001\002" +
    "\000\030\007\126\010\045\011\064\012\065\013\046\014" +
    "\054\024\100\025\121\027\075\047\103\051\105\001\002" +
    "\000\040\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\045\uffe2\046\uffe2\067\242\001\002\000\006\024\100\025" +
    "\121\001\002\000\004\052\244\001\002\000\004\055\036" +
    "\001\002\000\062\003\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\024\uffbd\025\uffbd\027\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\056\uffbd\070\uffbd\071\uffbd" +
    "\001\002\000\004\010\247\001\002\000\004\067\250\001" +
    "\002\000\030\007\126\010\045\011\064\012\065\013\046" +
    "\014\054\024\100\025\121\027\075\047\103\051\105\001" +
    "\002\000\040\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\045\uffe2\046\uffe2\067\252\001\002\000\006\024\100" +
    "\025\121\001\002\000\004\052\254\001\002\000\004\055" +
    "\036\001\002\000\062\003\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\024\uffbf\025\uffbf\027\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\044\uffbf\047\uffbf\050\uffbf\051\uffbf\056\uffbf\070\uffbf\071" +
    "\uffbf\001\002\000\004\042\257\001\002\000\004\051\260" +
    "\001\002\000\030\007\126\010\045\011\064\012\065\013" +
    "\046\014\054\024\100\025\121\027\075\047\103\051\105" +
    "\001\002\000\040\016\155\017\154\020\153\021\152\022" +
    "\151\023\147\026\156\027\144\030\141\031\160\032\157" +
    "\033\145\045\143\046\146\052\262\001\002\000\004\057" +
    "\263\001\002\000\062\003\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\024\uffc0\025\uffc0\027\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0" +
    "\044\uffc0\047\uffc0\050\uffc0\051\uffc0\056\uffc0\070\uffc0\071" +
    "\uffc0\001\002\000\062\003\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\024\uffaf\025\uffaf\027\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\043\uffaf" +
    "\044\uffaf\047\uffaf\050\uffaf\051\uffaf\056\uffaf\070\uffaf\071" +
    "\uffaf\001\002\000\030\007\126\010\045\011\064\012\065" +
    "\013\046\014\054\024\100\025\121\027\075\047\103\051" +
    "\105\001\002\000\040\016\155\017\154\020\153\021\152" +
    "\022\151\023\147\026\156\027\144\030\141\031\160\032" +
    "\157\033\145\045\143\046\146\052\267\001\002\000\004" +
    "\057\270\001\002\000\062\003\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\024\ufffb\025\ufffb\027\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043" +
    "\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb\056\ufffb\070\ufffb" +
    "\071\ufffb\001\002\000\062\003\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\024\uffba\025\uffba\027\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\043" +
    "\uffba\044\uffba\047\uffba\050\uffba\051\uffba\056\uffba\070\uffba" +
    "\071\uffba\001\002\000\030\007\126\010\045\011\064\012" +
    "\065\013\046\014\054\024\100\025\121\027\075\047\103" +
    "\051\105\001\002\000\040\016\155\017\154\020\153\021" +
    "\152\022\151\023\147\026\156\027\144\030\141\031\160" +
    "\032\157\033\145\045\143\046\146\057\274\001\002\000" +
    "\062\003\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\024\uffcb\025\uffcb\027\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\056\uffcb\070\uffcb\071\uffcb\001\002\000" +
    "\030\007\126\010\045\011\064\012\065\013\046\014\054" +
    "\024\100\025\121\027\075\047\103\051\105\001\002\000" +
    "\040\016\155\017\154\020\153\021\152\022\151\023\147" +
    "\026\156\027\144\030\141\031\160\032\157\033\145\045" +
    "\143\046\146\052\277\001\002\000\004\055\036\001\002" +
    "\000\062\003\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\024\uffbb\025\uffbb\027\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\056\uffbb\070\uffbb\071\uffbb\001\002" +
    "\000\004\007\302\001\002\000\006\015\303\057\304\001" +
    "\002\000\030\007\126\010\045\011\064\012\065\013\046" +
    "\014\054\024\100\025\121\027\075\047\103\051\105\001" +
    "\002\000\062\003\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\024\uffce\025\uffce\027\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\043\uffce\044\uffce" +
    "\047\uffce\050\uffce\051\uffce\056\uffce\070\uffce\071\uffce\001" +
    "\002\000\040\016\155\017\154\020\153\021\152\022\151" +
    "\023\147\026\156\027\144\030\141\031\160\032\157\033" +
    "\145\045\143\046\146\057\306\001\002\000\062\003\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\056\uffcd\070\uffcd\071\uffcd\001\002\000\012\002\uffa8" +
    "\003\uffa8\004\uffa8\055\uffa8\001\002\000\012\002\uffa7\003" +
    "\uffa7\004\uffa7\055\uffa7\001\002\000\012\002\uffa6\003\uffa6" +
    "\004\uffa6\055\uffa6\001\002\000\004\007\313\001\002\000" +
    "\004\051\uffab\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\003\003\067\004\001\001\000\002\001" +
    "\001\000\012\006\005\007\012\023\010\057\011\001\001" +
    "\000\002\001\001\000\004\004\311\001\001\000\002\001" +
    "\001\000\004\020\034\001\001\000\002\001\001\000\010" +
    "\006\013\023\010\057\011\001\001\000\002\001\001\000" +
    "\010\004\016\021\021\022\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\016\021\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\040\005\043\010\057\011\121\013\075\014\114" +
    "\017\115\024\066\026\105\027\073\030\076\031\107\032" +
    "\113\033\036\034\054\035\061\036\052\042\106\043\041" +
    "\044\056\050\046\051\103\052\037\053\050\054\060\056" +
    "\062\060\067\061\111\063\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\141\025\147" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\043\013\075\014\114\031\123\032\113\033\036\034" +
    "\054\035\061\036\215\060\126\063\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\043\013\075\014\114" +
    "\031\123\032\113\033\036\034\054\035\061\036\212\060" +
    "\126\063\072\001\001\000\002\001\001\000\030\005\043" +
    "\013\075\014\114\031\123\032\113\033\036\034\054\035" +
    "\061\036\210\060\126\063\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\043\013\075\014\114\031\123" +
    "\032\113\033\036\034\054\035\061\036\201\060\126\063" +
    "\072\001\001\000\002\001\001\000\030\005\043\013\075" +
    "\014\114\031\123\032\113\033\036\034\054\035\061\036" +
    "\200\060\126\063\072\001\001\000\072\002\176\005\043" +
    "\010\057\011\121\013\075\014\114\024\066\026\105\027" +
    "\073\030\076\031\107\032\113\033\036\034\054\035\061" +
    "\036\052\042\106\043\041\044\056\050\046\051\103\052" +
    "\037\053\050\054\060\056\062\060\067\061\111\063\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\043\013\075\014\114" +
    "\031\123\032\113\033\036\034\054\035\061\036\124\060" +
    "\126\063\072\001\001\000\002\001\001\000\010\015\141" +
    "\025\147\055\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\043\013\075\014\114\031\123\032\113" +
    "\033\036\034\054\035\061\036\163\060\126\063\072\001" +
    "\001\000\032\005\043\013\075\014\114\031\123\032\113" +
    "\033\036\034\054\035\061\036\132\060\126\062\133\063" +
    "\072\001\001\000\002\001\001\000\010\015\141\025\147" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\043\013\075\014\114\031\123\032\113\033\036" +
    "\034\054\035\061\036\136\060\126\063\072\001\001\000" +
    "\010\015\141\025\147\055\137\001\001\000\030\005\043" +
    "\013\075\014\114\031\123\032\113\033\036\034\054\035" +
    "\061\036\162\060\126\063\072\001\001\000\002\001\001" +
    "\000\030\005\043\013\075\014\114\031\123\032\113\033" +
    "\036\034\054\035\061\036\161\060\126\063\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\043\013\075" +
    "\014\114\031\123\032\113\033\036\034\054\035\061\036" +
    "\160\060\126\063\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\141\025\147\055\137\001\001\000\010\015" +
    "\141\025\147\055\137\001\001\000\010\015\141\025\147" +
    "\055\137\001\001\000\010\015\141\025\147\055\137\001" +
    "\001\000\002\001\001\000\030\005\043\013\075\014\114" +
    "\031\123\032\113\033\036\034\054\035\061\036\166\060" +
    "\126\063\072\001\001\000\010\015\141\025\147\055\137" +
    "\001\001\000\002\001\001\000\004\020\171\001\001\000" +
    "\002\001\001\000\030\005\043\013\075\014\114\031\123" +
    "\032\113\033\036\034\054\035\061\036\173\060\126\063" +
    "\072\001\001\000\010\015\141\025\147\055\137\001\001" +
    "\000\004\020\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\141\025\147\055\137" +
    "\001\001\000\010\015\141\025\147\055\137\001\001\000" +
    "\002\001\001\000\030\005\043\013\075\014\114\031\123" +
    "\032\113\033\036\034\054\035\061\036\204\060\126\063" +
    "\072\001\001\000\010\015\141\025\147\055\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\141\025\147\055\137\001\001\000\002\001\001" +
    "\000\010\015\141\025\147\055\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\141\025\147\055\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\043\013\075\014\114\031" +
    "\123\032\113\033\226\034\054\035\061\036\052\060\126" +
    "\063\072\001\001\000\002\001\001\000\006\013\230\014" +
    "\114\001\001\000\002\001\001\000\004\020\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\043\013\075\014\114\031\123\032\113\033\036" +
    "\034\054\035\061\036\236\060\126\063\072\001\001\000" +
    "\010\015\141\025\147\055\137\001\001\000\030\005\043" +
    "\013\075\014\114\031\123\032\113\033\240\034\054\035" +
    "\061\036\052\060\126\063\072\001\001\000\002\001\001" +
    "\000\006\013\242\014\114\001\001\000\002\001\001\000" +
    "\004\020\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\043\013\075\014\114\031" +
    "\123\032\113\033\250\034\054\035\061\036\052\060\126" +
    "\063\072\001\001\000\002\001\001\000\006\013\252\014" +
    "\114\001\001\000\002\001\001\000\004\020\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\043\013\075\014\114\031\123\032\113\033\036" +
    "\034\054\035\061\036\260\060\126\063\072\001\001\000" +
    "\010\015\141\025\147\055\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\043\013" +
    "\075\014\114\031\123\032\113\033\036\034\054\035\061" +
    "\036\265\060\126\063\072\001\001\000\010\015\141\025" +
    "\147\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\043\013\075\014\114\031" +
    "\123\032\113\033\036\034\054\035\061\036\272\060\126" +
    "\063\072\001\001\000\010\015\141\025\147\055\137\001" +
    "\001\000\002\001\001\000\030\005\043\013\075\014\114" +
    "\031\123\032\113\033\036\034\054\035\061\036\275\060" +
    "\126\063\072\001\001\000\010\015\141\025\147\055\137" +
    "\001\001\000\004\020\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\043\013\075" +
    "\014\114\031\123\032\113\033\036\034\054\035\061\036" +
    "\304\060\126\063\072\001\001\000\002\001\001\000\010" +
    "\015\141\025\147\055\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Manejo de errores
    public void syntax_error(Symbol cur_token) {
    System.err.println("Error sintáctico en la línea " + (cur_token.left+1) + 
                       ", columna " + (cur_token.right));
    }
    
    //Errores no recuperables
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.err.println("Se alcanzó el final del archivo.");
        } else {
            System.err.println("Error de sintaxis irrecuperable en la línea " + (cur_token.left + 1) + 
                            ", columna " + (cur_token.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){
            System.out.println("Tabla de simbolo: " + key);
            System.out.println("La tabla contiene estos valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    // Agarra el tipo del token en la tabla de símbolos
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for(String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[2])){
                System.out.println("Nombre variable:" + partesToken[2]  + " tipo: " + tipo);
                tipo = partesToken[3];
                
            }
        }
        return tipo;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literales_navidenios ::= l_COLACHO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // narraNavidad ::= NARRA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // escuchaNavidad ::= ESCUCHA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t_santas ::= SANTACLAUSULA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // envia ::= ENVIA operando FINREGALO 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = oper.toString().split(":");
                    // Se verifica si tipo de la variable
                        if(!(partesOperando[1].equals("null"))){
                            RESULT = "dir:"+ partesOperando[1];
                            System.out.println("El tipo de retorno es: " + partesOperando[1]);
                        }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo de retorno de la función es nulo, revise si esa variable existe");
                                RESULT = "dir:null";
                         }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elfos ::= ELFO1 
            {
              Object RESULT =null;
		int elfgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elfos ::= ELFO2 
            {
              Object RESULT =null;
		int elfgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elfos ::= ELFO3 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elfos ::= ELFO4 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elfos ::= ELFO5 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elfos ::= ELFO6 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprUni ::= exprP FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprP ::= regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprP ::= exprRelLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regaloprin ::= COMETA operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regaloprin ::= operando renos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // grinchYQuien ::= unidadNavidenia operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprRelAux ::= operando elfos operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelAux",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprRelLog ::= exprRelAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprRelLog ::= exprLogAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprLogAux ::= BALTASAR operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprLogAux ::= operando logisticadeNavidad operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operando ::= PERSONA 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<String> ts = listaTablaSimbolos.get(currentHash);
            String tipoId = getTipo(ts,per.toString());
            if(tipoId != "null"){
                RESULT = "dir:"+tipoId;
                System.out.println("Acá entró y funcionó subir el tipo del per: " + tipoId);
            }else{
                RESULT = "dir:null";
                System.out.println("per tiene dirección nula:" + per);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operando ::= literales_navidenios 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = lst.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1]; 
                System.out.println("Acá entró y funcionó subir el tipo del literal: " + lst); 
            }else{
                RESULT = "dir:null";
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operando ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operando ::= accesoArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operando ::= exprP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operando ::= grinchYQuien 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operando ::= ABRECUENTO operando CIERRACUENTO 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // creaRegalo ::= POLO t_santas PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(!(tst.equals("null"))){
                            System.out.println("Declarada la variable sin asignación bien");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) + " Declaración sin variable." );
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // creaRegaloAssign ::= POLO t_santas PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                    String[] partesOperando = oper1.toString().split(":");

                    // Se verifica si tipo de la variable
                        if(!(tst.equals("null"))){
                            System.out.println("tipo de la variable permitido");
                            if(tst.equals(partesOperando[1])){
                                System.out.println("La variable coincide con su asignación");
                                RESULT = "dir:"+ tst;
                            }
                            else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo de la variable no coincide con su tipo de asignación");
                                RESULT = "dir:null";
                            }
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +": "  + "Tipo de la variable vacía");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // creaRegaloAssign ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decl_G ::= PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arrayDeclaration ::= POLO t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arrayDeclaration ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arrayInitialization ::= t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arrayInitialization ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaExpresiones ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaExpresiones ::= listaExpresiones MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // whileStmt ::= ENVOLTURA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA operando MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // hadaStm ::= HADA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructura ::= whileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructura ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // estructura ::= doWhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructura ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura ::= duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ids ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ids ::= ids MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamadaNavidenia ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamadaNavidenia ::= PERSONA ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamadaNavideniaAux ::= llamadaNavidenia FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavideniaAux",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Meterlo a la tabla de símbolos
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        currentHash = per.toString();
                        String tipoTabla = "main";
                        if (per.toString().equals("main")){
                            tipoTabla = "tipo:main:"+tst.toString();
                        }else{
                            tipoTabla = "tipo:function:"+tst.toString();
                            ArrayList<String> funcionMain = new ArrayList<String>();
                            funcionMain.add(tipoTabla);
                            listaTablaSimbolos.put(currentHash, funcionMain);
                        }

                        // Se verifica si el valor de retorno es apropiado
                        if((tst.equals("int") || tst.equals("float") || tst.equals("char") || tst.equals("bool"))){
                            System.out.println("tipo de la función permitida");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                             ", columna " + (cur_token.right) +": "  + "Tipo de la función no permitida");
                        }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // definirFunNav ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // definirFunNav ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // definirFunNav ::= error ABREREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Empieza el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NAVIDAD ::= NT$0 pbolsanavideniaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                imprimirTablaSimbolos();
                System.out.println("Termina el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // poloNorte ::= creaRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // poloNorte ::= creaRegaloAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // poloNorte ::= estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // poloNorte ::= envia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // poloNorte ::= exprUni 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // poloNorte ::= llamadaNavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // regalo ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
