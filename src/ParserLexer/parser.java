
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\030\004\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\032\004\000\002\032\005" +
    "\000\002\014\003\000\002\014\003\000\002\013\004\000" +
    "\002\034\005\000\002\033\003\000\002\033\003\000\002" +
    "\015\003\000\002\015\003\000\002\035\004\000\002\035" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\005\000\002\026\006\000\002\042\010\000\002" +
    "\042\004\000\002\057\006\000\002\020\004\000\002\020" +
    "\005\000\002\065\011\000\002\065\011\000\002\066\015" +
    "\000\002\066\016\000\002\067\003\000\002\067\005\000" +
    "\002\064\006\000\002\064\011\000\002\043\007\000\002" +
    "\050\011\000\002\044\015\000\002\044\016\000\002\044" +
    "\017\000\002\052\007\000\002\052\010\000\002\052\010" +
    "\000\002\052\011\000\002\053\007\000\002\054\003\000" +
    "\002\054\004\000\002\055\004\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\063" +
    "\003\000\002\063\005\000\002\061\005\000\002\061\006" +
    "\000\002\062\004\000\002\021\004\000\002\022\003\000" +
    "\002\022\005\000\002\060\005\000\002\023\005\000\002" +
    "\023\006\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\006\003\000\002\006\004\000\002\051\005" +
    "\000\002\024\004\000\002\010\007\000\002\011\007\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\017\003\000\002\017\004\000\002\017\003\000" +
    "\002\017\003\000\002\007\003\000\002\007\004\000\002" +
    "\070\002\000\002\003\004\000\002\047\003\000\002\047" +
    "\003\000\002\046\003\000\002\046\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\003\uff8d\004\uff8d\001\002\000\006\003" +
    "\011\004\007\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\020\060\027\061\016\062\022\063" +
    "\025\064\020\065\030\072\021\001\002\000\010\002\uff8f" +
    "\003\uff8f\004\uff8f\001\002\000\010\055\355\056\354\057" +
    "\353\001\002\000\012\002\uffa3\003\uffa3\004\uffa3\055\037" +
    "\001\002\000\010\002\uff8c\003\011\004\007\001\002\000" +
    "\004\051\015\001\002\000\022\052\024\060\027\061\016" +
    "\062\022\063\025\064\020\065\030\072\021\001\002\000" +
    "\004\007\ufffa\001\002\000\004\007\034\001\002\000\004" +
    "\007\ufff7\001\002\000\004\007\ufff5\001\002\000\004\007" +
    "\ufff9\001\002\000\006\052\uffab\067\uffab\001\002\000\012" +
    "\002\uffa8\003\uffa8\004\uffa8\055\uffa8\001\002\000\004\007" +
    "\ufff8\001\002\000\006\052\031\067\032\001\002\000\004" +
    "\007\ufffb\001\002\000\004\007\ufff6\001\002\000\012\002" +
    "\uffa7\003\uffa7\004\uffa7\055\uffa7\001\002\000\020\060\027" +
    "\061\016\062\022\063\025\064\020\065\030\072\021\001" +
    "\002\000\006\052\uffaa\067\uffaa\001\002\000\006\052\uffac" +
    "\067\uffac\001\002\000\010\002\uff8e\003\uff8e\004\uff8e\001" +
    "\002\000\010\002\uffa2\003\uffa2\004\uffa2\001\002\000\056" +
    "\003\100\007\053\010\045\011\062\012\063\013\050\014" +
    "\051\024\075\025\120\027\073\034\115\037\070\040\116" +
    "\041\067\043\111\044\077\047\101\050\043\051\103\056" +
    "\057\070\064\071\107\001\002\000\056\003\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\034\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\044\uffb2\047\uffb2\050\uffb2\051\uffb2\056\uffb2\070\uffb2\071" +
    "\uffb2\001\002\000\056\003\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\014\uff93\024\uff93\025\uff93\027\uff93\034" +
    "\uff93\037\uff93\040\uff93\041\uff93\043\uff93\044\uff93\047\uff93" +
    "\050\uff93\051\uff93\056\uff93\070\uff93\071\uff93\001\002\000" +
    "\056\003\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\024\uffb5\025\uffb5\027\uffb5\034\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\056\uffb5\070\uffb5\071\uffb5\001\002\000\022\060\027\061" +
    "\016\062\022\063\025\064\020\065\030\072\021\074\323" +
    "\001\002\000\052\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\045\uffd6\046\uffd6\052\uffd6\054\uffd6\056\uffd6\057" +
    "\uffd6\067\uffd6\073\uffd6\001\002\000\052\016\000\017\000" +
    "\020\000\021\000\022\000\023\000\026\000\027\000\030" +
    "\000\031\000\032\000\033\000\045\000\046\000\052\000" +
    "\054\000\056\000\057\000\067\000\073\000\001\002\000" +
    "\052\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\045" +
    "\uffe4\046\uffe4\052\uffe4\054\uffe4\056\uffe4\057\uffe4\067\uffe4" +
    "\073\uffe4\001\002\000\056\003\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\034\uffb3\037\uffb3\040\uffb3\041\uffb3\043\uffb3\044\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\056\uffb3\070\uffb3\071\uffb3\001\002" +
    "\000\052\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\045\ufffd\046\ufffd\052\ufffd\054\ufffd\056\ufffd\057\ufffd\067" +
    "\ufffd\073\ufffd\001\002\000\052\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\045\ufffc\046\ufffc\052\ufffc\054\ufffc" +
    "\056\ufffc\057\ufffc\067\ufffc\073\ufffc\001\002\000\056\003" +
    "\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90" +
    "\024\uff90\025\uff90\027\uff90\034\uff90\037\uff90\040\uff90\041" +
    "\uff90\043\uff90\044\uff90\047\uff90\050\uff90\051\uff90\056\uff90" +
    "\070\uff90\071\uff90\001\002\000\046\015\317\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\045\uffd7\046\uffd7\051" +
    "\132\053\131\073\uffd7\001\002\000\040\016\152\017\151" +
    "\020\150\021\147\022\146\023\145\026\156\027\141\030" +
    "\154\031\160\032\162\033\157\045\155\046\143\073\161" +
    "\001\002\000\056\003\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\024\uffb4\025\uffb4\027\uffb4\034\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\056\uffb4\070\uffb4\071\uffb4\001\002\000\056" +
    "\003\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014" +
    "\uff9a\024\uff9a\025\uff9a\027\uff9a\034\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\043\uff9a\044\uff9a\047\uff9a\050\uff9a\051\uff9a\056" +
    "\uff9a\070\uff9a\071\uff9a\001\002\000\070\002\uffcc\003\uffcc" +
    "\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\056\uffcc\070\uffcc\071\uffcc\001\002" +
    "\000\052\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\045\uffdd\046\uffdd\052\uffdd\054\uffdd\056\uffdd\057\uffdd\067" +
    "\uffdd\073\uffdd\001\002\000\056\003\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\024\uff9d\025\uff9d\027" +
    "\uff9d\034\uff9d\037\uff9d\040\uff9d\041\uff9d\043\uff9d\044\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\056\uff9d\070\uff9d\071\uff9d\001" +
    "\002\000\052\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\045\uffff\046\uffff\052\uffff\054\uffff\056\uffff\057\uffff" +
    "\067\uffff\073\uffff\001\002\000\052\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\026\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\045\ufffe\046\ufffe\052\ufffe\054" +
    "\ufffe\056\ufffe\057\ufffe\067\ufffe\073\ufffe\001\002\000\004" +
    "\051\313\001\002\000\056\003\uff95\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\014\uff95\024\uff95\025\uff95\027\uff95" +
    "\034\uff95\037\uff95\040\uff95\041\uff95\043\uff95\044\uff95\047" +
    "\uff95\050\uff95\051\uff95\056\uff95\070\uff95\071\uff95\001\002" +
    "\000\042\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\045\uffd5\046\uffd5\057\312\073\uffd5\001\002\000\004\055" +
    "\037\001\002\000\004\051\245\001\002\000\056\003\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\024" +
    "\uff99\025\uff99\027\uff99\034\uff99\037\uff99\040\uff99\041\uff99" +
    "\043\uff99\044\uff99\047\uff99\050\uff99\051\uff99\056\uff99\070" +
    "\uff99\071\uff99\001\002\000\052\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\045\uffd4\046\uffd4\052\uffd4\054\uffd4" +
    "\056\uffd4\057\uffd4\067\uffd4\073\uffd4\001\002\000\030\007" +
    "\126\010\045\011\062\012\063\013\050\014\051\024\075" +
    "\025\120\027\073\047\101\051\103\001\002\000\042\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\045\uffd2\046" +
    "\uffd2\057\243\073\uffd2\001\002\000\030\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\024\uffe1\025\uffe1\027" +
    "\uffe1\047\uffe1\051\uffe1\001\002\000\056\003\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\024\uff97\025" +
    "\uff97\027\uff97\034\uff97\037\uff97\040\uff97\041\uff97\043\uff97" +
    "\044\uff97\047\uff97\050\uff97\051\uff97\056\uff97\070\uff97\071" +
    "\uff97\001\002\000\004\057\242\001\002\000\004\057\241" +
    "\001\002\000\030\007\126\010\045\011\062\012\063\013" +
    "\050\014\051\024\075\025\120\027\073\047\101\051\103" +
    "\001\002\000\056\003\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\024\uff98\025\uff98\027\uff98\034\uff98" +
    "\037\uff98\040\uff98\041\uff98\043\uff98\044\uff98\047\uff98\050" +
    "\uff98\051\uff98\056\uff98\070\uff98\071\uff98\001\002\000\030" +
    "\007\126\010\045\011\062\012\063\013\050\014\051\024" +
    "\075\025\120\027\073\047\101\051\103\001\002\000\056" +
    "\003\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\024\uff9c\025\uff9c\027\uff9c\034\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\047\uff9c\050\uff9c\051\uff9c\056" +
    "\uff9c\070\uff9c\071\uff9c\001\002\000\056\003\uff9b\007\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\024\uff9b\025" +
    "\uff9b\027\uff9b\034\uff9b\037\uff9b\040\uff9b\041\uff9b\043\uff9b" +
    "\044\uff9b\047\uff9b\050\uff9b\051\uff9b\056\uff9b\070\uff9b\071" +
    "\uff9b\001\002\000\042\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\045\uffd3\046\uffd3\057\235\073\uffd3\001\002" +
    "\000\004\051\231\001\002\000\056\003\uff94\007\uff94\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\024\uff94\025\uff94" +
    "\027\uff94\034\uff94\037\uff94\040\uff94\041\uff94\043\uff94\044" +
    "\uff94\047\uff94\050\uff94\051\uff94\056\uff94\070\uff94\071\uff94" +
    "\001\002\000\030\007\126\010\045\011\062\012\063\013" +
    "\050\014\051\024\075\025\120\027\073\047\101\051\103" +
    "\001\002\000\052\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\045\uffe5\046\uffe5\052\uffe5\054\uffe5\056\uffe5\057" +
    "\uffe5\067\uffe5\073\uffe5\001\002\000\030\007\126\010\045" +
    "\011\062\012\063\013\050\014\051\024\075\025\120\027" +
    "\073\047\101\051\103\001\002\000\056\003\100\007\053" +
    "\010\045\011\062\012\063\013\050\014\051\024\075\025" +
    "\120\027\073\034\115\037\070\040\116\041\067\043\111" +
    "\044\077\047\101\050\216\051\103\056\217\070\064\071" +
    "\107\001\002\000\004\051\175\001\002\000\004\051\123" +
    "\001\002\000\056\003\uff91\007\uff91\010\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\024\uff91\025\uff91\027\uff91\034\uff91" +
    "\037\uff91\040\uff91\041\uff91\043\uff91\044\uff91\047\uff91\050" +
    "\uff91\051\uff91\056\uff91\070\uff91\071\uff91\001\002\000\030" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\047\uffe0\051\uffe0\001\002\000\052" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\045\uffdc" +
    "\046\uffdc\052\uffdc\054\uffdc\056\uffdc\057\uffdc\067\uffdc\073" +
    "\uffdc\001\002\000\056\003\uff96\007\uff96\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\024\uff96\025\uff96\027\uff96\034" +
    "\uff96\037\uff96\040\uff96\041\uff96\043\uff96\044\uff96\047\uff96" +
    "\050\uff96\051\uff96\056\uff96\070\uff96\071\uff96\001\002\000" +
    "\030\007\126\010\045\011\062\012\063\013\050\014\051" +
    "\024\075\025\120\027\073\047\101\051\103\001\002\000" +
    "\052\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\045" +
    "\uffd3\046\uffd3\052\uffd3\054\uffd3\056\uffd3\057\uffd3\067\uffd3" +
    "\073\uffd3\001\002\000\042\016\152\017\151\020\150\021" +
    "\147\022\146\023\145\026\156\027\141\030\154\031\160" +
    "\032\162\033\157\045\155\046\143\052\173\073\161\001" +
    "\002\000\056\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\045\uffd7\046\uffd7\051\132\052\uffd7\053\131\054\uffd7" +
    "\056\uffd7\057\uffd7\067\uffd7\073\uffd7\001\002\000\052\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\045\uffd2\046" +
    "\uffd2\052\uffd2\054\uffd2\056\uffd2\057\uffd2\067\uffd2\073\uffd2" +
    "\001\002\000\052\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\045\uffd5\046\uffd5\052\uffd5\054\uffd5\056\uffd5\057" +
    "\uffd5\067\uffd5\073\uffd5\001\002\000\030\007\126\010\045" +
    "\011\062\012\063\013\050\014\051\024\075\025\120\027" +
    "\073\047\101\051\103\001\002\000\032\007\126\010\045" +
    "\011\062\012\063\013\050\014\051\024\075\025\120\027" +
    "\073\047\101\051\103\052\133\001\002\000\052\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\045\uffaf\046\uffaf" +
    "\052\uffaf\054\uffaf\056\uffaf\057\uffaf\067\uffaf\073\uffaf\001" +
    "\002\000\044\016\152\017\151\020\150\021\147\022\146" +
    "\023\145\026\156\027\141\030\154\031\160\032\162\033" +
    "\157\045\155\046\143\052\uffb1\067\uffb1\073\161\001\002" +
    "\000\006\052\136\067\137\001\002\000\052\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\045\uffae\046\uffae\052" +
    "\uffae\054\uffae\056\uffae\057\uffae\067\uffae\073\uffae\001\002" +
    "\000\030\007\126\010\045\011\062\012\063\013\050\014" +
    "\051\024\075\025\120\027\073\047\101\051\103\001\002" +
    "\000\044\016\152\017\151\020\150\021\147\022\146\023" +
    "\145\026\156\027\141\030\154\031\160\032\162\033\157" +
    "\045\155\046\143\052\uffb0\067\uffb0\073\161\001\002\000" +
    "\030\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\024\uffee\025\uffee\027\uffee\047\uffee\051\uffee\001\002\000" +
    "\030\007\126\010\045\011\062\012\063\013\050\014\051" +
    "\024\075\025\120\027\073\047\101\051\103\001\002\000" +
    "\030\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\024\uffda\025\uffda\027\uffda\047\uffda\051\uffda\001\002\000" +
    "\030\007\126\010\045\011\062\012\063\013\050\014\051" +
    "\024\075\025\120\027\073\047\101\051\103\001\002\000" +
    "\030\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\024\uffef\025\uffef\027\uffef\047\uffef\051\uffef\001\002\000" +
    "\030\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\047\ufff0\051\ufff0\001\002\000" +
    "\030\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\024\ufff1\025\ufff1\027\ufff1\047\ufff1\051\ufff1\001\002\000" +
    "\030\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\024\ufff2\025\ufff2\027\ufff2\047\ufff2\051\ufff2\001\002\000" +
    "\030\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\024\ufff3\025\ufff3\027\ufff3\047\ufff3\051\ufff3\001\002\000" +
    "\030\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\024\ufff4\025\ufff4\027\ufff4\047\ufff4\051\ufff4\001\002\000" +
    "\030\007\126\010\045\011\062\012\063\013\050\014\051" +
    "\024\075\025\120\027\073\047\101\051\103\001\002\000" +
    "\030\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\047\uffeb\051\uffeb\001\002\000" +
    "\030\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\024\uffdb\025\uffdb\027\uffdb\047\uffdb\051\uffdb\001\002\000" +
    "\030\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\024\uffec\025\uffec\027\uffec\047\uffec\051\uffec\001\002\000" +
    "\030\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\024\uffe8\025\uffe8\027\uffe8\047\uffe8\051\uffe8\001\002\000" +
    "\030\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\024\uffea\025\uffea\027\uffea\047\uffea\051\uffea\001\002\000" +
    "\030\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\024\uffed\025\uffed\027\uffed\047\uffed\051\uffed\001\002\000" +
    "\030\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\047\uffe9\051\uffe9\001\002\000" +
    "\052\016\152\017\151\020\150\021\147\022\146\023\145" +
    "\026\156\027\141\030\154\031\160\032\162\033\157\045" +
    "\155\046\143\052\uffe2\054\uffe2\056\uffe2\057\uffe2\067\uffe2" +
    "\073\161\001\002\000\052\016\152\017\151\020\150\021" +
    "\147\022\146\023\145\026\156\027\141\030\154\031\160" +
    "\032\162\033\157\045\155\046\143\052\uffd8\054\uffd8\056" +
    "\uffd8\057\uffd8\067\uffd8\073\161\001\002\000\052\016\152" +
    "\017\151\020\150\021\147\022\146\023\145\026\156\027" +
    "\141\030\154\031\160\032\162\033\157\045\155\046\143" +
    "\052\uffde\054\uffde\056\uffde\057\uffde\067\uffde\073\161\001" +
    "\002\000\042\016\152\017\151\020\150\021\147\022\146" +
    "\023\145\026\156\027\141\030\154\031\160\032\162\033" +
    "\157\045\155\046\143\054\167\073\161\001\002\000\054" +
    "\015\170\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\045\uffc4\046\uffc4\052\uffc4\054\uffc4\056\uffc4\057\uffc4\067" +
    "\uffc4\073\uffc4\001\002\000\030\007\126\010\045\011\062" +
    "\012\063\013\050\014\051\024\075\025\120\027\073\047" +
    "\101\051\103\001\002\000\042\016\152\017\151\020\150" +
    "\021\147\022\146\023\145\026\156\027\141\030\154\031" +
    "\160\032\162\033\157\045\155\046\143\057\172\073\161" +
    "\001\002\000\052\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\045\uffc3\046\uffc3\052\uffc3\054\uffc3\056\uffc3\057" +
    "\uffc3\067\uffc3\073\uffc3\001\002\000\004\055\037\001\002" +
    "\000\056\003\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\024\uffc2\025\uffc2\027\uffc2\034\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\056\uffc2\070\uffc2\071\uffc2\001\002\000\030\007\126" +
    "\010\045\011\062\012\063\013\050\014\051\024\075\025" +
    "\120\027\073\047\101\051\103\001\002\000\042\016\152" +
    "\017\151\020\150\021\147\022\146\023\145\026\156\027" +
    "\141\030\154\031\160\032\162\033\157\045\155\046\143" +
    "\052\177\073\161\001\002\000\004\055\037\001\002\000" +
    "\062\003\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\024\uffbd\025\uffbd\027\uffbd\034\uffbd\035\202\036" +
    "\201\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\056\uffbd\070\uffbd\071\uffbd\001\002\000" +
    "\004\055\037\001\002\000\004\051\210\001\002\000\062" +
    "\003\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\024\uffb8\025\uffb8\027\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\056\uffb8\070\uffb8\071\uffb8\001\002\000\062" +
    "\003\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\024\uffbb\025\uffbb\027\uffbb\034\uffbb\035\202\036\201" +
    "\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\056\uffbb\070\uffbb\071\uffbb\001\002\000\056" +
    "\003\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\024\uffbc\025\uffbc\027\uffbc\034\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\043\uffbc\044\uffbc\047\uffbc\050\uffbc\051\uffbc\056" +
    "\uffbc\070\uffbc\071\uffbc\001\002\000\062\003\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\056" +
    "\uffb7\070\uffb7\071\uffb7\001\002\000\056\003\uffba\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\024\uffba\025" +
    "\uffba\027\uffba\034\uffba\037\uffba\040\uffba\041\uffba\043\uffba" +
    "\044\uffba\047\uffba\050\uffba\051\uffba\056\uffba\070\uffba\071" +
    "\uffba\001\002\000\030\007\126\010\045\011\062\012\063" +
    "\013\050\014\051\024\075\025\120\027\073\047\101\051" +
    "\103\001\002\000\042\016\152\017\151\020\150\021\147" +
    "\022\146\023\145\026\156\027\141\030\154\031\160\032" +
    "\162\033\157\045\155\046\143\052\212\073\161\001\002" +
    "\000\004\055\037\001\002\000\062\003\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\024\uffb9\025\uffb9" +
    "\027\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\043\uffb9\044\uffb9\047\uffb9\050\uffb9\051\uffb9\056\uffb9" +
    "\070\uffb9\071\uffb9\001\002\000\056\003\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\024\uffb6\025\uffb6" +
    "\027\uffb6\034\uffb6\037\uffb6\040\uffb6\041\uffb6\043\uffb6\044" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\056\uffb6\070\uffb6\071\uffb6" +
    "\001\002\000\056\003\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\013\uff92\014\uff92\024\uff92\025\uff92\027\uff92\034\uff92" +
    "\037\uff92\040\uff92\041\uff92\043\uff92\044\uff92\047\uff92\050" +
    "\uff92\051\uff92\056\uff92\070\uff92\071\uff92\001\002\000\020" +
    "\060\027\061\016\062\022\063\025\064\020\065\030\072" +
    "\021\001\002\000\070\002\uffcb\003\uffcb\004\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\056\uffcb\070\uffcb\071\uffcb\001\002\000\004\007\221" +
    "\001\002\000\006\015\223\057\222\001\002\000\056\003" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\024\uffd0\025\uffd0\027\uffd0\034\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\043\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\056\uffd0" +
    "\070\uffd0\071\uffd0\001\002\000\030\007\126\010\045\011" +
    "\062\012\063\013\050\014\051\024\075\025\120\027\073" +
    "\047\101\051\103\001\002\000\042\016\152\017\151\020" +
    "\150\021\147\022\146\023\145\026\156\027\141\030\154" +
    "\031\160\032\162\033\157\045\155\046\143\057\225\073" +
    "\161\001\002\000\056\003\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\024\uffcf\025\uffcf\027\uffcf\034" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\056\uffcf\070\uffcf\071\uffcf\001\002\000" +
    "\052\016\152\017\151\020\150\021\147\022\146\023\145" +
    "\026\156\027\141\030\154\031\160\032\162\033\157\045" +
    "\155\046\143\052\uffdf\054\uffdf\056\uffdf\057\uffdf\067\uffdf" +
    "\073\161\001\002\000\042\016\152\017\151\020\150\021" +
    "\147\022\146\023\145\026\156\027\141\030\154\031\160" +
    "\032\162\033\157\045\155\046\143\057\230\073\161\001" +
    "\002\000\056\003\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\024\uffa1\025\uffa1\027\uffa1\034\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\043\uffa1\044\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\056\uffa1\070\uffa1\071\uffa1\001\002\000\030\007" +
    "\126\010\045\011\062\012\063\013\050\014\051\024\075" +
    "\025\120\027\073\047\101\051\103\001\002\000\042\016" +
    "\152\017\151\020\150\021\147\022\146\023\145\026\156" +
    "\027\141\030\154\031\160\032\162\033\157\045\155\046" +
    "\143\052\233\073\161\001\002\000\004\057\234\001\002" +
    "\000\056\003\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\024\uff9e\025\uff9e\027\uff9e\034\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\043\uff9e\044\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\056\uff9e\070\uff9e\071\uff9e\001\002\000\056\003\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\034\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\056\uffe7\070" +
    "\uffe7\071\uffe7\001\002\000\042\016\152\017\151\020\150" +
    "\021\147\022\146\023\145\026\156\027\141\030\154\031" +
    "\160\032\162\033\157\045\155\046\143\052\237\073\161" +
    "\001\002\000\052\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\045\uffd1\046\uffd1\052\uffd1\054\uffd1\056\uffd1\057" +
    "\uffd1\067\uffd1\073\uffd1\001\002\000\052\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\045\uffd9\046\uffd9\052\uffd9" +
    "\054\uffd9\056\uffd9\057\uffd9\067\uffd9\073\uffd9\001\002\000" +
    "\056\003\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\024\uffce\025\uffce\027\uffce\034\uffce\037\uffce\040" +
    "\uffce\041\uffce\043\uffce\044\uffce\047\uffce\050\uffce\051\uffce" +
    "\056\uffce\070\uffce\071\uffce\001\002\000\056\003\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\024\uffa0" +
    "\025\uffa0\027\uffa0\034\uffa0\037\uffa0\040\uffa0\041\uffa0\043" +
    "\uffa0\044\uffa0\047\uffa0\050\uffa0\051\uffa0\056\uffa0\070\uffa0" +
    "\071\uffa0\001\002\000\056\003\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\034\uffe6\037\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\056\uffe6\070\uffe6\071\uffe6\001\002" +
    "\000\052\016\152\017\151\020\150\021\147\022\146\023" +
    "\145\026\uffe3\027\uffe3\030\154\031\160\032\162\033\157" +
    "\045\155\046\143\052\uffe3\054\uffe3\056\uffe3\057\uffe3\067" +
    "\uffe3\073\161\001\002\000\010\007\247\050\246\061\250" +
    "\001\002\000\004\061\272\001\002\000\004\015\262\001" +
    "\002\000\004\007\251\001\002\000\004\015\252\001\002" +
    "\000\004\010\253\001\002\000\004\067\254\001\002\000" +
    "\030\007\126\010\045\011\062\012\063\013\050\014\051" +
    "\024\075\025\120\027\073\047\101\051\103\001\002\000" +
    "\042\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\045" +
    "\uffe4\046\uffe4\067\256\073\uffe4\001\002\000\006\024\075" +
    "\025\120\001\002\000\004\052\260\001\002\000\004\055" +
    "\037\001\002\000\056\003\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\024\uffbf\025\uffbf\027\uffbf\034" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\056\uffbf\070\uffbf\071\uffbf\001\002\000" +
    "\004\010\263\001\002\000\004\067\264\001\002\000\030" +
    "\007\126\010\045\011\062\012\063\013\050\014\051\024" +
    "\075\025\120\027\073\047\101\051\103\001\002\000\042" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\045\uffe4" +
    "\046\uffe4\067\266\073\uffe4\001\002\000\006\024\075\025" +
    "\120\001\002\000\004\052\270\001\002\000\004\055\037" +
    "\001\002\000\056\003\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\024\uffc0\025\uffc0\027\uffc0\034\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\043\uffc0\044\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\056\uffc0\070\uffc0\071\uffc0\001\002\000\004" +
    "\007\273\001\002\000\004\015\274\001\002\000\030\007" +
    "\126\010\045\011\062\012\063\013\050\014\051\024\075" +
    "\025\120\027\073\047\101\051\103\001\002\000\042\016" +
    "\152\017\151\020\150\021\147\022\146\023\145\026\156" +
    "\027\141\030\154\031\160\032\162\033\157\045\155\046" +
    "\143\067\276\073\161\001\002\000\030\007\126\010\045" +
    "\011\062\012\063\013\050\014\051\024\075\025\120\027" +
    "\073\047\101\051\103\001\002\000\042\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\045\uffe4\046\uffe4\067\300" +
    "\073\uffe4\001\002\000\006\024\075\025\120\001\002\000" +
    "\004\052\302\001\002\000\004\055\037\001\002\000\056" +
    "\003\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\024\uffbe\025\uffbe\027\uffbe\034\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\043\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\056" +
    "\uffbe\070\uffbe\071\uffbe\001\002\000\004\042\305\001\002" +
    "\000\004\051\306\001\002\000\030\007\126\010\045\011" +
    "\062\012\063\013\050\014\051\024\075\025\120\027\073" +
    "\047\101\051\103\001\002\000\042\016\152\017\151\020" +
    "\150\021\147\022\146\023\145\026\156\027\141\030\154" +
    "\031\160\032\162\033\157\045\155\046\143\052\310\073" +
    "\161\001\002\000\004\057\311\001\002\000\056\003\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\024" +
    "\uffc1\025\uffc1\027\uffc1\034\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\056\uffc1\070" +
    "\uffc1\071\uffc1\001\002\000\056\003\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\024\uffad\025\uffad\027" +
    "\uffad\034\uffad\037\uffad\040\uffad\041\uffad\043\uffad\044\uffad" +
    "\047\uffad\050\uffad\051\uffad\056\uffad\070\uffad\071\uffad\001" +
    "\002\000\030\007\126\010\045\011\062\012\063\013\050" +
    "\014\051\024\075\025\120\027\073\047\101\051\103\001" +
    "\002\000\042\016\152\017\151\020\150\021\147\022\146" +
    "\023\145\026\156\027\141\030\154\031\160\032\162\033" +
    "\157\045\155\046\143\052\315\073\161\001\002\000\004" +
    "\057\316\001\002\000\056\003\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\024\uff9f\025\uff9f\027\uff9f" +
    "\034\uff9f\037\uff9f\040\uff9f\041\uff9f\043\uff9f\044\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\056\uff9f\070\uff9f\071\uff9f\001\002" +
    "\000\030\007\126\010\045\011\062\012\063\013\050\014" +
    "\051\024\075\025\120\027\073\047\101\051\103\001\002" +
    "\000\042\016\152\017\151\020\150\021\147\022\146\023" +
    "\145\026\156\027\141\030\154\031\160\032\162\033\157" +
    "\045\155\046\143\057\321\073\161\001\002\000\056\003" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\034\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\056\uffcd" +
    "\070\uffcd\071\uffcd\001\002\000\004\007\341\001\002\000" +
    "\020\060\027\061\016\062\022\063\025\064\020\065\030" +
    "\072\021\001\002\000\004\007\325\001\002\000\004\053" +
    "\326\001\002\000\004\010\327\001\002\000\004\054\330" +
    "\001\002\000\060\003\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\331\024\uffc9\025\uffc9\027\uffc9" +
    "\034\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\056\uffc9\070\uffc9\071\uffc9\001\002" +
    "\000\004\055\332\001\002\000\030\007\126\010\045\011" +
    "\062\012\063\013\050\014\051\024\075\025\120\027\073" +
    "\047\101\051\103\001\002\000\044\016\152\017\151\020" +
    "\150\021\147\022\146\023\145\026\156\027\141\030\154" +
    "\031\160\032\162\033\157\045\155\046\143\056\uffc6\067" +
    "\uffc6\073\161\001\002\000\006\056\335\067\336\001\002" +
    "\000\004\057\340\001\002\000\030\007\126\010\045\011" +
    "\062\012\063\013\050\014\051\024\075\025\120\027\073" +
    "\047\101\051\103\001\002\000\044\016\152\017\151\020" +
    "\150\021\147\022\146\023\145\026\156\027\141\030\154" +
    "\031\160\032\162\033\157\045\155\046\143\056\uffc5\067" +
    "\uffc5\073\161\001\002\000\056\003\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\024\uffc7\025\uffc7\027" +
    "\uffc7\034\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\056\uffc7\070\uffc7\071\uffc7\001" +
    "\002\000\010\015\223\053\342\057\222\001\002\000\004" +
    "\010\343\001\002\000\004\054\344\001\002\000\006\015" +
    "\345\057\346\001\002\000\004\055\347\001\002\000\056" +
    "\003\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\024\uffca\025\uffca\027\uffca\034\uffca\037\uffca\040\uffca" +
    "\041\uffca\043\uffca\044\uffca\047\uffca\050\uffca\051\uffca\056" +
    "\uffca\070\uffca\071\uffca\001\002\000\030\007\126\010\045" +
    "\011\062\012\063\013\050\014\051\024\075\025\120\027" +
    "\073\047\101\051\103\001\002\000\006\056\351\067\336" +
    "\001\002\000\004\057\352\001\002\000\056\003\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\034\uffc8\037\uffc8\040\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\047\uffc8\050\uffc8\051\uffc8\056\uffc8\070\uffc8" +
    "\071\uffc8\001\002\000\012\002\uffa6\003\uffa6\004\uffa6\055" +
    "\uffa6\001\002\000\012\002\uffa5\003\uffa5\004\uffa5\055\uffa5" +
    "\001\002\000\012\002\uffa4\003\uffa4\004\uffa4\055\uffa4\001" +
    "\002\000\004\007\357\001\002\000\004\051\uffa9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\006\003\004\070\003\001\001\000\012\006" +
    "\007\007\012\023\011\060\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\035\001\001\000\010" +
    "\006\034\023\011\060\013\001\001\000\002\001\001\000" +
    "\010\004\016\021\022\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\016\021\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\002\040\005\043\010\055\011\121" +
    "\013\073\014\112\017\113\024\064\026\103\027\070\030" +
    "\075\031\105\032\111\033\045\034\057\035\120\036\053" +
    "\042\104\043\041\044\054\050\046\051\101\052\037\057" +
    "\060\061\065\062\107\064\071\065\051\066\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\143\025\141\056\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\043\013\126\014\112\031\123\032\111" +
    "\033\045\034\057\035\120\036\243\061\127\064\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\043\013" +
    "\126\014\112\031\123\032\111\033\045\034\057\035\120" +
    "\036\237\061\127\064\071\001\001\000\002\001\001\000" +
    "\030\005\043\013\126\014\112\031\123\032\111\033\045" +
    "\034\057\035\120\036\235\061\127\064\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\043\013\126\014" +
    "\112\031\123\032\111\033\045\034\057\035\120\036\226" +
    "\061\127\064\071\001\001\000\002\001\001\000\030\005" +
    "\043\013\126\014\112\031\123\032\111\033\045\034\057" +
    "\035\120\036\225\061\127\064\071\001\001\000\066\002" +
    "\214\005\043\010\055\011\121\013\073\014\112\024\064" +
    "\026\103\027\070\030\075\031\105\032\111\033\045\034" +
    "\057\035\120\036\053\042\104\043\041\044\054\050\046" +
    "\051\101\052\037\057\060\061\065\062\107\064\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\043\013\126\014\112\031\123\032\111\033\045" +
    "\034\057\035\120\036\124\061\127\064\071\001\001\000" +
    "\002\001\001\000\010\015\143\025\141\056\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\043\013\126\014\112\031\123\032\111\033\045" +
    "\034\057\035\120\036\165\061\127\064\071\001\001\000" +
    "\032\005\043\013\126\014\112\031\123\032\111\033\045" +
    "\034\057\035\120\036\133\061\127\063\134\064\071\001" +
    "\001\000\002\001\001\000\010\015\143\025\141\056\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\043\013\126\014\112\031\123\032\111\033\045\034\057" +
    "\035\120\036\137\061\127\064\071\001\001\000\010\015" +
    "\143\025\141\056\152\001\001\000\002\001\001\000\030" +
    "\005\043\013\126\014\112\031\123\032\111\033\045\034" +
    "\057\035\120\036\164\061\127\064\071\001\001\000\002" +
    "\001\001\000\030\005\043\013\126\014\112\031\123\032" +
    "\111\033\045\034\057\035\120\036\163\061\127\064\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\043\013\126\014\112\031\123\032\111\033" +
    "\045\034\057\035\120\036\162\061\127\064\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\143\025\141\056\152\001\001\000" +
    "\010\015\143\025\141\056\152\001\001\000\010\015\143" +
    "\025\141\056\152\001\001\000\010\015\143\025\141\056" +
    "\152\001\001\000\002\001\001\000\030\005\043\013\126" +
    "\014\112\031\123\032\111\033\045\034\057\035\120\036" +
    "\170\061\127\064\071\001\001\000\010\015\143\025\141" +
    "\056\152\001\001\000\002\001\001\000\004\020\173\001" +
    "\001\000\002\001\001\000\030\005\043\013\126\014\112" +
    "\031\123\032\111\033\045\034\057\035\120\036\175\061" +
    "\127\064\071\001\001\000\010\015\143\025\141\056\152" +
    "\001\001\000\004\020\177\001\001\000\010\053\202\054" +
    "\203\055\204\001\001\000\004\020\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\205\055\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\043\013\126\014\112\031\123\032\111\033" +
    "\045\034\057\035\120\036\210\061\127\064\071\001\001" +
    "\000\010\015\143\025\141\056\152\001\001\000\004\020" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\043\013\126\014\112\031\123\032\111\033\045\034" +
    "\057\035\120\036\223\061\127\064\071\001\001\000\010" +
    "\015\143\025\141\056\152\001\001\000\002\001\001\000" +
    "\010\015\143\025\141\056\152\001\001\000\010\015\143" +
    "\025\141\056\152\001\001\000\002\001\001\000\030\005" +
    "\043\013\126\014\112\031\123\032\111\033\045\034\057" +
    "\035\120\036\231\061\127\064\071\001\001\000\010\015" +
    "\143\025\141\056\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\143\025\141\056" +
    "\152\001\001\000\002\001\001\000\010\015\143\025\141" +
    "\056\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\143\025\141\056\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\043\013\126\014\112\031\123\032" +
    "\111\033\254\034\057\035\120\036\053\061\127\064\071" +
    "\001\001\000\002\001\001\000\006\013\256\014\112\001" +
    "\001\000\002\001\001\000\004\020\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\043\013\126\014\112\031\123\032\111\033\264\034\057" +
    "\035\120\036\053\061\127\064\071\001\001\000\002\001" +
    "\001\000\006\013\266\014\112\001\001\000\002\001\001" +
    "\000\004\020\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\043\013\126\014\112" +
    "\031\123\032\111\033\045\034\057\035\120\036\274\061" +
    "\127\064\071\001\001\000\010\015\143\025\141\056\152" +
    "\001\001\000\030\005\043\013\126\014\112\031\123\032" +
    "\111\033\276\034\057\035\120\036\053\061\127\064\071" +
    "\001\001\000\002\001\001\000\006\013\300\014\112\001" +
    "\001\000\002\001\001\000\004\020\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\043\013\126\014\112\031\123\032\111\033\045\034\057" +
    "\035\120\036\306\061\127\064\071\001\001\000\010\015" +
    "\143\025\141\056\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\043\013\126\014" +
    "\112\031\123\032\111\033\045\034\057\035\120\036\313" +
    "\061\127\064\071\001\001\000\010\015\143\025\141\056" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\043\013\126\014\112\031\123\032\111\033\045\034" +
    "\057\035\120\036\317\061\127\064\071\001\001\000\010" +
    "\015\143\025\141\056\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\043\013\126" +
    "\014\112\031\123\032\111\033\045\034\057\035\120\036" +
    "\332\061\127\064\071\067\333\001\001\000\010\015\143" +
    "\025\141\056\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\043\013\126\014\112\031\123\032\111" +
    "\033\045\034\057\035\120\036\336\061\127\064\071\001" +
    "\001\000\010\015\143\025\141\056\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\043\013\126\014\112\031\123\032\111\033" +
    "\045\034\057\035\120\036\332\061\127\064\071\067\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Manejo de errores
    public void syntax_error(Symbol cur_token) {
    System.err.println("Error sintáctico en la línea " + (cur_token.left+1) + 
                       ", columna " + (cur_token.right));
    }
    
    //Errores no recuperables
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.err.println("Se alcanzó el final del archivo.");
        } else {
            System.err.println("Error de sintaxis irrecuperable en la línea " + (cur_token.left + 1) + 
                            ", columna " + (cur_token.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){  
            System.out.println("\nLa tabla contiene estos valores: ");
            System.out.println("Tabla de simbolo: " + key);
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    // Agarra el tipo del token en la tabla de símbolos
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for(String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[2])){
                //System.out.println("Nombre variable:" + partesToken[2]  + " tipo: " + tipo);
                tipo = partesToken[3];
                
            }
        }
        return tipo;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literales_navidenios ::= l_COLACHO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_santas ::= SANTACLAUSULA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elfos ::= ELFO1 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elfos ::= ELFO2 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elfos ::= ELFO3 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elfos ::= ELFO4 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elfos ::= ELFO5 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elfos ::= ELFO6 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // renos ::= CUPIENTERO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprUni ::= exprP FINREGALO 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = pr.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }
                else{
                    RESULT = "dir:null";
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprUni ::= grinchYQuien FINREGALO 
            {
              Object RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object gr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = gr.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }
                else{
                    RESULT = "dir:null";
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprP ::= regaloprin 
            {
              Object RESULT =null;
		int prinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = prin.toString().split(":");
            if(!(partesOperando[1].equals("null"))){
                RESULT = "dir:"+ partesOperando[1];
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprP ::= regaloCompradoLog 
            {
              Object RESULT =null;
		int prlogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prlogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prlog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            //System.out.println("prlog es: "+prlog);
            String[] partesOperando = prlog.toString().split(":");
            if(prlog != null || !(partesOperando[1].equals("null"))){
                RESULT = "dir:"+partesOperando[1];
            }
            else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // regaloprin ::= COMETA operando 
            {
              Object RESULT =null;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando = oper3.toString().split(":");
                if(partesOperando[1].equals("int") || partesOperando[1].equals("float") ){
                    RESULT = "dir:"+partesOperando[1];  
                }else{
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // regaloprin ::= operando renos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando1 = oper1.toString().split(":");
                String[] partesOperando2 = oper2.toString().split(":");

                if(rn.equals("/")){
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("float")){
                            System.out.println("Es división flotante");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) +
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitido: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }   
                else if(rn.equals("//")){
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("int")){
                            System.out.println("Es división entera");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitido: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
                else{  
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("int") || partesOperando1[1].equals("float")){
                                RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitidos \n para las operaciones aritméticas: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                        }
                    }     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = gr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = qn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // grinchYQuien ::= unidadNavidenia operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = oper1.toString().split(":");
            if(partesOperando[1].equals("int")){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
                System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "El tipo para su unario no es correcto");
                        RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // regaloCompradoAux ::= operando elfos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                // Permite expresiones relacionales (==, !=) del mismo tipo, mientras que sean int, float y bool
                if((elf.equals("==") || elf.equals("!="))){
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        System.out.println("Los tipos de los operadores == y != son los mismos");
                        if ((partesOperando1[1].equals("int")|| partesOperando1[1].equals("float")|| partesOperando1[1].equals("bool"))){
                            System.out.println("Los tipos int, float y bool son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos i-f-b: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
                // Permite expresiones relacionales (<, >, =>, =<) del mismo tipo, mientras que sean int y float
                else{
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        System.out.println("Los tipos del resto de operadores relacionales son los mismos");
                        if (partesOperando1[1].equals("int") || partesOperando1[1].equals("float")){
                            System.out.println("Los tipos int, float son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos i-f: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoAux",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // regaloCompradoLog ::= regaloCompradoAux 
            {
              Object RESULT =null;
		int relauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object relaux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("relaux es:" +relaux);
            if(relaux != null){
                RESULT = relaux;
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // regaloCompradoLog ::= regaloManualAux 
            {
              Object RESULT =null;
		int logauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logaux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("logaux es:" +logaux);
            if(logaux != null){
                RESULT = logaux;
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;
		int melleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int melright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;
		int galleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int galright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = gal;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // regaloManualAux ::= BALTASAR operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = oper1.toString().split(":");
            if(oper1 != null || !(partesOperando[1].equals("null"))){
                RESULT = "dir:"+partesOperando[1];
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManualAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // regaloManualAux ::= operando logisticadeNavidad operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                if(partesOperando1[1].equals(partesOperando2[1])){
                    /*System.out.println("Los operandos de esta operación en la línea" + (cur_token.left+1) + 
                     ", columna " + (cur_token.right) +":"+"son del mismo tipo logico");*/
                    RESULT = "dir:"+partesOperando1[1];
                }else{
                    System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos lógicos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManualAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operando ::= PERSONA 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<String> ts = listaTablaSimbolos.get(currentHash);
            String tipoId = getTipo(ts,per.toString());
            if(tipoId != "null"){
                RESULT = "dir:"+tipoId;
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operando ::= literales_navidenios 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = lst.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1]; 
            }else{
                RESULT = "dir:null";
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operando ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operando ::= accesoArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operando ::= exprP 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = pr.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operando ::= grinchYQuien 
            {
              Object RESULT =null;
		int gqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = gq.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operando ::= ABRECUENTO operando CIERRACUENTO 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creaRegalo ::= POLO t_santas PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(!(tst.equals("null"))){
                            //System.out.println("Bien declarada la variable sin asignación");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) + " Mal declarada la variable sin asignación");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creaRegaloAssign ::= POLO t_santas PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                    String[] partesOperando = oper1.toString().split(":");

                    // Se verifica si tipo de la variable
                        if(!(tst.equals("null"))){
                            //System.out.println("tipo de la variable permitido");
                            if(tst.equals(partesOperando[1])){
                                //System.out.println("La variable coincide con su asignación");
                                RESULT = "dir:"+ tst;
                            }
                            else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +":"  + " Tipo de la variable no coincide con su tipo de asignación");
                                RESULT = "dir:null";
                            }
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo de la variable vacía");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // creaRegaloAssign ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decl_G ::= PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = reg.toString().split(":");
            if(!(partesOperando[1].equals("null"))){
                RESULT = "dir:"+ partesOperando[1];
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arrayDeclaration ::= POLO t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(tst.equals("int")|| tst.equals("char")){  
                            RESULT = "dir:"+tst;
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de tipo char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arrayDeclaration ::= POLO GALLETAQUIETA t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int gaieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gaieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object gaie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(tst.equals("int")|| tst.equals("char")){  
                            RESULT = "dir:"+tst;
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de tipo char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arrayInitialization ::= POLO t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lisexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lisexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        String[] partesOperando = lisexpr.toString().split(":");
                        if(tst.equals("int")){  
                            if((partesOperando[1].equals("int"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo INT");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else if(tst.equals("char")){
                            if((partesOperando[1].equals("char"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo CHAR");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arrayInitialization ::= POLO GALLETAQUIETA t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int gaieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int gaieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object gaie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lisexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lisexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        String[] partesOperando = lisexpr.toString().split(":");
                        if(tst.equals("int")){  
                            if((partesOperando[1].equals("int"))){
                                if(tst.equals(partesOperando[1])){
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else if(tst.equals("char")){
                            if((partesOperando[1].equals("char"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo CHAR");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaExpresiones ::= operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = oper1.toString().split(":");
                    if(partesOperando[1].equals("int")|| partesOperando[1].equals("char")){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "No llega cargado de ni de tipo int ni char");
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaExpresiones ::= listaExpresiones MUERDAGO operando 
            {
              Object RESULT =null;
		int lsexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lsexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = oper2.toString().split(":");
                    if(partesOperando[1].equals("int")|| partesOperando[1].equals("char")){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "No llega cargado de ni de tipo int ni char");
                        RESULT = "dir:null";
                    }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // whileStmt ::= ENVOLTURA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO regaloCompradoLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO regaloCompradoLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA operando MUERDAGO regaloCompradoLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // hadaStm ::= HADA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // hadaMulti ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // hadaMulti ::= hadaMulti hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura ::= whileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura ::= doWhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ids ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ids ::= ids MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamadaNavidenia ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // llamadaNavidenia ::= PERSONA ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamadaNavideniaAux ::= llamadaNavidenia FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavideniaAux",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Meterlo a la tabla de símbolos
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        currentHash = per.toString();
                        String tipoTabla = "main";
                        if (per.toString().equals("main")){
                            tipoTabla = "tipo:main:"+tst.toString();
                        }else{
                            tipoTabla = "tipo:function:"+tst.toString();
                            ArrayList<String> funcionMain = new ArrayList<String>();
                            funcionMain.add(tipoTabla);
                            listaTablaSimbolos.put(currentHash, funcionMain);
                        }

                        // Se verifica si el valor de retorno es apropiado
                        if((tst.equals("int") || tst.equals("float") || tst.equals("char") || tst.equals("bool"))){
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                             ", columna " + (cur_token.right) +": "  + "Este tipo de función no es permitido: "+ tst);
                             RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // definirFunNav ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // definirFunNav ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // definirFunNav ::= error ABREREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 String[] partesOperando1 = defin.toString().split(":");
                 RESULT = "dir:" + partesOperando1[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando1 = defin.toString().split(":");
                String[] partesOperando2 = cuer.toString().split(":");
                if(!(partesOperando1[1].equals(partesOperando2[1]))){
                    System.out.println("Error Semántico: El retorno de la función no cumple con su tipo esperado de salida");
                    RESULT = "dir:" + partesOperando1[1];
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // envia ::= ENVIA operando FINREGALO 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = oper.toString().split(":");
                    // Se verifica si tipo de la variable
                        if((partesOperando[1].equals("null") || partesOperando[1].equals("string"))){
                           System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo de retorno de la función es nulo, revise si esa variable existe");
                                RESULT = "dir:null"; 
                        }else{ 
                            RESULT = "dir:"+ partesOperando[1];
                            //System.out.println("El tipo de retorno es: " + partesOperando[1]);
                         }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // narraNavidad ::= NARRA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int opernarraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opernarraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opernarra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = opernarra.toString().split(":");
                    if(partesOperando[1].equals("int")||partesOperando[1].equals("float") || partesOperando[1].equals("string")){
                        RESULT = "dir:"+ partesOperando[1];
                        System.out.println("tipo del read correcto");
                    }else{
                        RESULT = "dir:null";
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo del print erróneo, revise su tipo");
                                RESULT = "dir:null"; 
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // escuchaNavidad ::= ESCUCHA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int operescuchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operescucharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object operescucha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = operescucha.toString().split(":");
                    if(partesOperando[1].equals("int")||(partesOperando[1].equals("float"))){
                        RESULT = "dir:"+ partesOperando[1];
                        System.out.println("tipo del read correcto");
                    }else{
                        RESULT = "dir:null";
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo del read erróneo");
                                RESULT = "dir:null"; 
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // poloNorte ::= creaRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // poloNorte ::= creaRegaloAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;
		int narraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int narraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object narra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = narra.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // poloNorte ::= estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // poloNorte ::= envia 
            {
              Object RESULT =null;
		int envleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object env = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = env.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // poloNorte ::= exprUni 
            {
              Object RESULT =null;
		int prUnileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prUniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prUni = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = prUni.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;
		int escuchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int escucharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object escucha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = escucha.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // poloNorte ::= llamadaNavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // regalo ::= poloNorte 
            {
              Object RESULT =null;
		int poli1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (poli1 != null) {
                    RESULT = poli1;
                } else {
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poli2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = poli2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // regalo ::= arrayInitialization 
            {
              Object RESULT =null;
		int arzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arzright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (arz != null) {
                    RESULT = arz;
                } else {
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // regalo ::= arrayDeclaration 
            {
              Object RESULT =null;
		int ardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ard = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (ard != null) {
                    RESULT = ard;
                } else {
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Empieza el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // navidad ::= NT$0 pbolsanavideniaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                imprimirTablaSimbolos();
                System.out.println("Termina el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
