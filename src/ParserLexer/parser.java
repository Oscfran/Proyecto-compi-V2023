
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\010\007\000\002\011\007\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\051" +
    "\005\000\002\024\004\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\030\004\000\002\031\003\000\002\031" +
    "\003\000\002\032\004\000\002\032\005\000\002\014\003" +
    "\000\002\014\003\000\002\013\004\000\002\034\005\000" +
    "\002\033\003\000\002\033\003\000\002\015\003\000\002" +
    "\015\003\000\002\035\004\000\002\035\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\005\000" +
    "\002\026\006\000\002\042\010\000\002\042\004\000\002" +
    "\057\006\000\002\020\004\000\002\020\005\000\002\065" +
    "\011\000\002\065\004\000\002\066\014\000\002\066\004" +
    "\000\002\067\003\000\002\067\005\000\002\064\006\000" +
    "\002\064\011\000\002\043\007\000\002\050\011\000\002" +
    "\044\015\000\002\044\016\000\002\044\017\000\002\052" +
    "\007\000\002\052\010\000\002\052\010\000\002\052\011" +
    "\000\002\053\007\000\002\054\003\000\002\054\004\000" +
    "\002\055\004\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\063\003\000\002\063" +
    "\005\000\002\061\005\000\002\061\006\000\002\062\004" +
    "\000\002\021\004\000\002\022\003\000\002\022\005\000" +
    "\002\060\005\000\002\023\005\000\002\023\006\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\006" +
    "\003\000\002\006\004\000\002\007\003\000\002\007\004" +
    "\000\002\070\002\000\002\003\004\000\002\017\003\000" +
    "\002\017\004\000\002\047\003\000\002\047\003\000\002" +
    "\046\003\000\002\046\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\003\uff93\004\uff93\001\002\000\004\002" +
    "\320\001\002\000\006\003\010\004\007\001\002\000\010" +
    "\002\uff95\003\uff95\004\uff95\001\002\000\020\060\265\061" +
    "\272\062\271\063\267\064\270\065\266\072\274\001\002" +
    "\000\010\055\315\056\314\057\313\001\002\000\004\051" +
    "\302\001\002\000\012\002\uff97\003\uff97\004\uff97\055\016" +
    "\001\002\000\010\002\uff92\003\010\004\007\001\002\000" +
    "\010\002\uff94\003\uff94\004\uff94\001\002\000\010\002\uff96" +
    "\003\uff96\004\uff96\001\002\000\056\003\057\007\030\010" +
    "\025\011\041\012\042\013\027\014\032\024\055\025\076" +
    "\027\052\034\074\037\047\040\075\041\046\043\070\044" +
    "\056\047\060\050\022\051\062\056\036\070\043\071\066" +
    "\001\002\000\056\003\uffa6\007\uffa6\010\uffa6\011\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\024\uffa6\025\uffa6\027\uffa6\034\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\056\uffa6\070\uffa6\071\uffa6\001\002\000\046" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\045\uffd8" +
    "\046\uffd8\052\uffd8\054\uffd8\057\uffd8\067\uffd8\001\002\000" +
    "\056\003\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\014\uff91\024\uff91\025\uff91\027\uff91\034\uff91\037\uff91\040" +
    "\uff91\041\uff91\043\uff91\044\uff91\047\uff91\050\uff91\051\uff91" +
    "\056\uff91\070\uff91\071\uff91\001\002\000\020\060\265\061" +
    "\272\062\271\063\267\064\270\065\266\072\274\001\002" +
    "\000\056\003\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\024\uffa9\025\uffa9\027\uffa9\034\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\044\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\056\uffa9\070\uffa9\071\uffa9\001\002\000\046\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\045\uffca\046\uffca" +
    "\052\uffca\054\uffca\057\uffca\067\uffca\001\002\000\046\016" +
    "\000\017\000\020\000\021\000\022\000\023\000\026\000" +
    "\027\000\030\000\031\000\032\000\033\000\045\000\046" +
    "\000\052\000\054\000\057\000\067\000\001\002\000\056" +
    "\003\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\034\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\043\uffa7\044\uffa7\047\uffa7\050\uffa7\051\uffa7\056" +
    "\uffa7\070\uffa7\071\uffa7\001\002\000\046\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\045\ufffd\046\ufffd\052\ufffd" +
    "\054\ufffd\057\ufffd\067\ufffd\001\002\000\044\015\262\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\045\uffcb\046" +
    "\uffcb\051\106\053\105\001\002\000\036\016\132\017\131" +
    "\020\130\021\127\022\126\023\124\026\133\027\121\030" +
    "\116\031\135\032\134\033\122\045\120\046\123\001\002" +
    "\000\046\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\045\ufffc\046\ufffc\052\ufffc\054\ufffc\057\ufffc\067\ufffc\001" +
    "\002\000\046\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\045\uffd1\046\uffd1\052\uffd1\054\uffd1\057\uffd1\067\uffd1" +
    "\001\002\000\056\003\uffa8\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\024\uffa8\025\uffa8\027\uffa8\034\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\056\uffa8\070\uffa8\071\uffa8\001\002\000\056" +
    "\003\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\024\uffe1\025\uffe1\027\uffe1\034\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\043\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1\056" +
    "\uffe1\070\uffe1\071\uffe1\001\002\000\070\002\uffc0\003\uffc0" +
    "\004\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\024\uffc0\025\uffc0\027\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\056\uffc0\070\uffc0\071\uffc0\001\002" +
    "\000\046\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\045\uffd0\046\uffd0\052\uffd0\054\uffd0\057\uffd0\067\uffd0\001" +
    "\002\000\056\003\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\024\uffe4\025\uffe4\027\uffe4\034\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\056\uffe4\070\uffe4\071\uffe4\001\002\000\046\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\045\uffff\046" +
    "\uffff\052\uffff\054\uffff\057\uffff\067\uffff\001\002\000\046" +
    "\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\045\ufffe" +
    "\046\ufffe\052\ufffe\054\ufffe\057\ufffe\067\ufffe\001\002\000" +
    "\004\051\256\001\002\000\056\003\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\034\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\056\uffdc\070\uffdc\071\uffdc\001" +
    "\002\000\040\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\045\uffc9\046\uffc9\057\255\001\002\000\004\055\016" +
    "\001\002\000\004\051\210\001\002\000\046\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\045\uffc8\046\uffc8\052" +
    "\uffc8\054\uffc8\057\uffc8\067\uffc8\001\002\000\056\003\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0\070" +
    "\uffe0\071\uffe0\001\002\000\030\007\103\010\025\011\041" +
    "\012\042\013\027\014\032\024\055\025\076\027\052\047" +
    "\060\051\062\001\002\000\046\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\045\uffc6\046\uffc6\052\uffc6\054\uffc6" +
    "\057\uffc6\067\uffc6\001\002\000\056\003\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\024\uffde\025\uffde" +
    "\027\uffde\034\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044" +
    "\uffde\047\uffde\050\uffde\051\uffde\056\uffde\070\uffde\071\uffde" +
    "\001\002\000\030\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\024\uffd5\025\uffd5\027\uffd5\047\uffd5\051\uffd5" +
    "\001\002\000\004\057\206\001\002\000\004\057\205\001" +
    "\002\000\030\007\103\010\025\011\041\012\042\013\027" +
    "\014\032\024\055\025\076\027\052\047\060\051\062\001" +
    "\002\000\056\003\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\024\uffdf\025\uffdf\027\uffdf\034\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\056\uffdf\070\uffdf\071\uffdf\001\002\000\030\007" +
    "\103\010\025\011\041\012\042\013\027\014\032\024\055" +
    "\025\076\027\052\047\060\051\062\001\002\000\056\003" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\034\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3\056\uffe3" +
    "\070\uffe3\071\uffe3\001\002\000\056\003\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\024\uffe2\025\uffe2" +
    "\027\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\056\uffe2\070\uffe2\071\uffe2" +
    "\001\002\000\040\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\045\uffc7\046\uffc7\057\201\001\002\000\004\051" +
    "\175\001\002\000\056\003\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\024\uffdb\025\uffdb\027\uffdb\034" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\056\uffdb\070\uffdb\071\uffdb\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\046\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\045" +
    "\uffd9\046\uffd9\052\uffd9\054\uffd9\057\uffd9\067\uffd9\001\002" +
    "\000\030\007\103\010\025\011\041\012\042\013\027\014" +
    "\032\024\055\025\076\027\052\047\060\051\062\001\002" +
    "\000\056\003\057\007\030\010\025\011\041\012\042\013" +
    "\027\014\032\024\055\025\076\027\052\034\074\037\047" +
    "\040\075\041\046\043\070\044\056\047\060\050\022\051" +
    "\062\056\171\070\043\071\066\001\002\000\004\051\150" +
    "\001\002\000\004\051\100\001\002\000\030\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\024\uffd4\025\uffd4" +
    "\027\uffd4\047\uffd4\051\uffd4\001\002\000\056\003\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\024\uffdd" +
    "\025\uffdd\027\uffdd\034\uffdd\037\uffdd\040\uffdd\041\uffdd\043" +
    "\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd\056\uffdd\070\uffdd" +
    "\071\uffdd\001\002\000\030\007\103\010\025\011\041\012" +
    "\042\013\027\014\032\024\055\025\076\027\052\047\060" +
    "\051\062\001\002\000\046\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\045\uffc7\046\uffc7\052\uffc7\054\uffc7\057" +
    "\uffc7\067\uffc7\001\002\000\040\016\132\017\131\020\130" +
    "\021\127\022\126\023\124\026\133\027\121\030\116\031" +
    "\135\032\134\033\122\045\120\046\123\052\146\001\002" +
    "\000\052\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\045\uffcb\046\uffcb\051\106\052\uffcb\053\105\054\uffcb\057" +
    "\uffcb\067\uffcb\001\002\000\046\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\045\uffc9\046\uffc9\052\uffc9\054\uffc9" +
    "\057\uffc9\067\uffc9\001\002\000\030\007\103\010\025\011" +
    "\041\012\042\013\027\014\032\024\055\025\076\027\052" +
    "\047\060\051\062\001\002\000\032\007\103\010\025\011" +
    "\041\012\042\013\027\014\032\024\055\025\076\027\052" +
    "\047\060\051\062\052\107\001\002\000\046\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\045\uffa3\046\uffa3\052" +
    "\uffa3\054\uffa3\057\uffa3\067\uffa3\001\002\000\042\016\132" +
    "\017\131\020\130\021\127\022\126\023\124\026\133\027" +
    "\121\030\116\031\135\032\134\033\122\045\120\046\123" +
    "\052\uffa5\067\uffa5\001\002\000\006\052\112\067\113\001" +
    "\002\000\046\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\045\uffa2\046\uffa2\052\uffa2\054\uffa2\057\uffa2\067\uffa2" +
    "\001\002\000\030\007\103\010\025\011\041\012\042\013" +
    "\027\014\032\024\055\025\076\027\052\047\060\051\062" +
    "\001\002\000\042\016\132\017\131\020\130\021\127\022" +
    "\126\023\124\026\133\027\121\030\116\031\135\032\134" +
    "\033\122\045\120\046\123\052\uffa4\067\uffa4\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\030\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\024\uffe8\025\uffe8\027\uffe8\047\uffe8\051\uffe8\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\030\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\047\uffcf\051\uffcf\001\002\000" +
    "\030\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\024\uffea\025\uffea\027\uffea\047\uffea\051\uffea\001\002\000" +
    "\030\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\024\uffe5\025\uffe5\027\uffe5\047\uffe5\051\uffe5\001\002\000" +
    "\030\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\024\uffce\025\uffce\027\uffce\047\uffce\051\uffce\001\002\000" +
    "\030\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\047\uffeb\051\uffeb\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\030\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\024\uffec\025\uffec\027\uffec\047\uffec\051\uffec\001\002\000" +
    "\030\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\024\uffed\025\uffed\027\uffed\047\uffed\051\uffed\001\002\000" +
    "\030\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\024\uffee\025\uffee\027\uffee\047\uffee\051\uffee\001\002\000" +
    "\030\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef" +
    "\024\uffef\025\uffef\027\uffef\047\uffef\051\uffef\001\002\000" +
    "\030\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\047\ufff0\051\ufff0\001\002\000" +
    "\030\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\047\uffe9\051\uffe9\001\002\000" +
    "\030\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\047\uffe6\051\uffe6\001\002\000" +
    "\030\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\024\uffe7\025\uffe7\027\uffe7\047\uffe7\051\uffe7\001\002\000" +
    "\046\016\132\017\131\020\130\021\127\022\126\023\124" +
    "\026\133\027\121\030\116\031\135\032\134\033\122\045" +
    "\120\046\123\052\uffd2\054\uffd2\057\uffd2\067\uffd2\001\002" +
    "\000\046\016\132\017\131\020\130\021\127\022\126\023" +
    "\124\026\133\027\121\030\116\031\135\032\134\033\122" +
    "\045\120\046\123\052\uffcc\054\uffcc\057\uffcc\067\uffcc\001" +
    "\002\000\046\016\132\017\131\020\130\021\127\022\126" +
    "\023\124\026\133\027\121\030\116\031\135\032\134\033" +
    "\122\045\120\046\123\052\uffd6\054\uffd6\057\uffd6\067\uffd6" +
    "\001\002\000\040\016\132\017\131\020\130\021\127\022" +
    "\126\023\124\026\133\027\121\030\116\031\135\032\134" +
    "\033\122\045\120\046\123\054\142\001\002\000\050\015" +
    "\143\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\045" +
    "\uffb8\046\uffb8\052\uffb8\054\uffb8\057\uffb8\067\uffb8\001\002" +
    "\000\030\007\103\010\025\011\041\012\042\013\027\014" +
    "\032\024\055\025\076\027\052\047\060\051\062\001\002" +
    "\000\040\016\132\017\131\020\130\021\127\022\126\023" +
    "\124\026\133\027\121\030\116\031\135\032\134\033\122" +
    "\045\120\046\123\057\145\001\002\000\046\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\045\uffb7\046\uffb7\052" +
    "\uffb7\054\uffb7\057\uffb7\067\uffb7\001\002\000\004\055\016" +
    "\001\002\000\056\003\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\024\uffb6\025\uffb6\027\uffb6\034\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\056\uffb6\070\uffb6\071\uffb6\001\002\000\030" +
    "\007\103\010\025\011\041\012\042\013\027\014\032\024" +
    "\055\025\076\027\052\047\060\051\062\001\002\000\040" +
    "\016\132\017\131\020\130\021\127\022\126\023\124\026" +
    "\133\027\121\030\116\031\135\032\134\033\122\045\120" +
    "\046\123\052\152\001\002\000\004\055\016\001\002\000" +
    "\062\003\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\024\uffb1\025\uffb1\027\uffb1\034\uffb1\035\155\036" +
    "\154\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\056\uffb1\070\uffb1\071\uffb1\001\002\000" +
    "\004\055\016\001\002\000\004\051\163\001\002\000\062" +
    "\003\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\024\uffac\025\uffac\027\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\043\uffac\044\uffac\047\uffac\050" +
    "\uffac\051\uffac\056\uffac\070\uffac\071\uffac\001\002\000\062" +
    "\003\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\024\uffaf\025\uffaf\027\uffaf\034\uffaf\035\155\036\154" +
    "\037\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\056\uffaf\070\uffaf\071\uffaf\001\002\000\056" +
    "\003\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\024\uffb0\025\uffb0\027\uffb0\034\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\043\uffb0\044\uffb0\047\uffb0\050\uffb0\051\uffb0\056" +
    "\uffb0\070\uffb0\071\uffb0\001\002\000\062\003\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\024\uffab\025" +
    "\uffab\027\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\043\uffab\044\uffab\047\uffab\050\uffab\051\uffab\056" +
    "\uffab\070\uffab\071\uffab\001\002\000\056\003\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\024\uffae\025" +
    "\uffae\027\uffae\034\uffae\037\uffae\040\uffae\041\uffae\043\uffae" +
    "\044\uffae\047\uffae\050\uffae\051\uffae\056\uffae\070\uffae\071" +
    "\uffae\001\002\000\030\007\103\010\025\011\041\012\042" +
    "\013\027\014\032\024\055\025\076\027\052\047\060\051" +
    "\062\001\002\000\040\016\132\017\131\020\130\021\127" +
    "\022\126\023\124\026\133\027\121\030\116\031\135\032" +
    "\134\033\122\045\120\046\123\052\165\001\002\000\004" +
    "\055\016\001\002\000\062\003\uffad\007\uffad\010\uffad\011" +
    "\uffad\012\uffad\013\uffad\014\uffad\024\uffad\025\uffad\027\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\043" +
    "\uffad\044\uffad\047\uffad\050\uffad\051\uffad\056\uffad\070\uffad" +
    "\071\uffad\001\002\000\056\003\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\024\uffaa\025\uffaa\027\uffaa" +
    "\034\uffaa\037\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\056\uffaa\070\uffaa\071\uffaa\001\002" +
    "\000\056\003\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\024\uff90\025\uff90\027\uff90\034\uff90\037\uff90" +
    "\040\uff90\041\uff90\043\uff90\044\uff90\047\uff90\050\uff90\051" +
    "\uff90\056\uff90\070\uff90\071\uff90\001\002\000\070\002\uffbf" +
    "\003\uffbf\004\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\024\uffbf\025\uffbf\027\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\056\uffbf\070\uffbf\071\uffbf" +
    "\001\002\000\046\016\132\017\131\020\130\021\127\022" +
    "\126\023\124\026\133\027\121\030\116\031\135\032\134" +
    "\033\122\045\120\046\123\052\uffd3\054\uffd3\057\uffd3\067" +
    "\uffd3\001\002\000\040\016\132\017\131\020\130\021\127" +
    "\022\126\023\124\026\133\027\121\030\116\031\135\032" +
    "\134\033\122\045\120\046\123\057\174\001\002\000\056" +
    "\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\024\ufff2\025\ufff2\027\ufff2\034\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\043\ufff2\044\ufff2\047\ufff2\050\ufff2\051\ufff2\056" +
    "\ufff2\070\ufff2\071\ufff2\001\002\000\030\007\103\010\025" +
    "\011\041\012\042\013\027\014\032\024\055\025\076\027" +
    "\052\047\060\051\062\001\002\000\040\016\132\017\131" +
    "\020\130\021\127\022\126\023\124\026\133\027\121\030" +
    "\116\031\135\032\134\033\122\045\120\046\123\052\177" +
    "\001\002\000\004\057\200\001\002\000\056\003\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\024\ufffa" +
    "\025\ufffa\027\ufffa\034\ufffa\037\ufffa\040\ufffa\041\ufffa\043" +
    "\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\056\ufffa\070\ufffa" +
    "\071\ufffa\001\002\000\056\003\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\024\uffda\025\uffda\027\uffda" +
    "\034\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\047" +
    "\uffda\050\uffda\051\uffda\056\uffda\070\uffda\071\uffda\001\002" +
    "\000\040\016\132\017\131\020\130\021\127\022\126\023" +
    "\124\026\133\027\121\030\116\031\135\032\134\033\122" +
    "\045\120\046\123\052\203\001\002\000\046\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\031\uffc5\032\uffc5\033\uffc5\045\uffc5\046\uffc5\052" +
    "\uffc5\054\uffc5\057\uffc5\067\uffc5\001\002\000\046\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\045\uffcd\046\uffcd" +
    "\052\uffcd\054\uffcd\057\uffcd\067\uffcd\001\002\000\056\003" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\024\uffc2\025\uffc2\027\uffc2\034\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2\056\uffc2" +
    "\070\uffc2\071\uffc2\001\002\000\056\003\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\024\ufff1\025\ufff1" +
    "\027\ufff1\034\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\056\ufff1\070\ufff1\071\ufff1" +
    "\001\002\000\046\016\132\017\131\020\130\021\127\022" +
    "\126\023\124\026\uffd7\027\uffd7\030\116\031\135\032\134" +
    "\033\122\045\120\046\123\052\uffd7\054\uffd7\057\uffd7\067" +
    "\uffd7\001\002\000\010\007\211\050\212\061\213\001\002" +
    "\000\004\015\237\001\002\000\004\061\225\001\002\000" +
    "\004\007\214\001\002\000\004\015\215\001\002\000\004" +
    "\010\216\001\002\000\004\067\217\001\002\000\030\007" +
    "\103\010\025\011\041\012\042\013\027\014\032\024\055" +
    "\025\076\027\052\047\060\051\062\001\002\000\040\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\045\uffd8\046" +
    "\uffd8\067\221\001\002\000\006\024\055\025\076\001\002" +
    "\000\004\052\223\001\002\000\004\055\016\001\002\000" +
    "\056\003\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\024\uffb3\025\uffb3\027\uffb3\034\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\056\uffb3\070\uffb3\071\uffb3\001\002\000\004\007\226\001" +
    "\002\000\004\015\227\001\002\000\030\007\103\010\025" +
    "\011\041\012\042\013\027\014\032\024\055\025\076\027" +
    "\052\047\060\051\062\001\002\000\040\016\132\017\131" +
    "\020\130\021\127\022\126\023\124\026\133\027\121\030" +
    "\116\031\135\032\134\033\122\045\120\046\123\067\231" +
    "\001\002\000\030\007\103\010\025\011\041\012\042\013" +
    "\027\014\032\024\055\025\076\027\052\047\060\051\062" +
    "\001\002\000\040\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\045\uffd8\046\uffd8\067\233\001\002\000\006\024" +
    "\055\025\076\001\002\000\004\052\235\001\002\000\004" +
    "\055\016\001\002\000\056\003\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\024\uffb2\025\uffb2\027\uffb2" +
    "\034\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\056\uffb2\070\uffb2\071\uffb2\001\002" +
    "\000\004\010\240\001\002\000\004\067\241\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\040\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\045" +
    "\uffd8\046\uffd8\067\243\001\002\000\006\024\055\025\076" +
    "\001\002\000\004\052\245\001\002\000\004\055\016\001" +
    "\002\000\056\003\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\024\uffb4\025\uffb4\027\uffb4\034\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\044\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\056\uffb4\070\uffb4\071\uffb4\001\002\000\004\042" +
    "\250\001\002\000\004\051\251\001\002\000\030\007\103" +
    "\010\025\011\041\012\042\013\027\014\032\024\055\025" +
    "\076\027\052\047\060\051\062\001\002\000\040\016\132" +
    "\017\131\020\130\021\127\022\126\023\124\026\133\027" +
    "\121\030\116\031\135\032\134\033\122\045\120\046\123" +
    "\052\253\001\002\000\004\057\254\001\002\000\056\003" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\024\uffb5\025\uffb5\027\uffb5\034\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5\056\uffb5" +
    "\070\uffb5\071\uffb5\001\002\000\056\003\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\024\uffa1\025\uffa1" +
    "\027\uffa1\034\uffa1\037\uffa1\040\uffa1\041\uffa1\043\uffa1\044" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\056\uffa1\070\uffa1\071\uffa1" +
    "\001\002\000\030\007\103\010\025\011\041\012\042\013" +
    "\027\014\032\024\055\025\076\027\052\047\060\051\062" +
    "\001\002\000\040\016\132\017\131\020\130\021\127\022" +
    "\126\023\124\026\133\027\121\030\116\031\135\032\134" +
    "\033\122\045\120\046\123\052\260\001\002\000\004\057" +
    "\261\001\002\000\056\003\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\024\ufffb\025\ufffb\027\ufffb\034" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\056\ufffb\070\ufffb\071\ufffb\001\002\000" +
    "\030\007\103\010\025\011\041\012\042\013\027\014\032" +
    "\024\055\025\076\027\052\047\060\051\062\001\002\000" +
    "\040\016\132\017\131\020\130\021\127\022\126\023\124" +
    "\026\133\027\121\030\116\031\135\032\134\033\122\045" +
    "\120\046\123\057\264\001\002\000\056\003\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\024\uffc1\025" +
    "\uffc1\027\uffc1\034\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1" +
    "\044\uffc1\047\uffc1\050\uffc1\051\uffc1\056\uffc1\070\uffc1\071" +
    "\uffc1\001\002\000\004\007\ufff9\001\002\000\004\007\ufff4" +
    "\001\002\000\004\007\ufff6\001\002\000\004\007\ufff5\001" +
    "\002\000\004\007\ufff7\001\002\000\004\007\ufff8\001\002" +
    "\000\004\007\275\001\002\000\004\007\ufff3\001\002\000" +
    "\006\015\277\057\276\001\002\000\056\003\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\024\uffc4\025" +
    "\uffc4\027\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4" +
    "\044\uffc4\047\uffc4\050\uffc4\051\uffc4\056\uffc4\070\uffc4\071" +
    "\uffc4\001\002\000\030\007\103\010\025\011\041\012\042" +
    "\013\027\014\032\024\055\025\076\027\052\047\060\051" +
    "\062\001\002\000\040\016\132\017\131\020\130\021\127" +
    "\022\126\023\124\026\133\027\121\030\116\031\135\032" +
    "\134\033\122\045\120\046\123\057\301\001\002\000\056" +
    "\003\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\024\uffc3\025\uffc3\027\uffc3\034\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\043\uffc3\044\uffc3\047\uffc3\050\uffc3\051\uffc3\056" +
    "\uffc3\070\uffc3\071\uffc3\001\002\000\022\052\305\060\265" +
    "\061\272\062\271\063\267\064\270\065\266\072\274\001" +
    "\002\000\004\007\312\001\002\000\006\052\uff9f\067\uff9f" +
    "\001\002\000\012\002\uff9c\003\uff9c\004\uff9c\055\uff9c\001" +
    "\002\000\006\052\310\067\307\001\002\000\020\060\265" +
    "\061\272\062\271\063\267\064\270\065\266\072\274\001" +
    "\002\000\012\002\uff9b\003\uff9b\004\uff9b\055\uff9b\001\002" +
    "\000\006\052\uff9e\067\uff9e\001\002\000\006\052\uffa0\067" +
    "\uffa0\001\002\000\012\002\uff9a\003\uff9a\004\uff9a\055\uff9a" +
    "\001\002\000\012\002\uff99\003\uff99\004\uff99\055\uff99\001" +
    "\002\000\012\002\uff98\003\uff98\004\uff98\055\uff98\001\002" +
    "\000\004\007\317\001\002\000\004\051\uff9d\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\003\003\070\004\001\001\000\002\001" +
    "\001\000\012\006\005\007\012\023\011\060\010\001\001" +
    "\000\002\001\001\000\004\004\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\014\001\001\000\010" +
    "\006\013\023\011\060\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\002\020\005\023\010\034\011\076" +
    "\013\052\014\071\017\072\024\043\026\062\027\050\030" +
    "\053\031\064\032\070\033\017\034\032\035\036\036\030" +
    "\042\063\043\022\044\033\050\025\051\060\052\016\057" +
    "\037\061\044\062\066\064\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\116\025\124\056\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\023\013\052\014\071\031\100\032\070\033\017\034\032" +
    "\035\036\036\206\061\103\064\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\023\013\052\014\071\031" +
    "\100\032\070\033\017\034\032\035\036\036\203\061\103" +
    "\064\047\001\001\000\002\001\001\000\030\005\023\013" +
    "\052\014\071\031\100\032\070\033\017\034\032\035\036" +
    "\036\201\061\103\064\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\023\013\052\014\071\031\100\032" +
    "\070\033\017\034\032\035\036\036\172\061\103\064\047" +
    "\001\001\000\002\001\001\000\030\005\023\013\052\014" +
    "\071\031\100\032\070\033\017\034\032\035\036\036\171" +
    "\061\103\064\047\001\001\000\066\002\167\005\023\010" +
    "\034\011\076\013\052\014\071\024\043\026\062\027\050" +
    "\030\053\031\064\032\070\033\017\034\032\035\036\036" +
    "\030\042\063\043\022\044\033\050\025\051\060\052\016" +
    "\057\037\061\044\062\066\064\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\023\013\052\014\071\031\100\032\070\033" +
    "\017\034\032\035\036\036\101\061\103\064\047\001\001" +
    "\000\002\001\001\000\010\015\116\025\124\056\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\023" +
    "\013\052\014\071\031\100\032\070\033\017\034\032\035" +
    "\036\036\140\061\103\064\047\001\001\000\032\005\023" +
    "\013\052\014\071\031\100\032\070\033\017\034\032\035" +
    "\036\036\107\061\103\063\110\064\047\001\001\000\002" +
    "\001\001\000\010\015\116\025\124\056\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\023\013\052" +
    "\014\071\031\100\032\070\033\017\034\032\035\036\036" +
    "\113\061\103\064\047\001\001\000\010\015\116\025\124" +
    "\056\114\001\001\000\030\005\023\013\052\014\071\031" +
    "\100\032\070\033\017\034\032\035\036\036\137\061\103" +
    "\064\047\001\001\000\002\001\001\000\030\005\023\013" +
    "\052\014\071\031\100\032\070\033\017\034\032\035\036" +
    "\036\136\061\103\064\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\023\013\052\014\071\031\100\032" +
    "\070\033\017\034\032\035\036\036\135\061\103\064\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\116\025" +
    "\124\056\114\001\001\000\010\015\116\025\124\056\114" +
    "\001\001\000\010\015\116\025\124\056\114\001\001\000" +
    "\010\015\116\025\124\056\114\001\001\000\002\001\001" +
    "\000\030\005\023\013\052\014\071\031\100\032\070\033" +
    "\017\034\032\035\036\036\143\061\103\064\047\001\001" +
    "\000\010\015\116\025\124\056\114\001\001\000\002\001" +
    "\001\000\004\020\146\001\001\000\002\001\001\000\030" +
    "\005\023\013\052\014\071\031\100\032\070\033\017\034" +
    "\032\035\036\036\150\061\103\064\047\001\001\000\010" +
    "\015\116\025\124\056\114\001\001\000\004\020\152\001" +
    "\001\000\010\053\155\054\156\055\157\001\001\000\004" +
    "\020\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\053\160\055\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\023\013\052\014" +
    "\071\031\100\032\070\033\017\034\032\035\036\036\163" +
    "\061\103\064\047\001\001\000\010\015\116\025\124\056" +
    "\114\001\001\000\004\020\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\116\025\124\056\114\001\001\000\010\015\116" +
    "\025\124\056\114\001\001\000\002\001\001\000\030\005" +
    "\023\013\052\014\071\031\100\032\070\033\017\034\032" +
    "\035\036\036\175\061\103\064\047\001\001\000\010\015" +
    "\116\025\124\056\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\116\025\124\056" +
    "\114\001\001\000\002\001\001\000\010\015\116\025\124" +
    "\056\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\116\025\124\056\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\023\013\052\014\071\031\100\032\070\033\217\034" +
    "\032\035\036\036\030\061\103\064\047\001\001\000\002" +
    "\001\001\000\006\013\221\014\071\001\001\000\002\001" +
    "\001\000\004\020\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\023\013\052\014" +
    "\071\031\100\032\070\033\017\034\032\035\036\036\227" +
    "\061\103\064\047\001\001\000\010\015\116\025\124\056" +
    "\114\001\001\000\030\005\023\013\052\014\071\031\100" +
    "\032\070\033\231\034\032\035\036\036\030\061\103\064" +
    "\047\001\001\000\002\001\001\000\006\013\233\014\071" +
    "\001\001\000\002\001\001\000\004\020\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\023\013\052\014\071\031\100\032\070\033\241\034" +
    "\032\035\036\036\030\061\103\064\047\001\001\000\002" +
    "\001\001\000\006\013\243\014\071\001\001\000\002\001" +
    "\001\000\004\020\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\023\013\052\014" +
    "\071\031\100\032\070\033\017\034\032\035\036\036\251" +
    "\061\103\064\047\001\001\000\010\015\116\025\124\056" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\023\013\052\014\071\031\100\032" +
    "\070\033\017\034\032\035\036\036\256\061\103\064\047" +
    "\001\001\000\010\015\116\025\124\056\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\023\013\052" +
    "\014\071\031\100\032\070\033\017\034\032\035\036\036" +
    "\262\061\103\064\047\001\001\000\010\015\116\025\124" +
    "\056\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\023" +
    "\013\052\014\071\031\100\032\070\033\017\034\032\035" +
    "\036\036\277\061\103\064\047\001\001\000\010\015\116" +
    "\025\124\056\114\001\001\000\002\001\001\000\010\004" +
    "\302\021\303\022\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\302\021\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Manejo de errores
    public void syntax_error(Symbol cur_token) {
    System.err.println("Error sintáctico en la línea " + (cur_token.left+1) + 
                       ", columna " + (cur_token.right));
    }
    
    //Errores no recuperables
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.err.println("Se alcanzó el final del archivo.");
        } else {
            System.err.println("Error de sintaxis irrecuperable en la línea " + (cur_token.left + 1) + 
                            ", columna " + (cur_token.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){  
            System.out.println("\nLa tabla contiene estos valores: ");
            System.out.println("Tabla de simbolo: " + key);
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    // Agarra el tipo del token en la tabla de símbolos
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for(String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[2])){
                //System.out.println("Nombre variable:" + partesToken[2]  + " tipo: " + tipo);
                tipo = partesToken[3];
                
            }
        }
        return tipo;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= NAVIDAD EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literales_navidenios ::= l_COLACHO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // narraNavidad ::= NARRA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // escuchaNavidad ::= ESCUCHA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t_santas ::= SANTACLAUSULA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // envia ::= ENVIA operando FINREGALO 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = oper.toString().split(":");
                    // Se verifica si tipo de la variable
                        if((partesOperando[1].equals("null") || partesOperando[1].equals("string"))){
                           System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo de retorno de la función es nulo, revise si esa variable existe");
                                RESULT = "dir:null"; 
                        }else{ 
                            RESULT = "dir:"+ partesOperando[1];
                            //System.out.println("El tipo de retorno es: " + partesOperando[1]);
                         }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elfos ::= ELFO1 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elfos ::= ELFO2 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elfos ::= ELFO3 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elfos ::= ELFO4 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elfos ::= ELFO5 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elfos ::= ELFO6 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // poloNorte ::= creaRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // poloNorte ::= creaRegaloAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // poloNorte ::= estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // poloNorte ::= envia 
            {
              Object RESULT =null;
		int envleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object env = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = env.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // poloNorte ::= exprUni 
            {
              Object RESULT =null;
		int prUnileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prUniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prUni = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = prUni.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // poloNorte ::= llamadaNavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprUni ::= exprP FINREGALO 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = pr.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }
                else{
                    RESULT = "dir:null";
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprP ::= regaloprin 
            {
              Object RESULT =null;
		int prinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = prin.toString().split(":");
            if(!(partesOperando[1].equals("null"))){
                RESULT = "dir:"+ partesOperando[1];
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprP ::= exprRelLog 
            {
              Object RESULT =null;
		int prlogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prlogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prlog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            //System.out.println("prlog es: "+prlog);
            String[] partesOperando = prlog.toString().split(":");
            if(prlog != null || !(partesOperando[1].equals("null"))){
                RESULT = "dir:"+partesOperando[1];
            }
            else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // regaloprin ::= COMETA operando 
            {
              Object RESULT =null;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // regaloprin ::= operando renos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                if(partesOperando1[1].equals(partesOperando2[1])){
                    //System.out.println("Los operandos de esta operación en la línea" + (cur_token.left+1) + 
                      //  ", columna " + (cur_token.right) +":"+"son del mismo tipo");
                    RESULT = "dir:"+partesOperando1[1];
                }else{
                    System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // grinchYQuien ::= unidadNavidenia operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprRelAux ::= operando elfos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("Oper1 es:  "+ oper1);
            //System.out.println("Oper2 es:  "+ oper2);
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                // Permite expresiones relacionales (==, !=) del mismo tipo, mientras que sean int, float y bool
                if((elf.equals("==") || elf.equals("!="))){
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        System.out.println("Los tipos de los operadores == y != son los mismos");
                        if ((partesOperando1[1].equals("int")|| partesOperando1[1].equals("float")|| partesOperando1[1].equals("bool"))){
                            System.out.println("Los tipos int, float y bool son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos i-f-b: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
                // Permite expresiones relacionales (<, >, =>, =<) del mismo tipo, mientras que sean int y float
                else{
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        System.out.println("Los tipos del resto de operadores relacionales son los mismos");
                        if (partesOperando1[1].equals("int") || partesOperando1[1].equals("float")){
                            System.out.println("Los tipos int, float son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos i-f: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelAux",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprRelLog ::= exprRelAux 
            {
              Object RESULT =null;
		int relauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object relaux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("relaux es:" +relaux);
            if(relaux != null){
                RESULT = relaux;
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprRelLog ::= exprLogAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprLogAux ::= BALTASAR operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprLogAux ::= operando logisticadeNavidad operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operando ::= PERSONA 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<String> ts = listaTablaSimbolos.get(currentHash);
            String tipoId = getTipo(ts,per.toString());
            if(tipoId != "null"){
                RESULT = "dir:"+tipoId;
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operando ::= literales_navidenios 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = lst.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1]; 
            }else{
                RESULT = "dir:null";
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operando ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operando ::= accesoArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operando ::= exprP 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = pr.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operando ::= grinchYQuien 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operando ::= ABRECUENTO operando CIERRACUENTO 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // creaRegalo ::= POLO t_santas PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(!(tst.equals("null"))){
                            //System.out.println("Bien declarada la variable sin asignación");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) + " Mal declarada la variable sin asignación");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // creaRegaloAssign ::= POLO t_santas PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                    String[] partesOperando = oper1.toString().split(":");

                    // Se verifica si tipo de la variable
                        if(!(tst.equals("null"))){
                            //System.out.println("tipo de la variable permitido");
                            if(tst.equals(partesOperando[1])){
                                //System.out.println("La variable coincide con su asignación");
                                RESULT = "dir:"+ tst;
                            }
                            else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +":"  + " Tipo de la variable no coincide con su tipo de asignación");
                                RESULT = "dir:null";
                            }
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo de la variable vacía");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // creaRegaloAssign ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decl_G ::= PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cuerpo ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = reg.toString().split(":");
            if(!(partesOperando[1].equals("null"))){
                RESULT = "dir:"+ partesOperando[1];
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arrayDeclaration ::= POLO t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arrayDeclaration ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arrayInitialization ::= t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arrayInitialization ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listaExpresiones ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaExpresiones ::= listaExpresiones MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // whileStmt ::= ENVOLTURA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA operando MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // hadaStm ::= HADA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // hadaMulti ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // hadaMulti ::= hadaMulti hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estructura ::= whileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estructura ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // estructura ::= doWhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // estructura ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ids ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ids ::= ids MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // llamadaNavidenia ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llamadaNavidenia ::= PERSONA ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // llamadaNavideniaAux ::= llamadaNavidenia FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavideniaAux",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Meterlo a la tabla de símbolos
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        currentHash = per.toString();
                        String tipoTabla = "main";
                        if (per.toString().equals("main")){
                            tipoTabla = "tipo:main:"+tst.toString();
                        }else{
                            tipoTabla = "tipo:function:"+tst.toString();
                            ArrayList<String> funcionMain = new ArrayList<String>();
                            funcionMain.add(tipoTabla);
                            listaTablaSimbolos.put(currentHash, funcionMain);
                        }

                        // Se verifica si el valor de retorno es apropiado
                        if((tst.equals("int") || tst.equals("float") || tst.equals("char") || tst.equals("bool"))){
                            //System.out.println("tipo de la función permitida");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                             ", columna " + (cur_token.right) +": "  + "Este tipo de función no es permitido: "+ tst);
                             RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // definirFunNav ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // definirFunNav ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // definirFunNav ::= error ABREREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("es ayudafed: "+defin);
                //System.out.println("es cuerpo: "+ cuer);
                String[] partesOperando1 = defin.toString().split(":");
                String[] partesOperando2 = cuer.toString().split(":");
                if(!(partesOperando1[1].equals(partesOperando2[1]))){
                    System.out.println("Error Semántico: El retorno de la función no cumple con su tipo esperado de salida");
                }else{
                    System.out.println("La función y su retorno son del mismo tipo.");
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Empieza el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NAVIDAD ::= NT$0 pbolsanavideniaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                imprimirTablaSimbolos();
                System.out.println("Termina el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAVIDAD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // regalo ::= poloNorte 
            {
              Object RESULT =null;
		int poli1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (poli1 != null) {
                    //System.out.println("esto es poli1:" + poli1);
                    RESULT = poli1;
                } else {
                    //System.out.println("poli1 es null");
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poli2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("esto es regalo:" + reg);
                //System.out.println("esto es poli2:" + poli2);
                RESULT = poli2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
