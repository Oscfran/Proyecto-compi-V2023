
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\006\003\000\002\006\003\000" +
    "\002\017\003\000\002\017\003\000\002\044\003\000\002" +
    "\044\003\000\002\016\004\000\002\020\003\000\002\020" +
    "\003\000\002\021\005\000\002\021\004\000\002\013\007" +
    "\000\002\014\007\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\003\003\000\002\003\003\000\002\055" +
    "\005\000\002\027\004\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\033\005\000\002\053\003\000\002\053" +
    "\003\000\002\034\005\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\035\004\000\002\035\004\000\002" +
    "\035\005\000\002\035\005\000\002\035\003\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\062\006\000\002\036\006\000" +
    "\002\036\010\000\002\037\006\000\002\037\010\000\002" +
    "\041\006\000\002\041\010\000\002\040\006\000\002\040" +
    "\010\000\002\040\010\000\002\042\006\000\002\042\010" +
    "\000\002\042\010\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\023\005\000\002\045\007\000\002\045\007\000\002\045" +
    "\007\000\002\054\011\000\002\054\011\000\002\054\011" +
    "\000\002\046\015\000\002\046\015\000\002\046\015\000" +
    "\002\046\016\000\002\046\016\000\002\046\016\000\002" +
    "\046\017\000\002\046\017\000\002\046\017\000\002\056" +
    "\007\000\002\056\007\000\002\057\007\000\002\057\007" +
    "\000\002\060\004\000\002\024\004\000\002\024\003\000" +
    "\002\025\003\000\002\025\005\000\002\064\003\000\002" +
    "\064\005\000\002\063\006\000\002\063\007\000\002\026" +
    "\007\000\002\026\010\000\002\010\003\000\002\010\004" +
    "\000\002\012\003\000\002\012\004\000\002\011\003\000" +
    "\002\047\005\000\002\065\002\000\002\015\011\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\022\003\000\002\022\004\000\002\051" +
    "\003\000\002\051\003\000\002\050\003\000\002\050\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\004\007\uff8f\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\070\010\001\002\000\004\072\011\001\002\000" +
    "\004\055\012\001\002\000\004\056\013\001\002\000\004" +
    "\061\015\001\002\000\004\002\uff8e\001\002\000\052\007" +
    "\016\013\033\014\025\015\042\016\043\017\027\033\053" +
    "\040\066\041\031\042\035\043\052\044\070\045\051\047" +
    "\063\050\054\053\055\054\023\055\056\074\045\075\062" +
    "\001\002\000\016\064\u0111\065\u0116\066\u0115\067\u0113\070" +
    "\u0114\071\u0112\001\002\000\054\007\uff85\013\uff85\014\uff85" +
    "\015\uff85\016\uff85\017\uff85\033\uff85\040\uff85\041\uff85\042" +
    "\uff85\043\uff85\044\uff85\045\uff85\047\uff85\050\uff85\053\uff85" +
    "\054\uff85\055\uff85\062\uff85\074\uff85\075\uff85\001\002\000" +
    "\054\007\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\033\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\047\uffb6\050\uffb6\053\uffb6\054\uffb6\055\uffb6\062\uffb6" +
    "\074\uffb6\075\uffb6\001\002\000\054\007\uff7c\013\uff7c\014" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\033\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\044\uff7c\045\uff7c\047\uff7c\050\uff7c\053" +
    "\uff7c\054\uff7c\055\uff7c\062\uff7c\074\uff7c\075\uff7c\001\002" +
    "\000\054\007\uff88\013\uff88\014\uff88\015\uff88\016\uff88\017" +
    "\uff88\033\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\047\uff88\050\uff88\053\uff88\054\uff88\055\uff88\062" +
    "\uff88\074\uff88\075\uff88\001\002\000\014\064\357\065\362" +
    "\066\361\071\360\076\363\001\002\000\120\007\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\062\uffcc\063\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\120\007\000\013\000\014\000\015\000\016\000\017\000" +
    "\022\000\023\000\024\000\025\000\026\000\027\000\030" +
    "\000\031\000\032\000\033\000\034\000\035\000\036\000" +
    "\037\000\040\000\041\000\042\000\043\000\044\000\045" +
    "\000\047\000\050\000\051\000\052\000\053\000\054\000" +
    "\055\000\056\000\062\000\063\000\073\000\074\000\075" +
    "\000\001\002\000\054\007\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\033\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\062\uffb7\074\uffb7\075\uffb7\001\002\000\120\007" +
    "\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\062\ufffd\063\ufffd\073\ufffd\074\ufffd\075\ufffd\001" +
    "\002\000\054\007\uff86\013\uff86\014\uff86\015\uff86\016\uff86" +
    "\017\uff86\033\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\047\uff86\050\uff86\053\uff86\054\uff86\055\uff86" +
    "\062\uff86\074\uff86\075\uff86\001\002\000\004\055\350\001" +
    "\002\000\054\007\uff84\013\uff84\014\uff84\015\uff84\016\uff84" +
    "\017\uff84\033\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044" +
    "\uff84\045\uff84\047\uff84\050\uff84\053\uff84\054\uff84\055\uff84" +
    "\062\uff84\074\uff84\075\uff84\001\002\000\116\007\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021\335\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\062\uffc7\063\336\074\uffc7\075\uffc7\001\002\000\054\007" +
    "\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87\033\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\047" +
    "\uff87\050\uff87\053\uff87\054\uff87\055\uff87\062\uff87\074\uff87" +
    "\075\uff87\001\002\000\004\061\110\001\002\000\054\007" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\033\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\047" +
    "\uff7b\050\uff7b\053\uff7b\054\uff7b\055\uff7b\062\uff7b\074\uff7b" +
    "\075\uff7b\001\002\000\054\007\uff8d\013\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\017\uff8d\033\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\047\uff8d\050\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\062\uff8d\074\uff8d\075\uff8d\001\002\000\054" +
    "\007\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\033" +
    "\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83" +
    "\047\uff83\050\uff83\053\uff83\054\uff83\055\uff83\062\uff83\074" +
    "\uff83\075\uff83\001\002\000\054\007\uff82\013\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\033\uff82\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\047\uff82\050\uff82\053\uff82" +
    "\054\uff82\055\uff82\062\uff82\074\uff82\075\uff82\001\002\000" +
    "\120\007\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030" +
    "\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\062\uffff\063\uffff\073\uffff\074\uffff\075" +
    "\uffff\001\002\000\120\007\ufffe\013\ufffe\014\ufffe\015\ufffe" +
    "\016\ufffe\017\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\062\ufffe\063\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\001\002\000\054\007\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\033\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\062\uffb9\074\uffb9\075\uffb9\001" +
    "\002\000\004\055\330\001\002\000\054\007\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\033\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\047\uff8c\050\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\062\uff8c\074\uff8c\075\uff8c\001" +
    "\002\000\054\007\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\017\uffb5\033\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\047\uffb5\050\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\062\uffb5\074\uffb5\075\uffb5\001\002\000\054\007\uff81\013" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\033\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\047\uff81\050" +
    "\uff81\053\uff81\054\uff81\055\uff81\062\uff81\074\uff81\075\uff81" +
    "\001\002\000\004\061\110\001\002\000\004\055\213\001" +
    "\002\000\022\013\171\014\025\015\042\016\043\017\027" +
    "\033\053\053\055\055\056\001\002\000\004\063\211\001" +
    "\002\000\022\013\171\014\025\015\042\016\043\017\027" +
    "\033\053\053\055\055\056\001\002\000\022\013\171\014" +
    "\025\015\042\016\043\017\027\033\053\053\055\055\056" +
    "\001\002\000\056\007\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\033\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\047\uff95\050\uff95\053\uff95\054\uff95\055" +
    "\uff95\061\110\062\uff95\074\uff95\075\uff95\001\002\000\054" +
    "\007\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\033" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\047\uff8b\050\uff8b\053\uff8b\054\uff8b\055\uff8b\062\uff8b\074" +
    "\uff8b\075\uff8b\001\002\000\054\007\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\017\uff89\033\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050\uff89\053\uff89" +
    "\054\uff89\055\uff89\062\uff89\074\uff89\075\uff89\001\002\000" +
    "\004\055\201\001\002\000\022\013\171\014\025\015\042" +
    "\016\043\017\027\033\053\053\055\055\056\001\002\000" +
    "\112\007\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\022\134\023\133\024\116\025\115\026\121\027\120\030" +
    "\170\031\165\032\162\033\153\034\161\035\164\036\166" +
    "\037\163\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\047\uff8a\050\uff8a\051\160\052\154\053\uff8a\054\uff8a" +
    "\055\uff8a\062\uff8a\074\uff8a\075\uff8a\001\002\000\054\007" +
    "\016\013\033\014\025\015\042\016\043\017\027\033\053" +
    "\040\066\041\031\042\035\043\052\044\070\045\051\047" +
    "\063\050\054\053\055\054\023\055\056\062\151\074\045" +
    "\075\062\001\002\000\004\055\140\001\002\000\054\007" +
    "\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\017\uff7d\033\uff7d" +
    "\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\047" +
    "\uff7d\050\uff7d\053\uff7d\054\uff7d\055\uff7d\062\uff7d\074\uff7d" +
    "\075\uff7d\001\002\000\004\055\073\001\002\000\054\007" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\033\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047" +
    "\uffb8\050\uffb8\053\uffb8\054\uffb8\055\uffb8\062\uffb8\074\uffb8" +
    "\075\uffb8\001\002\000\054\007\uff80\013\uff80\014\uff80\015" +
    "\uff80\016\uff80\017\uff80\033\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\053\uff80\054" +
    "\uff80\055\uff80\062\uff80\074\uff80\075\uff80\001\002\000\014" +
    "\013\075\014\100\015\077\016\043\017\105\001\002\000" +
    "\006\022\134\023\133\001\002\000\016\022\uffd8\023\uffd8" +
    "\024\uffdc\025\uffdc\026\uffdc\027\uffdc\001\002\000\004\056" +
    "\131\001\002\000\020\022\uffff\023\uffff\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\056\127\001\002\000\016\022\000\023" +
    "\000\024\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002\000\016" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\056\uffdd\073\uffdd\001" +
    "\002\000\012\024\116\025\115\026\121\027\120\001\002" +
    "\000\004\056\106\001\002\000\012\022\uffd9\023\uffd9\056" +
    "\uffd9\073\uffd9\001\002\000\016\022\ufffd\023\ufffd\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\001\002\000\004\061\110\001" +
    "\002\000\054\007\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\033\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\047\uffb3\050\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\062\uffb3\074\uffb3\075\uffb3\001\002\000\050\013\033\014" +
    "\025\015\042\016\043\017\027\033\053\040\066\041\031" +
    "\042\035\043\052\044\070\045\051\047\063\050\054\053" +
    "\055\054\023\055\056\074\045\075\062\001\002\000\052" +
    "\013\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\033\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\047\uff7f" +
    "\050\uff7f\053\uff7f\054\uff7f\055\uff7f\062\uff7f\074\uff7f\075" +
    "\uff7f\001\002\000\052\013\033\014\025\015\042\016\043" +
    "\017\027\033\053\040\066\041\031\042\035\043\052\044" +
    "\070\045\051\047\063\050\054\053\055\054\023\055\056" +
    "\062\114\074\045\075\062\001\002\000\052\013\uff7e\014" +
    "\uff7e\015\uff7e\016\uff7e\017\uff7e\033\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050\uff7e\053" +
    "\uff7e\054\uff7e\055\uff7e\062\uff7e\074\uff7e\075\uff7e\001\002" +
    "\000\056\007\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\033\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\062\uffb4\074\uffb4\075\uffb4\001\002\000\022\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\033\uffe0\053\uffe0\055" +
    "\uffe0\001\002\000\022\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\033\uffe1\053\uffe1\055\uffe1\001\002\000\012\013" +
    "\122\014\126\015\123\017\125\001\002\000\022\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\033\uffde\053\uffde\055" +
    "\uffde\001\002\000\022\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\033\uffdf\053\uffdf\055\uffdf\001\002\000\006\056" +
    "\uffdc\073\uffdc\001\002\000\006\056\uffdb\073\uffdb\001\002" +
    "\000\006\056\uffda\073\uffda\001\002\000\006\056\ufffb\073" +
    "\ufffb\001\002\000\006\056\ufffc\073\ufffc\001\002\000\004" +
    "\061\110\001\002\000\054\007\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\033\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\062\uffb1\074\uffb1\075\uffb1\001\002\000\004" +
    "\061\110\001\002\000\054\007\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\033\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\062\uffb2\074\uffb2\075\uffb2\001\002\000\022" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\033\uffe2\053" +
    "\uffe2\055\uffe2\001\002\000\022\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\033\uffe3\053\uffe3\055\uffe3\001\002\000" +
    "\014\013\136\014\025\015\042\016\043\017\027\001\002" +
    "\000\006\056\uffd8\073\uffd8\001\002\000\006\056\uffd7\073" +
    "\uffd7\001\002\000\014\013\075\014\100\015\142\016\043" +
    "\017\105\001\002\000\004\056\146\001\002\000\016\022" +
    "\uffff\023\uffff\024\uffdb\025\uffdb\026\uffdb\027\uffdb\001\002" +
    "\000\004\056\144\001\002\000\004\061\110\001\002\000" +
    "\054\007\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\033\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\047\uffa4\050\uffa4\053\uffa4\054\uffa4\055\uffa4\062\uffa4" +
    "\074\uffa4\075\uffa4\001\002\000\004\061\110\001\002\000" +
    "\054\007\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\033\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\047\uffa3\050\uffa3\053\uffa3\054\uffa3\055\uffa3\062\uffa3" +
    "\074\uffa3\075\uffa3\001\002\000\054\007\uff7a\013\uff7a\014" +
    "\uff7a\015\uff7a\016\uff7a\017\uff7a\033\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\044\uff7a\045\uff7a\047\uff7a\050\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\062\uff7a\074\uff7a\075\uff7a\001\002" +
    "\000\004\002\uff90\001\002\000\022\013\171\014\025\015" +
    "\042\016\043\017\027\033\053\053\055\055\056\001\002" +
    "\000\022\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\033" +
    "\uffd6\053\uffd6\055\uffd6\001\002\000\022\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\033\ufff2\053\ufff2\055\ufff2\001" +
    "\002\000\022\013\171\014\025\015\042\016\043\017\027" +
    "\033\053\053\055\055\056\001\002\000\022\013\171\014" +
    "\025\015\042\016\043\017\027\033\053\053\055\055\056" +
    "\001\002\000\022\013\171\014\025\015\042\016\043\017" +
    "\027\033\053\053\055\055\056\001\002\000\022\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\033\ufff3\053\ufff3\055" +
    "\ufff3\001\002\000\022\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\033\uffd4\053\uffd4\055\uffd4\001\002\000\022\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\033\uffd5\053\uffd5" +
    "\055\uffd5\001\002\000\022\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\033\uffd1\053\uffd1\055\uffd1\001\002\000\022" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\033\uffd3\053" +
    "\uffd3\055\uffd3\001\002\000\022\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\033\ufff7\053\ufff7\055\ufff7\001\002\000" +
    "\022\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\033\uffd2" +
    "\053\uffd2\055\uffd2\001\002\000\022\013\171\014\025\015" +
    "\042\016\043\017\027\033\053\053\055\055\056\001\002" +
    "\000\022\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\033" +
    "\ufff8\053\ufff8\055\ufff8\001\002\000\120\007\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\062" +
    "\uffc7\063\uffc7\073\uffc7\074\uffc7\075\uffc7\001\002\000\120" +
    "\007\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\022" +
    "\134\023\133\024\116\025\115\026\121\027\120\030\170" +
    "\031\165\032\162\033\153\034\161\035\164\036\166\037" +
    "\163\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\047\uffc9\050\uffc9\051\160\052\154\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\062\uffc9\063\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\001\002\000\120\007\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\022\134\023\133\024\116\025\115\026\121" +
    "\027\120\030\170\031\165\032\162\033\153\034\161\035" +
    "\164\036\166\037\163\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\047\uffce\050\uffce\051\160\052\154\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\062\uffce\063\uffce\073\uffce" +
    "\074\uffce\075\uffce\001\002\000\120\007\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\022\134\023\133\024\116" +
    "\025\115\026\121\027\120\030\170\031\165\032\162\033" +
    "\153\034\161\035\164\036\166\037\163\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca\050\uffca\051" +
    "\160\052\154\053\uffca\054\uffca\055\uffca\056\uffca\062\uffca" +
    "\063\uffca\073\uffca\074\uffca\075\uffca\001\002\000\120\007" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\022\134" +
    "\023\133\024\116\025\115\026\121\027\120\030\170\031" +
    "\165\032\162\033\153\034\161\035\164\036\166\037\163" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047" +
    "\uffcb\050\uffcb\051\160\052\154\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\062\uffcb\063\uffcb\073\uffcb\074\uffcb\075\uffcb\001" +
    "\002\000\120\007\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\022\134\023\133\024\116\025\115\026\121\027" +
    "\120\030\170\031\165\032\162\033\153\034\161\035\164" +
    "\036\166\037\163\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\047\uffc8\050\uffc8\051\160\052\154\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\062\uffc8\063\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\001\002\000\044\022\134\023\133\024\116" +
    "\025\115\026\121\027\120\030\170\031\165\032\162\033" +
    "\153\034\161\035\164\036\166\037\163\051\160\052\154" +
    "\063\200\001\002\000\054\007\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\033\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\062\uffe5\074\uffe5\075\uffe5\001\002\000\022" +
    "\013\171\014\025\015\042\016\043\017\027\033\053\053" +
    "\055\055\056\001\002\000\044\022\134\023\133\024\116" +
    "\025\115\026\121\027\120\030\170\031\165\032\162\033" +
    "\153\034\161\035\164\036\166\037\163\051\160\052\154" +
    "\056\203\001\002\000\004\063\204\001\002\000\054\007" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\033\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\047" +
    "\uffee\050\uffee\053\uffee\054\uffee\055\uffee\062\uffee\074\uffee" +
    "\075\uffee\001\002\000\054\007\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\033\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\047\uff94\050\uff94\053\uff94\054" +
    "\uff94\055\uff94\062\uff94\074\uff94\075\uff94\001\002\000\044" +
    "\022\134\023\133\024\116\025\115\026\121\027\120\030" +
    "\170\031\165\032\162\033\153\034\161\035\164\036\166" +
    "\037\163\051\160\052\154\056\207\001\002\000\120\007" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\062\uffcd\063\uffcd\073\uffcd\074\uffcd\075\uffcd\001" +
    "\002\000\120\007\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\062\uffcf\063\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\001\002\000\054\007\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\033\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\062\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\120\007\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\022\134\023\133\024\116\025\115\026\121\027\120\030" +
    "\170\031\165\032\uffd0\033\uffd0\034\161\035\164\036\166" +
    "\037\163\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\047\uffd0\050\uffd0\051\160\052\154\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\062\uffd0\063\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\010\013\214\054\215\065\216\001\002" +
    "\000\004\021\272\001\002\000\004\065\246\001\002\000" +
    "\004\013\217\001\002\000\004\021\220\001\002\000\004" +
    "\014\221\001\002\000\004\073\222\001\002\000\014\013" +
    "\075\014\100\015\224\016\043\017\105\001\002\000\004" +
    "\073\242\001\002\000\020\022\uffff\023\uffff\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\073\236\001\002\000\004\073\226" +
    "\001\002\000\006\030\170\031\165\001\002\000\014\013" +
    "\233\014\025\015\042\016\043\017\027\001\002\000\004" +
    "\056\231\001\002\000\004\061\110\001\002\000\054\007" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\033\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\053\uffaa\054\uffaa\055\uffaa\062\uffaa\074\uffaa" +
    "\075\uffaa\001\002\000\004\056\ufff5\001\002\000\004\056" +
    "\ufff6\001\002\000\004\056\ufff4\001\002\000\006\030\170" +
    "\031\165\001\002\000\004\056\240\001\002\000\004\061" +
    "\110\001\002\000\054\007\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\033\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\062\uffa8\074\uffa8\075\uffa8\001\002\000\006\030" +
    "\170\031\165\001\002\000\004\056\244\001\002\000\004" +
    "\061\110\001\002\000\054\007\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\033\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\062\uffa9\074\uffa9\075\uffa9\001\002\000\004" +
    "\013\247\001\002\000\004\021\250\001\002\000\022\013" +
    "\171\014\025\015\042\016\043\017\027\033\053\053\055" +
    "\055\056\001\002\000\044\022\134\023\133\024\116\025" +
    "\115\026\121\027\120\030\170\031\165\032\162\033\153" +
    "\034\161\035\164\036\166\037\163\051\160\052\154\073" +
    "\252\001\002\000\014\013\075\014\100\015\254\016\043" +
    "\017\105\001\002\000\004\073\266\001\002\000\020\022" +
    "\uffff\023\uffff\024\uffdb\025\uffdb\026\uffdb\027\uffdb\073\262" +
    "\001\002\000\004\073\256\001\002\000\006\030\170\031" +
    "\165\001\002\000\004\056\260\001\002\000\004\061\110" +
    "\001\002\000\054\007\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\033\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\047\uffa7\050\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\062\uffa7\074\uffa7\075\uffa7\001\002\000\006\030\170" +
    "\031\165\001\002\000\004\056\264\001\002\000\004\061" +
    "\110\001\002\000\054\007\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\033\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5\053\uffa5\054\uffa5" +
    "\055\uffa5\062\uffa5\074\uffa5\075\uffa5\001\002\000\006\030" +
    "\170\031\165\001\002\000\004\056\270\001\002\000\004" +
    "\061\110\001\002\000\054\007\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\033\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\047\uffa6\050\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\062\uffa6\074\uffa6\075\uffa6\001\002\000\004" +
    "\014\273\001\002\000\004\073\274\001\002\000\014\013" +
    "\075\014\100\015\276\016\043\017\105\001\002\000\004" +
    "\073\310\001\002\000\020\022\uffff\023\uffff\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\073\304\001\002\000\004\073\300" +
    "\001\002\000\006\030\170\031\165\001\002\000\004\056" +
    "\302\001\002\000\004\061\110\001\002\000\054\007\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\033\uffad\040" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad" +
    "\050\uffad\053\uffad\054\uffad\055\uffad\062\uffad\074\uffad\075" +
    "\uffad\001\002\000\006\030\170\031\165\001\002\000\004" +
    "\056\306\001\002\000\004\061\110\001\002\000\054\007" +
    "\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab\033\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\047" +
    "\uffab\050\uffab\053\uffab\054\uffab\055\uffab\062\uffab\074\uffab" +
    "\075\uffab\001\002\000\006\030\170\031\165\001\002\000" +
    "\004\056\312\001\002\000\004\061\110\001\002\000\054" +
    "\007\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\033" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\047\uffac\050\uffac\053\uffac\054\uffac\055\uffac\062\uffac\074" +
    "\uffac\075\uffac\001\002\000\004\046\315\001\002\000\004" +
    "\055\316\001\002\000\014\013\075\014\100\015\320\016" +
    "\043\017\105\001\002\000\004\056\326\001\002\000\020" +
    "\022\uffff\023\uffff\024\uffdb\025\uffdb\026\uffdb\027\uffdb\056" +
    "\324\001\002\000\004\056\322\001\002\000\004\063\323" +
    "\001\002\000\054\007\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\033\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\050\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\062\uffb0\074\uffb0\075\uffb0\001\002\000\004\063\325" +
    "\001\002\000\054\007\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\033\uffae\040\uffae\041\uffae\042\uffae\043\uffae" +
    "\044\uffae\045\uffae\047\uffae\050\uffae\053\uffae\054\uffae\055" +
    "\uffae\062\uffae\074\uffae\075\uffae\001\002\000\004\063\327" +
    "\001\002\000\054\007\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\033\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\047\uffaf\050\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\062\uffaf\074\uffaf\075\uffaf\001\002\000\022\013\171" +
    "\014\025\015\042\016\043\017\027\033\053\053\055\055" +
    "\056\001\002\000\044\022\134\023\133\024\116\025\115" +
    "\026\121\027\120\030\170\031\165\032\162\033\153\034" +
    "\161\035\164\036\166\037\163\051\160\052\154\056\332" +
    "\001\002\000\004\063\333\001\002\000\054\007\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\033\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef\050" +
    "\uffef\053\uffef\054\uffef\055\uffef\062\uffef\074\uffef\075\uffef" +
    "\001\002\000\054\007\uffa0\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\033\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\047\uffa0\050\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\062\uffa0\074\uffa0\075\uffa0\001\002\000\022\013\171" +
    "\014\025\015\042\016\043\017\027\033\053\053\055\055" +
    "\056\001\002\000\004\055\337\001\002\000\006\013\340" +
    "\056\341\001\002\000\006\056\uff9b\073\uff9b\001\002\000" +
    "\054\007\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99" +
    "\033\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\047\uff99\050\uff99\053\uff99\054\uff99\055\uff99\062\uff99" +
    "\074\uff99\075\uff99\001\002\000\006\056\344\073\343\001" +
    "\002\000\004\013\345\001\002\000\054\007\uff98\013\uff98" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\033\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\047\uff98\050\uff98" +
    "\053\uff98\054\uff98\055\uff98\062\uff98\074\uff98\075\uff98\001" +
    "\002\000\006\056\uff9a\073\uff9a\001\002\000\044\022\134" +
    "\023\133\024\116\025\115\026\121\027\120\030\170\031" +
    "\165\032\162\033\153\034\161\035\164\036\166\037\163" +
    "\051\160\052\154\063\347\001\002\000\054\007\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\033\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\062\uffc6\074\uffc6\075\uffc6" +
    "\001\002\000\014\013\075\014\100\015\142\016\043\017" +
    "\105\001\002\000\004\056\355\001\002\000\004\056\353" +
    "\001\002\000\004\061\110\001\002\000\054\007\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\033\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\047\uffa2\050" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\062\uffa2\074\uffa2\075\uffa2" +
    "\001\002\000\004\061\110\001\002\000\054\007\uffa1\013" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\033\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\047\uffa1\050" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\062\uffa1\074\uffa1\075\uffa1" +
    "\001\002\000\004\013\u010a\001\002\000\004\013\u0103\001" +
    "\002\000\004\013\376\001\002\000\004\013\371\001\002" +
    "\000\004\013\364\001\002\000\006\021\366\063\365\001" +
    "\002\000\054\007\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\033\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\047\uffc1\050\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\062\uffc1\074\uffc1\075\uffc1\001\002\000\022\013\171\014" +
    "\025\015\042\016\043\017\027\033\053\053\055\055\056" +
    "\001\002\000\044\022\134\023\133\024\116\025\115\026" +
    "\121\027\120\030\170\031\165\032\162\033\153\034\161" +
    "\035\164\036\166\037\163\051\160\052\154\063\370\001" +
    "\002\000\054\007\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\033\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\047\uffc0\050\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\062\uffc0\074\uffc0\075\uffc0\001\002\000\006\021\373\063" +
    "\372\001\002\000\054\007\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\033\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\062\uffc5\074\uffc5\075\uffc5\001\002\000\022\013" +
    "\171\014\025\015\042\016\043\017\027\033\053\053\055" +
    "\055\056\001\002\000\044\022\134\023\133\024\116\025" +
    "\115\026\121\027\120\030\170\031\165\032\162\033\153" +
    "\034\161\035\164\036\166\037\163\051\160\052\154\063" +
    "\375\001\002\000\054\007\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\033\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\062\uffc4\074\uffc4\075\uffc4\001\002\000\006\021" +
    "\377\063\u0100\001\002\000\022\013\171\014\025\015\042" +
    "\016\043\017\027\033\053\053\055\055\056\001\002\000" +
    "\054\007\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\055\uffc3\062\uffc3" +
    "\074\uffc3\075\uffc3\001\002\000\044\022\134\023\133\024" +
    "\116\025\115\026\121\027\120\030\170\031\165\032\162" +
    "\033\153\034\161\035\164\036\166\037\163\051\160\052" +
    "\154\063\u0102\001\002\000\054\007\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\033\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\062\uffc2\074\uffc2\075\uffc2\001\002\000" +
    "\006\021\u0105\063\u0104\001\002\000\054\007\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\033\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\062\uffbc\074\uffbc\075\uffbc\001" +
    "\002\000\006\013\u0106\016\u0107\001\002\000\004\063\u0109" +
    "\001\002\000\004\063\u0108\001\002\000\054\007\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\033\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\062\uffbb\074\uffbb\075\uffbb" +
    "\001\002\000\054\007\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\033\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\047\uffba\050\uffba\053\uffba\054\uffba\055" +
    "\uffba\062\uffba\074\uffba\075\uffba\001\002\000\006\021\u010c" +
    "\063\u010b\001\002\000\054\007\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\062\uffbf\074\uffbf\075\uffbf\001\002\000\006" +
    "\013\u010d\016\u010e\001\002\000\004\063\u0110\001\002\000" +
    "\004\063\u010f\001\002\000\054\007\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\033\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe\050\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\062\uffbe\074\uffbe\075\uffbe\001\002\000" +
    "\054\007\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\033\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\053\uffbd\054\uffbd\055\uffbd\062\uffbd" +
    "\074\uffbd\075\uffbd\001\002\000\004\013\uffed\001\002\000" +
    "\004\013\uffe8\001\002\000\004\013\uffea\001\002\000\004" +
    "\013\uffe9\001\002\000\004\013\uffeb\001\002\000\004\013" +
    "\uffec\001\002\000\004\013\u0118\001\002\000\004\055\u0119" +
    "\001\002\000\022\013\u011a\056\u011d\064\u0111\065\u0116\066" +
    "\u0115\067\u0113\070\u0114\071\u0112\001\002\000\006\056\uff9e" +
    "\073\uff9e\001\002\000\004\013\u0122\001\002\000\006\056" +
    "\uff9d\073\uff9d\001\002\000\056\007\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\033\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\047\uff97\050\uff97\053\uff97" +
    "\054\uff97\055\uff97\061\uff97\062\uff97\074\uff97\075\uff97\001" +
    "\002\000\006\056\u011f\073\u0120\001\002\000\056\007\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\033\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047\uff96" +
    "\050\uff96\053\uff96\054\uff96\055\uff96\061\uff96\062\uff96\074" +
    "\uff96\075\uff96\001\002\000\020\013\u011a\064\u0111\065\u0116" +
    "\066\u0115\067\u0113\070\u0114\071\u0112\001\002\000\006\056" +
    "\uff9c\073\uff9c\001\002\000\006\056\uff9f\073\uff9f\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\006\015\004\065\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\013\001\001\000\002\001\001\000\064\002\020" +
    "\005\023\010\066\013\036\014\071\026\056\027\045\035" +
    "\063\036\043\037\070\040\025\041\017\042\046\043\060" +
    "\045\021\046\033\050\064\051\035\054\027\055\057\056" +
    "\016\057\031\060\037\062\040\063\047\001\001\000\004" +
    "\004\u0116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\313\001\001\000" +
    "\002\001\001\000\006\005\023\035\211\001\001\000\002" +
    "\001\001\000\006\005\023\035\207\001\001\000\006\005" +
    "\023\035\205\001\001\000\004\023\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\023\035\176\001\001\000\014\017\155\020\154\031\166" +
    "\032\151\061\156\001\001\000\062\002\020\005\023\010" +
    "\066\013\036\014\071\026\056\027\045\035\063\036\043" +
    "\037\070\040\025\041\017\042\046\043\060\045\021\046" +
    "\033\051\147\054\027\055\057\056\016\057\031\060\037" +
    "\062\040\063\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\103\007\100\033\102\034\075\052\101\053" +
    "\073\001\001\000\004\031\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\106\001" +
    "\001\000\002\001\001\000\056\002\110\005\023\013\036" +
    "\014\071\022\111\027\045\035\063\036\043\037\070\040" +
    "\025\041\017\042\046\043\060\045\021\046\033\054\027" +
    "\055\057\056\016\057\031\060\037\062\040\063\047\001" +
    "\001\000\002\001\001\000\054\002\112\005\023\013\036" +
    "\014\071\027\045\035\063\036\043\037\070\040\025\041" +
    "\017\042\046\043\060\045\021\046\033\054\027\055\057" +
    "\056\016\057\031\060\037\062\040\063\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\100\052\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\127\001\001\000\002\001\001\000\004\023\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\103\053\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\103\007\100\033\142\034" +
    "\140\052\101\053\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\144\001\001\000" +
    "\002\001\001\000\004\023\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\023\035" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\023\035\174\001\001\000\006\005\023\035\173\001" +
    "\001\000\006\005\023\035\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\023\035\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\155\020\154\031\166\032\151\061\156" +
    "\001\001\000\014\017\155\020\154\031\166\032\151\061" +
    "\156\001\001\000\014\017\155\020\154\031\166\032\151" +
    "\061\156\001\001\000\014\017\155\020\154\031\166\032" +
    "\151\061\156\001\001\000\014\017\155\020\154\031\166" +
    "\032\151\061\156\001\001\000\014\017\155\020\154\031" +
    "\166\032\151\061\156\001\001\000\002\001\001\000\006" +
    "\005\023\035\201\001\001\000\014\017\155\020\154\031" +
    "\166\032\151\061\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\155\020\154\031" +
    "\166\032\151\061\156\001\001\000\002\001\001\000\014" +
    "\017\155\020\154\031\166\032\151\061\156\001\001\000" +
    "\002\001\001\000\014\017\155\020\154\031\166\032\151" +
    "\061\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\103\007\100\033" +
    "\224\034\222\052\101\053\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\227\017" +
    "\226\001\001\000\006\005\233\044\234\001\001\000\002" +
    "\001\001\000\004\023\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\236\017\226\001\001\000\002\001\001\000\004\023" +
    "\240\001\001\000\002\001\001\000\006\016\242\017\226" +
    "\001\001\000\002\001\001\000\004\023\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\023\035\250\001\001\000\014\017\155\020\154\031" +
    "\166\032\151\061\156\001\001\000\016\005\103\007\100" +
    "\033\254\034\252\052\101\053\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\256" +
    "\017\226\001\001\000\002\001\001\000\004\023\260\001" +
    "\001\000\002\001\001\000\006\016\262\017\226\001\001" +
    "\000\002\001\001\000\004\023\264\001\001\000\002\001" +
    "\001\000\006\016\266\017\226\001\001\000\002\001\001" +
    "\000\004\023\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\103\007\100\033\276" +
    "\034\274\052\101\053\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\300\017\226" +
    "\001\001\000\002\001\001\000\004\023\302\001\001\000" +
    "\002\001\001\000\006\016\304\017\226\001\001\000\002" +
    "\001\001\000\004\023\306\001\001\000\002\001\001\000" +
    "\006\016\310\017\226\001\001\000\002\001\001\000\004" +
    "\023\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\103\007\100\033\320\034\316" +
    "\052\101\053\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\023\035\330\001\001\000\014" +
    "\017\155\020\154\031\166\032\151\061\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\023\035\345\001\001\000\002\001\001\000\004\064" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\155\020\154\031\166\032\151\061\156" +
    "\001\001\000\002\001\001\000\016\005\103\007\100\033" +
    "\351\034\350\052\101\053\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\353\001\001\000\002\001" +
    "\001\000\004\023\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\023\035\366\001\001\000\014\017\155\020" +
    "\154\031\166\032\151\061\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\023\035" +
    "\373\001\001\000\014\017\155\020\154\031\166\032\151" +
    "\061\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\023\035\u0100\001\001\000\002\001\001\000\014" +
    "\017\155\020\154\031\166\032\151\061\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\u011a\024\u011b\025\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\u011a\024" +
    "\u0120\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolor
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){
            System.out.println("Tabla de simbolo: " + key);
            System.out.println("La tabla contiene estos valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= entregaRegalos EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal_nums ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_nums",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal_nums ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_nums",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal_no_nums ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_no_nums",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal_no_nums ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_no_nums",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opciones ::= literales_navidenios 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opciones ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grinchYQuien ::= unidadNavidenia opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reyesMagos ::= opciones logisticadeNavidad opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reyesMagos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reyesMagos ::= BALTASAR opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reyesMagos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // narraNavidad ::= NARRA ABRECUENTO regaloprin CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // escuchaNavidad ::= ESCUCHA ABRECUENTO regaloprin CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // t_navidad ::= FESTIVAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_navidad",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // t_navidad ::= FIESTA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_navidad",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // envia ::= ENVIA regaloprin FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elfos_g ::= ELFO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_g",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elfos_g ::= ELFO2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_g",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // elfos_nums ::= ELFO3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_nums",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // elfos_nums ::= ELFO4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_nums",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elfos_nums ::= ELFO5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_nums",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elfos_nums ::= ELFO6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos_nums",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // compN ::= literal_nums 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // compN ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // compN ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compN",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_elfosN ::= compN elfos_nums compN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_elfosN",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // compG ::= literales_navidenios 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // compG ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compG",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp_elfosG ::= compG elfos_g compG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp_elfosG",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // regaloprin ::= COMETA regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // regaloprin ::= BALTASAR regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regaloprin ::= regaloprin renos regaloprin 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(rn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regaloprin ::= ABRECUENTO regaloprin CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regaloprin ::= literales_navidenios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regaloprin ::= regaloprin logisticadeNavidad regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // regaloprin ::= regaloprin unidadNavidenia regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // regaloprin ::= regaloprin elfos_g regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // regaloprin ::= regaloprin elfos_nums regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // regaloprin ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // decl_G ::= PERSONA ENTREGA regaloprin FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declPapaNoel ::= POLO PAPANOEL PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declPapaNoel",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declPapaNoel ::= POLO PAPANOEL PERSONA ENTREGA regaloprin FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declPapaNoel",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declSanNicolas ::= POLO SANNICOLAS PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSanNicolas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declSanNicolas ::= POLO SANNICOLAS PERSONA ENTREGA regaloprin FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSanNicolas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declSantaClausula ::= POLO SANTACLAUSULA PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSantaClausula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declSantaClausula ::= POLO SANTACLAUSULA PERSONA ENTREGA regaloprin FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSantaClausula",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declSantaClaus ::= POLO SANTACLAUS PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSantaClaus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declSantaClaus ::= POLO SANTACLAUS PERSONA ENTREGA l_PAPANOEL FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSantaClaus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declSantaClaus ::= POLO SANTACLAUS PERSONA ENTREGA PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSantaClaus",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declColacho ::= POLO COLACHO PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declColacho",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declColacho ::= POLO COLACHO PERSONA ENTREGA l_PAPANOEL FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declColacho",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declColacho ::= POLO COLACHO PERSONA ENTREGA PERSONA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declColacho",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicioNav ::= declPapaNoel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioNav",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // inicioNav ::= declSanNicolas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioNav",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicioNav ::= declSantaClaus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioNav",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicioNav ::= declSantaClausula 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioNav",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicioNav ::= declColacho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioNav",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // whileStmt ::= ENVOLTURA ABRECUENTO comp_elfosN CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // whileStmt ::= ENVOLTURA ABRECUENTO comp_elfosG CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // whileStmt ::= ENVOLTURA ABRECUENTO l_SANTA_CLAUS CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO comp_elfosN CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO comp_elfosG CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO l_SANTA_CLAUS CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO comp_elfosN MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO comp_elfosG MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA regaloprin MUERDAGO l_SANTA_CLAUS MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // elfoStm ::= ELFO ABRECUENTO comp_elfosN CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // elfoStm ::= ELFO ABRECUENTO comp_elfosG CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // hadaStm ::= HADA ABRECUENTO comp_elfosN CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // hadaStm ::= HADA ABRECUENTO comp_elfosG CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(tsc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ayudanteDeSanta ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ids ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ids ::= ids MUERDAGO PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // llamadaNavidenia ::= PERSONA FINREGALO ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llamadaNavidenia ::= PERSONA FINREGALO ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // definirFunNav ::= EMPEZONAVIDAD t_santas PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String tipoTabla = "main";
                if (per.toString().equals("main"))
                        tipoTabla = "tipo:main: "+tsc.toString();
                else
                        tipoTabla = "tipo:function: "+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablaSimbolos.put(currentHash, funcionMain);
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // definirFunNav ::= EMPEZONAVIDAD t_santas PERSONA ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                String tipoTabla = "main";
                if (per.toString().equals("main"))
                        tipoTabla = "tipo:main: "+tsc.toString();
                else
                        tipoTabla = "tipo:function: "+tsc.toString();
                ArrayList<String> funcionMain = new ArrayList<String>();
                currentHash = per.toString();
                funcionMain.add(tipoTabla);
                listaTablaSimbolos.put(currentHash, funcionMain);
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pNocheBuena ::= pbolsanavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pNocheBuena",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cuerpoMain ::= ABREREGALO regaloExtn CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoMain",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$0 ::= 
            {
              Object RESULT =null;

                    System.out.println("Empieza el asunto");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // entregaRegalos ::= NT$0 EMPEZONAVIDAD VIEJITOPASCUERO ENTREGAREGALOS ABRECUENTO CIERRACUENTO cuerpoMain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                    imprimirTablaSimbolos();
                    System.out.println("Termina el asunto");
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entregaRegalos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // poloNorte ::= envia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // poloNorte ::= regaloprin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // poloNorte ::= inicioNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // poloNorte ::= whileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // poloNorte ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // poloNorte ::= doWhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // poloNorte ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // poloNorte ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // poloNorte ::= duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // poloNorte ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // regalo ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
