
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\013\003\000\002\013\003\000\002\026" +
    "\004\000\002\026\004\000\002\027\003\000\002\027\003" +
    "\000\002\030\004\000\002\030\005\000\002\012\004\000" +
    "\002\032\005\000\002\031\003\000\002\031\003\000\002" +
    "\014\003\000\002\014\003\000\002\033\004\000\002\033" +
    "\005\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\005\000\002\024\006\000\002\037\010\000\002" +
    "\053\006\000\002\016\004\000\002\016\005\000\002\061" +
    "\011\000\002\061\012\000\002\062\015\000\002\062\016" +
    "\000\002\063\003\000\002\063\005\000\002\060\006\000" +
    "\002\060\011\000\002\044\011\000\002\040\015\000\002" +
    "\040\016\000\002\040\017\000\002\046\007\000\002\046" +
    "\010\000\002\046\010\000\002\046\011\000\002\046\004" +
    "\000\002\047\007\000\002\050\003\000\002\050\004\000" +
    "\002\051\004\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\057\003\000\002\057\005\000\002\055" +
    "\005\000\002\055\006\000\002\056\004\000\002\017\004" +
    "\000\002\020\003\000\002\020\005\000\002\054\005\000" +
    "\002\054\005\000\002\021\005\000\002\021\006\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\006" +
    "\003\000\002\006\004\000\002\045\005\000\002\022\004" +
    "\000\002\010\007\000\002\011\007\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\004\000\002\007\003\000\002\007\004\000\002" +
    "\064\002\000\002\003\004\000\002\043\003\000\002\043" +
    "\003\000\002\042\003\000\002\042\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\006\003\uff8d\004\uff8d\001\002\000\006\003" +
    "\011\004\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\uff8f\003\uff8f\004\uff8f\001" +
    "\002\000\020\056\027\057\016\060\022\061\025\062\020" +
    "\063\030\067\021\001\002\000\010\053\347\054\345\055" +
    "\346\001\002\000\012\002\uffa4\003\uffa4\004\uffa4\053\037" +
    "\001\002\000\010\002\uff8c\003\011\004\010\001\002\000" +
    "\004\047\015\001\002\000\022\050\024\056\027\057\016" +
    "\060\022\061\025\062\020\063\030\067\021\001\002\000" +
    "\006\005\ufffa\072\ufffa\001\002\000\004\005\034\001\002" +
    "\000\006\005\ufff7\072\ufff7\001\002\000\006\005\ufff5\072" +
    "\ufff5\001\002\000\006\005\ufff9\072\ufff9\001\002\000\006" +
    "\050\uffad\064\uffad\001\002\000\012\002\uffa9\003\uffa9\004" +
    "\uffa9\053\uffa9\001\002\000\006\005\ufff8\072\ufff8\001\002" +
    "\000\006\050\032\064\031\001\002\000\006\005\ufffb\072" +
    "\ufffb\001\002\000\006\005\ufff6\072\ufff6\001\002\000\020" +
    "\056\027\057\016\060\022\061\025\062\020\063\030\067" +
    "\021\001\002\000\012\002\uffa8\003\uffa8\004\uffa8\053\uffa8" +
    "\001\002\000\006\050\uffac\064\uffac\001\002\000\006\050" +
    "\uffae\064\uffae\001\002\000\010\002\uff8e\003\uff8e\004\uff8e" +
    "\001\002\000\010\002\uffa3\003\uffa3\004\uffa3\001\002\000" +
    "\054\003\076\005\047\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\032\114\035\066\037" +
    "\065\041\106\042\075\045\077\046\042\047\101\054\054" +
    "\065\062\066\105\001\002\000\054\003\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\022\uffb4\023\uffb4" +
    "\025\uffb4\032\uffb4\035\uffb4\037\uffb4\041\uffb4\042\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\054\uffb4\065\uffb4\066\uffb4\001\002" +
    "\000\054\003\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\022\uff92\023\uff92\025\uff92\032\uff92\035\uff92" +
    "\037\uff92\041\uff92\042\uff92\045\uff92\046\uff92\047\uff92\054" +
    "\uff92\065\uff92\066\uff92\001\002\000\022\056\027\057\016" +
    "\060\022\061\025\062\020\063\030\067\021\071\310\001" +
    "\002\000\052\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\043\uffd6\044\uffd6\050\uffd6\052\uffd6\054\uffd6\055\uffd6" +
    "\064\uffd6\070\uffd6\001\002\000\052\014\000\015\000\016" +
    "\000\017\000\020\000\021\000\024\000\025\000\026\000" +
    "\027\000\030\000\031\000\043\000\044\000\050\000\052" +
    "\000\054\000\055\000\064\000\070\000\001\002\000\052" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\043\ufffd" +
    "\044\ufffd\050\ufffd\052\ufffd\054\ufffd\055\ufffd\064\ufffd\070" +
    "\ufffd\001\002\000\054\003\uff95\005\uff95\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\022\uff95\023\uff95\025\uff95\032" +
    "\uff95\035\uff95\037\uff95\041\uff95\042\uff95\045\uff95\046\uff95" +
    "\047\uff95\054\uff95\065\uff95\066\uff95\001\002\000\046\013" +
    "\304\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\043" +
    "\uffd7\044\uffd7\047\130\051\127\070\uffd7\001\002\000\040" +
    "\014\150\015\147\016\146\017\145\020\144\021\143\024" +
    "\154\025\137\026\152\027\156\030\160\031\155\043\153" +
    "\044\141\070\157\001\002\000\052\014\ufffc\015\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\043\ufffc\044\ufffc\050\ufffc\052" +
    "\ufffc\054\ufffc\055\ufffc\064\ufffc\070\ufffc\001\002\000\054" +
    "\003\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\022\uffb6\023\uffb6\025\uffb6\032\uffb6\035\uffb6\037\uffb6" +
    "\041\uffb6\042\uffb6\045\uffb6\046\uffb6\047\uffb6\054\uffb6\065" +
    "\uffb6\066\uffb6\001\002\000\054\003\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\022\uff9b\023\uff9b\025" +
    "\uff9b\032\uff9b\035\uff9b\037\uff9b\041\uff9b\042\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\054\uff9b\065\uff9b\066\uff9b\001\002\000" +
    "\066\002\uffcd\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\022\uffcd\023\uffcd\025\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\045\uffcd\046\uffcd\047\uffcd\054\uffcd\065\uffcd\066" +
    "\uffcd\001\002\000\052\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\043\uffdd\044\uffdd\050\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\064\uffdd\070\uffdd\001\002\000\054\003\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\022\uffb5" +
    "\023\uffb5\025\uffb5\032\uffb5\035\uffb5\037\uffb5\041\uffb5\042" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\054\uffb5\065\uffb5\066\uffb5" +
    "\001\002\000\054\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\022\uff9e\023\uff9e\025\uff9e\032\uff9e" +
    "\035\uff9e\037\uff9e\041\uff9e\042\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\054\uff9e\065\uff9e\066\uff9e\001\002\000\052\014\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\043\uffff\044\uffff" +
    "\050\uffff\052\uffff\054\uffff\055\uffff\064\uffff\070\uffff\001" +
    "\002\000\052\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\043\ufffe\044\ufffe\050\ufffe\052\ufffe\054\ufffe\055\ufffe" +
    "\064\ufffe\070\ufffe\001\002\000\004\047\300\001\002\000" +
    "\054\003\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\022\uff94\023\uff94\025\uff94\032\uff94\035\uff94\037" +
    "\uff94\041\uff94\042\uff94\045\uff94\046\uff94\047\uff94\054\uff94" +
    "\065\uff94\066\uff94\001\002\000\042\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\043\uffd5\044\uffd5\055\277\070" +
    "\uffd5\001\002\000\004\053\037\001\002\000\004\047\232" +
    "\001\002\000\052\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\043\uffd4\044\uffd4\050\uffd4\052\uffd4\054\uffd4\055" +
    "\uffd4\064\uffd4\070\uffd4\001\002\000\054\003\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\022\uff9a\023" +
    "\uff9a\025\uff9a\032\uff9a\035\uff9a\037\uff9a\041\uff9a\042\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\054\uff9a\065\uff9a\066\uff9a\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\042\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\043\uffd2\044\uffd2\055\230\070\uffd2\001\002\000\030" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\045\uffe7\047\uffe7\001\002\000\054" +
    "\003\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\022\uff98\023\uff98\025\uff98\032\uff98\035\uff98\037\uff98" +
    "\041\uff98\042\uff98\045\uff98\046\uff98\047\uff98\054\uff98\065" +
    "\uff98\066\uff98\001\002\000\004\055\227\001\002\000\006" +
    "\054\212\055\226\001\002\000\030\005\124\006\044\007" +
    "\060\010\061\011\045\012\051\022\073\023\116\025\071" +
    "\045\077\047\101\001\002\000\054\003\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\022\uff99\023\uff99" +
    "\025\uff99\032\uff99\035\uff99\037\uff99\041\uff99\042\uff99\045" +
    "\uff99\046\uff99\047\uff99\054\uff99\065\uff99\066\uff99\001\002" +
    "\000\030\005\124\006\044\007\060\010\061\011\045\012" +
    "\051\022\073\023\116\025\071\045\077\047\101\001\002" +
    "\000\054\003\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\022\uff9d\023\uff9d\025\uff9d\032\uff9d\035\uff9d" +
    "\037\uff9d\041\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d\054" +
    "\uff9d\065\uff9d\066\uff9d\001\002\000\054\003\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\022\uff9c\023" +
    "\uff9c\025\uff9c\032\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\054\uff9c\065\uff9c\066\uff9c\001" +
    "\002\000\042\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\043\uffd3\044\uffd3\055\222\070\uffd3\001\002\000\004" +
    "\047\216\001\002\000\030\005\124\006\044\007\060\010" +
    "\061\011\045\012\051\022\073\023\116\025\071\045\077" +
    "\047\101\001\002\000\054\003\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\022\uff93\023\uff93\025\uff93" +
    "\032\uff93\035\uff93\037\uff93\041\uff93\042\uff93\045\uff93\046" +
    "\uff93\047\uff93\054\uff93\065\uff93\066\uff93\001\002\000\052" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\043\uffe3" +
    "\044\uffe3\050\uffe3\052\uffe3\054\uffe3\055\uffe3\064\uffe3\070" +
    "\uffe3\001\002\000\030\005\124\006\044\007\060\010\061" +
    "\011\045\012\051\022\073\023\116\025\071\045\077\047" +
    "\101\001\002\000\052\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\043\uffe2\044\uffe2\050\uffe2\052\uffe2\054\uffe2" +
    "\055\uffe2\064\uffe2\070\uffe2\001\002\000\054\003\211\005" +
    "\047\006\044\007\060\010\061\011\045\012\051\022\073" +
    "\023\116\025\071\032\114\035\066\037\065\041\106\042" +
    "\075\045\077\046\042\047\101\054\210\065\062\066\105" +
    "\001\002\000\004\047\121\001\002\000\054\003\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\022\uff96" +
    "\023\uff96\025\uff96\032\uff96\035\uff96\037\uff96\041\uff96\042" +
    "\uff96\045\uff96\046\uff96\047\uff96\054\uff96\065\uff96\066\uff96" +
    "\001\002\000\030\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\022\uffe6\023\uffe6\025\uffe6\045\uffe6\047\uffe6" +
    "\001\002\000\052\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\043\uffdc\044\uffdc\050\uffdc\052\uffdc\054\uffdc\055" +
    "\uffdc\064\uffdc\070\uffdc\001\002\000\054\003\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\022\uff97\023" +
    "\uff97\025\uff97\032\uff97\035\uff97\037\uff97\041\uff97\042\uff97" +
    "\045\uff97\046\uff97\047\uff97\054\uff97\065\uff97\066\uff97\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\052\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\043\uffd3\044\uffd3\050\uffd3\052\uffd3\054\uffd3\055\uffd3" +
    "\064\uffd3\070\uffd3\001\002\000\042\014\150\015\147\016" +
    "\146\017\145\020\144\021\143\024\154\025\137\026\152" +
    "\027\156\030\160\031\155\043\153\044\141\050\171\070" +
    "\157\001\002\000\056\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\043\uffd7\044\uffd7\047\130\050\uffd7\051\127" +
    "\052\uffd7\054\uffd7\055\uffd7\064\uffd7\070\uffd7\001\002\000" +
    "\052\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\043" +
    "\uffd2\044\uffd2\050\uffd2\052\uffd2\054\uffd2\055\uffd2\064\uffd2" +
    "\070\uffd2\001\002\000\052\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\043\uffd5\044\uffd5\050\uffd5\052\uffd5\054" +
    "\uffd5\055\uffd5\064\uffd5\070\uffd5\001\002\000\030\005\124" +
    "\006\044\007\060\010\061\011\045\012\051\022\073\023" +
    "\116\025\071\045\077\047\101\001\002\000\032\005\124" +
    "\006\044\007\060\010\061\011\045\012\051\022\073\023" +
    "\116\025\071\045\077\047\101\050\131\001\002\000\052" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\043\uffb1" +
    "\044\uffb1\050\uffb1\052\uffb1\054\uffb1\055\uffb1\064\uffb1\070" +
    "\uffb1\001\002\000\044\014\150\015\147\016\146\017\145" +
    "\020\144\021\143\024\154\025\137\026\152\027\156\030" +
    "\160\031\155\043\153\044\141\050\uffb3\064\uffb3\070\157" +
    "\001\002\000\006\050\134\064\135\001\002\000\052\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\043\uffb0\044" +
    "\uffb0\050\uffb0\052\uffb0\054\uffb0\055\uffb0\064\uffb0\070\uffb0" +
    "\001\002\000\030\005\124\006\044\007\060\010\061\011" +
    "\045\012\051\022\073\023\116\025\071\045\077\047\101" +
    "\001\002\000\044\014\150\015\147\016\146\017\145\020" +
    "\144\021\143\024\154\025\137\026\152\027\156\030\160" +
    "\031\155\043\153\044\141\050\uffb2\064\uffb2\070\157\001" +
    "\002\000\030\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\022\uffee\023\uffee\025\uffee\045\uffee\047\uffee\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\030\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\022\uffda\023\uffda\025\uffda\045\uffda\047\uffda\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\030\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\022\uffef\023\uffef\025\uffef\045\uffef\047\uffef\001" +
    "\002\000\030\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\022\ufff0\023\ufff0\025\ufff0\045\ufff0\047\ufff0\001" +
    "\002\000\030\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\022\ufff1\023\ufff1\025\ufff1\045\ufff1\047\ufff1\001" +
    "\002\000\030\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\022\ufff2\023\ufff2\025\ufff2\045\ufff2\047\ufff2\001" +
    "\002\000\030\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\022\ufff3\023\ufff3\025\ufff3\045\ufff3\047\ufff3\001" +
    "\002\000\030\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\022\ufff4\023\ufff4\025\ufff4\045\ufff4\047\ufff4\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\030\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\022\uffeb\023\uffeb\025\uffeb\045\uffeb\047\uffeb\001" +
    "\002\000\030\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\022\uffdb\023\uffdb\025\uffdb\045\uffdb\047\uffdb\001" +
    "\002\000\030\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\022\uffec\023\uffec\025\uffec\045\uffec\047\uffec\001" +
    "\002\000\030\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\022\uffe8\023\uffe8\025\uffe8\045\uffe8\047\uffe8\001" +
    "\002\000\030\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea" +
    "\012\uffea\022\uffea\023\uffea\025\uffea\045\uffea\047\uffea\001" +
    "\002\000\030\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\022\uffed\023\uffed\025\uffed\045\uffed\047\uffed\001" +
    "\002\000\030\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\022\uffe9\023\uffe9\025\uffe9\045\uffe9\047\uffe9\001" +
    "\002\000\052\014\150\015\147\016\146\017\145\020\144" +
    "\021\143\024\154\025\137\026\152\027\156\030\160\031" +
    "\155\043\153\044\141\050\uffe0\052\uffe0\054\uffe0\055\uffe0" +
    "\064\uffe0\070\157\001\002\000\052\014\150\015\147\016" +
    "\146\017\145\020\144\021\143\024\154\025\137\026\152" +
    "\027\156\030\160\031\155\043\153\044\141\050\uffd8\052" +
    "\uffd8\054\uffd8\055\uffd8\064\uffd8\070\157\001\002\000\052" +
    "\014\150\015\147\016\146\017\145\020\144\021\143\024" +
    "\154\025\137\026\152\027\156\030\160\031\155\043\153" +
    "\044\141\050\uffde\052\uffde\054\uffde\055\uffde\064\uffde\070" +
    "\157\001\002\000\042\014\150\015\147\016\146\017\145" +
    "\020\144\021\143\024\154\025\137\026\152\027\156\030" +
    "\160\031\155\043\153\044\141\052\165\070\157\001\002" +
    "\000\054\013\166\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\043\uffc5\044\uffc5\050\uffc5\052\uffc5\054\uffc5\055" +
    "\uffc5\064\uffc5\070\uffc5\001\002\000\030\005\124\006\044" +
    "\007\060\010\061\011\045\012\051\022\073\023\116\025" +
    "\071\045\077\047\101\001\002\000\042\014\150\015\147" +
    "\016\146\017\145\020\144\021\143\024\154\025\137\026" +
    "\152\027\156\030\160\031\155\043\153\044\141\055\170" +
    "\070\157\001\002\000\052\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\043\uffc4\044\uffc4\050\uffc4\052\uffc4\054" +
    "\uffc4\055\uffc4\064\uffc4\070\uffc4\001\002\000\004\053\037" +
    "\001\002\000\060\003\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\022\uffbf\023\uffbf\025\uffbf\032\uffbf" +
    "\033\175\034\173\035\uffbf\037\uffbf\041\uffbf\042\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\054\uffbf\065\uffbf\066\uffbf\001\002" +
    "\000\004\053\037\001\002\000\060\003\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\022\uffb9\023\uffb9" +
    "\025\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\041" +
    "\uffb9\042\uffb9\045\uffb9\046\uffb9\047\uffb9\054\uffb9\065\uffb9" +
    "\066\uffb9\001\002\000\004\047\202\001\002\000\060\003" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\022\uffbd\023\uffbd\025\uffbd\032\uffbd\033\175\034\173\035" +
    "\uffbd\037\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\054\uffbd\065\uffbd\066\uffbd\001\002\000\054\003\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\022\uffbe" +
    "\023\uffbe\025\uffbe\032\uffbe\035\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\054\uffbe\065\uffbe\066\uffbe" +
    "\001\002\000\060\003\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\022\uffb8\023\uffb8\025\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\037\uffb8\041\uffb8\042\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\054\uffb8\065\uffb8\066\uffb8\001\002" +
    "\000\054\003\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\022\uffbc\023\uffbc\025\uffbc\032\uffbc\035\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\054" +
    "\uffbc\065\uffbc\066\uffbc\001\002\000\030\005\124\006\044" +
    "\007\060\010\061\011\045\012\051\022\073\023\116\025" +
    "\071\045\077\047\101\001\002\000\042\014\150\015\147" +
    "\016\146\017\145\020\144\021\143\024\154\025\137\026" +
    "\152\027\156\030\160\031\155\043\153\044\141\050\204" +
    "\070\157\001\002\000\004\053\037\001\002\000\060\003" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\022\uffba\023\uffba\025\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\037\uffba\041\uffba\042\uffba\045\uffba\046\uffba\047\uffba" +
    "\054\uffba\065\uffba\066\uffba\001\002\000\054\003\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\022\uffb7" +
    "\023\uffb7\025\uffb7\032\uffb7\035\uffb7\037\uffb7\041\uffb7\042" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\054\uffb7\065\uffb7\066\uffb7" +
    "\001\002\000\054\003\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\022\uff91\023\uff91\025\uff91\032\uff91" +
    "\035\uff91\037\uff91\041\uff91\042\uff91\045\uff91\046\uff91\047" +
    "\uff91\054\uff91\065\uff91\066\uff91\001\002\000\066\002\uffcc" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\022\uffcc\023\uffcc\025\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\054\uffcc\065\uffcc\066\uffcc\001\002" +
    "\000\004\054\212\001\002\000\054\003\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\022\uffbb\023\uffbb" +
    "\025\uffbb\032\uffbb\035\uffbb\037\uffbb\041\uffbb\042\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\054\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\052\014\150\015\147\016\146\017\145\020\144\021" +
    "\143\024\154\025\137\026\152\027\156\030\160\031\155" +
    "\043\153\044\141\050\uffdf\052\uffdf\054\uffdf\055\uffdf\064" +
    "\uffdf\070\157\001\002\000\042\014\150\015\147\016\146" +
    "\017\145\020\144\021\143\024\154\025\137\026\152\027" +
    "\156\030\160\031\155\043\153\044\141\055\215\070\157" +
    "\001\002\000\054\003\uffa2\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\022\uffa2\023\uffa2\025\uffa2\032\uffa2" +
    "\035\uffa2\037\uffa2\041\uffa2\042\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\054\uffa2\065\uffa2\066\uffa2\001\002\000\030\005\124" +
    "\006\044\007\060\010\061\011\045\012\051\022\073\023" +
    "\116\025\071\045\077\047\101\001\002\000\042\014\150" +
    "\015\147\016\146\017\145\020\144\021\143\024\154\025" +
    "\137\026\152\027\156\030\160\031\155\043\153\044\141" +
    "\050\220\070\157\001\002\000\004\055\221\001\002\000" +
    "\054\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\022\uff9f\023\uff9f\025\uff9f\032\uff9f\035\uff9f\037" +
    "\uff9f\041\uff9f\042\uff9f\045\uff9f\046\uff9f\047\uff9f\054\uff9f" +
    "\065\uff9f\066\uff9f\001\002\000\054\003\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\022\uffe5\023\uffe5" +
    "\025\uffe5\032\uffe5\035\uffe5\037\uffe5\041\uffe5\042\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\054\uffe5\065\uffe5\066\uffe5\001\002" +
    "\000\042\014\150\015\147\016\146\017\145\020\144\021" +
    "\143\024\154\025\137\026\152\027\156\030\160\031\155" +
    "\043\153\044\141\050\224\070\157\001\002\000\052\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\043\uffd1\044" +
    "\uffd1\050\uffd1\052\uffd1\054\uffd1\055\uffd1\064\uffd1\070\uffd1" +
    "\001\002\000\052\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\043\uffd9\044\uffd9\050\uffd9\052\uffd9\054\uffd9\055" +
    "\uffd9\064\uffd9\070\uffd9\001\002\000\054\003\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\022\uff90\023" +
    "\uff90\025\uff90\032\uff90\035\uff90\037\uff90\041\uff90\042\uff90" +
    "\045\uff90\046\uff90\047\uff90\054\uff90\065\uff90\066\uff90\001" +
    "\002\000\054\003\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\022\uffa1\023\uffa1\025\uffa1\032\uffa1\035" +
    "\uffa1\037\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\054\uffa1\065\uffa1\066\uffa1\001\002\000\054\003\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\022\uffe4" +
    "\023\uffe4\025\uffe4\032\uffe4\035\uffe4\037\uffe4\041\uffe4\042" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\054\uffe4\065\uffe4\066\uffe4" +
    "\001\002\000\052\014\150\015\147\016\146\017\145\020" +
    "\144\021\143\024\uffe1\025\uffe1\026\152\027\156\030\160" +
    "\031\155\043\153\044\141\050\uffe1\052\uffe1\054\uffe1\055" +
    "\uffe1\064\uffe1\070\157\001\002\000\010\005\233\046\234" +
    "\057\235\001\002\000\004\013\261\001\002\000\004\057" +
    "\247\001\002\000\004\005\236\001\002\000\004\013\237" +
    "\001\002\000\004\006\240\001\002\000\004\064\241\001" +
    "\002\000\030\005\124\006\044\007\060\010\061\011\045" +
    "\012\051\022\073\023\116\025\071\045\077\047\101\001" +
    "\002\000\042\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\043\uffe2\044\uffe2\064\243\070\uffe2\001\002\000\006" +
    "\022\073\023\116\001\002\000\004\050\245\001\002\000" +
    "\004\053\037\001\002\000\054\003\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\022\uffc1\023\uffc1\025" +
    "\uffc1\032\uffc1\035\uffc1\037\uffc1\041\uffc1\042\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\054\uffc1\065\uffc1\066\uffc1\001\002\000" +
    "\004\005\250\001\002\000\004\013\251\001\002\000\030" +
    "\005\124\006\044\007\060\010\061\011\045\012\051\022" +
    "\073\023\116\025\071\045\077\047\101\001\002\000\042" +
    "\014\150\015\147\016\146\017\145\020\144\021\143\024" +
    "\154\025\137\026\152\027\156\030\160\031\155\043\153" +
    "\044\141\064\253\070\157\001\002\000\030\005\124\006" +
    "\044\007\060\010\061\011\045\012\051\022\073\023\116" +
    "\025\071\045\077\047\101\001\002\000\042\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\043\uffe2\044\uffe2\064" +
    "\255\070\uffe2\001\002\000\006\022\073\023\116\001\002" +
    "\000\004\050\257\001\002\000\004\053\037\001\002\000" +
    "\054\003\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\022\uffc0\023\uffc0\025\uffc0\032\uffc0\035\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0\054\uffc0" +
    "\065\uffc0\066\uffc0\001\002\000\004\006\262\001\002\000" +
    "\004\064\263\001\002\000\030\005\124\006\044\007\060" +
    "\010\061\011\045\012\051\022\073\023\116\025\071\045" +
    "\077\047\101\001\002\000\042\014\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\043\uffe2\044\uffe2\064\265\070\uffe2" +
    "\001\002\000\006\022\073\023\116\001\002\000\004\050" +
    "\267\001\002\000\004\053\037\001\002\000\054\003\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\022" +
    "\uffc2\023\uffc2\025\uffc2\032\uffc2\035\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\045\uffc2\046\uffc2\047\uffc2\054\uffc2\065\uffc2\066" +
    "\uffc2\001\002\000\004\040\272\001\002\000\004\047\273" +
    "\001\002\000\030\005\124\006\044\007\060\010\061\011" +
    "\045\012\051\022\073\023\116\025\071\045\077\047\101" +
    "\001\002\000\042\014\150\015\147\016\146\017\145\020" +
    "\144\021\143\024\154\025\137\026\152\027\156\030\160" +
    "\031\155\043\153\044\141\050\275\070\157\001\002\000" +
    "\004\055\276\001\002\000\054\003\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\022\uffc3\023\uffc3\025" +
    "\uffc3\032\uffc3\035\uffc3\037\uffc3\041\uffc3\042\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\054\uffc3\065\uffc3\066\uffc3\001\002\000" +
    "\054\003\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\022\uffaf\023\uffaf\025\uffaf\032\uffaf\035\uffaf\037" +
    "\uffaf\041\uffaf\042\uffaf\045\uffaf\046\uffaf\047\uffaf\054\uffaf" +
    "\065\uffaf\066\uffaf\001\002\000\030\005\124\006\044\007" +
    "\060\010\061\011\045\012\051\022\073\023\116\025\071" +
    "\045\077\047\101\001\002\000\042\014\150\015\147\016" +
    "\146\017\145\020\144\021\143\024\154\025\137\026\152" +
    "\027\156\030\160\031\155\043\153\044\141\050\302\070" +
    "\157\001\002\000\004\055\303\001\002\000\054\003\uffa0" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\022" +
    "\uffa0\023\uffa0\025\uffa0\032\uffa0\035\uffa0\037\uffa0\041\uffa0" +
    "\042\uffa0\045\uffa0\046\uffa0\047\uffa0\054\uffa0\065\uffa0\066" +
    "\uffa0\001\002\000\030\005\124\006\044\007\060\010\061" +
    "\011\045\012\051\022\073\023\116\025\071\045\077\047" +
    "\101\001\002\000\042\014\150\015\147\016\146\017\145" +
    "\020\144\021\143\024\154\025\137\026\152\027\156\030" +
    "\160\031\155\043\153\044\141\055\306\070\157\001\002" +
    "\000\054\003\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\022\uffce\023\uffce\025\uffce\032\uffce\035\uffce" +
    "\037\uffce\041\uffce\042\uffce\045\uffce\046\uffce\047\uffce\054" +
    "\uffce\065\uffce\066\uffce\001\002\000\004\005\327\001\002" +
    "\000\020\056\027\057\016\060\022\061\025\062\020\063" +
    "\030\067\021\001\002\000\004\005\312\001\002\000\004" +
    "\051\313\001\002\000\004\006\314\001\002\000\004\052" +
    "\315\001\002\000\006\013\316\055\317\001\002\000\004" +
    "\053\320\001\002\000\054\003\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\022\uffca\023\uffca\025\uffca" +
    "\032\uffca\035\uffca\037\uffca\041\uffca\042\uffca\045\uffca\046" +
    "\uffca\047\uffca\054\uffca\065\uffca\066\uffca\001\002\000\030" +
    "\005\124\006\044\007\060\010\061\011\045\012\051\022" +
    "\073\023\116\025\071\045\077\047\101\001\002\000\044" +
    "\014\150\015\147\016\146\017\145\020\144\021\143\024" +
    "\154\025\137\026\152\027\156\030\160\031\155\043\153" +
    "\044\141\054\uffc7\064\uffc7\070\157\001\002\000\006\054" +
    "\323\064\324\001\002\000\004\055\326\001\002\000\030" +
    "\005\124\006\044\007\060\010\061\011\045\012\051\022" +
    "\073\023\116\025\071\045\077\047\101\001\002\000\044" +
    "\014\150\015\147\016\146\017\145\020\144\021\143\024" +
    "\154\025\137\026\152\027\156\030\160\031\155\043\153" +
    "\044\141\054\uffc6\064\uffc6\070\157\001\002\000\054\003" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\022\uffc8\023\uffc8\025\uffc8\032\uffc8\035\uffc8\037\uffc8\041" +
    "\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8\054\uffc8\065\uffc8" +
    "\066\uffc8\001\002\000\010\013\331\051\332\055\330\001" +
    "\002\000\054\003\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\022\uffd0\023\uffd0\025\uffd0\032\uffd0\035" +
    "\uffd0\037\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\054\uffd0\065\uffd0\066\uffd0\001\002\000\030\005\124\006" +
    "\044\007\060\010\061\011\045\012\051\022\073\023\116" +
    "\025\071\045\077\047\101\001\002\000\004\006\333\001" +
    "\002\000\004\052\334\001\002\000\006\013\336\055\335" +
    "\001\002\000\054\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\022\uffcb\023\uffcb\025\uffcb\032\uffcb" +
    "\035\uffcb\037\uffcb\041\uffcb\042\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\054\uffcb\065\uffcb\066\uffcb\001\002\000\004\053\337" +
    "\001\002\000\030\005\124\006\044\007\060\010\061\011" +
    "\045\012\051\022\073\023\116\025\071\045\077\047\101" +
    "\001\002\000\006\054\341\064\324\001\002\000\004\055" +
    "\342\001\002\000\054\003\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\022\uffc9\023\uffc9\025\uffc9\032" +
    "\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\054\uffc9\065\uffc9\066\uffc9\001\002\000\042\014" +
    "\150\015\147\016\146\017\145\020\144\021\143\024\154" +
    "\025\137\026\152\027\156\030\160\031\155\043\153\044" +
    "\141\055\344\070\157\001\002\000\054\003\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\022\uffcf\023" +
    "\uffcf\025\uffcf\032\uffcf\035\uffcf\037\uffcf\041\uffcf\042\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\054\uffcf\065\uffcf\066\uffcf\001" +
    "\002\000\012\002\uffa6\003\uffa6\004\uffa6\053\uffa6\001\002" +
    "\000\012\002\uffa7\003\uffa7\004\uffa7\053\uffa7\001\002\000" +
    "\012\002\uffa5\003\uffa5\004\uffa5\053\uffa5\001\002\000\006" +
    "\005\351\072\352\001\002\000\004\047\uffab\001\002\000" +
    "\004\047\uffaa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\006\003\004\064\003\001\001\000\012\006" +
    "\006\007\012\021\011\054\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\347\001" +
    "\001\000\002\001\001\000\004\016\035\001\001\000\010" +
    "\006\034\021\011\054\013\001\001\000\002\001\001\000" +
    "\010\004\016\017\022\020\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\016\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\002\040\005\042\010\052\011\117" +
    "\012\071\013\110\015\112\022\062\024\101\025\067\026" +
    "\073\027\103\030\107\031\111\032\054\033\116\034\047" +
    "\037\102\040\051\044\055\045\077\046\037\053\056\055" +
    "\063\056\106\060\066\061\045\062\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\141\023\137\052" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\042\012\124\013\110\027" +
    "\121\030\107\031\111\032\054\033\116\034\230\055\125" +
    "\060\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\042\012\124\013\110\027\121\030\107\031\111\032" +
    "\054\033\116\034\224\055\125\060\066\001\001\000\002" +
    "\001\001\000\030\005\042\012\124\013\110\027\121\030" +
    "\107\031\111\032\054\033\116\034\222\055\125\060\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\042\012\124\013\110" +
    "\027\121\030\107\031\111\032\054\033\116\034\213\055" +
    "\125\060\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\042\012\124\013\110\027\121\030\107\031" +
    "\111\032\054\033\116\034\212\055\125\060\066\001\001" +
    "\000\002\001\001\000\070\002\206\005\042\010\052\011" +
    "\117\012\071\013\110\022\062\024\101\025\067\026\073" +
    "\027\103\030\107\031\111\032\054\033\116\034\047\037" +
    "\102\040\051\044\055\045\077\046\037\053\056\055\063" +
    "\056\106\060\066\061\045\062\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\042\012\124\013\110\027" +
    "\121\030\107\031\111\032\054\033\116\034\122\055\125" +
    "\060\066\001\001\000\002\001\001\000\010\014\141\023" +
    "\137\052\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\042\012\124\013\110\027" +
    "\121\030\107\031\111\032\054\033\116\034\163\055\125" +
    "\060\066\001\001\000\032\005\042\012\124\013\110\027" +
    "\121\030\107\031\111\032\054\033\116\034\131\055\125" +
    "\057\132\060\066\001\001\000\002\001\001\000\010\014" +
    "\141\023\137\052\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\042\012\124\013\110\027\121\030" +
    "\107\031\111\032\054\033\116\034\135\055\125\060\066" +
    "\001\001\000\010\014\141\023\137\052\150\001\001\000" +
    "\002\001\001\000\030\005\042\012\124\013\110\027\121" +
    "\030\107\031\111\032\054\033\116\034\162\055\125\060" +
    "\066\001\001\000\002\001\001\000\030\005\042\012\124" +
    "\013\110\027\121\030\107\031\111\032\054\033\116\034" +
    "\161\055\125\060\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\042\012\124\013\110" +
    "\027\121\030\107\031\111\032\054\033\116\034\160\055" +
    "\125\060\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\141\023\137" +
    "\052\150\001\001\000\010\014\141\023\137\052\150\001" +
    "\001\000\010\014\141\023\137\052\150\001\001\000\010" +
    "\014\141\023\137\052\150\001\001\000\002\001\001\000" +
    "\030\005\042\012\124\013\110\027\121\030\107\031\111" +
    "\032\054\033\116\034\166\055\125\060\066\001\001\000" +
    "\010\014\141\023\137\052\150\001\001\000\002\001\001" +
    "\000\004\016\171\001\001\000\010\047\173\050\175\051" +
    "\176\001\001\000\004\016\205\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\047\177\051\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\042\012\124\013\110\027\121\030\107\031\111\032" +
    "\054\033\116\034\202\055\125\060\066\001\001\000\010" +
    "\014\141\023\137\052\150\001\001\000\004\016\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\141\023\137\052\150\001\001\000\010\014\141" +
    "\023\137\052\150\001\001\000\002\001\001\000\030\005" +
    "\042\012\124\013\110\027\121\030\107\031\111\032\054" +
    "\033\116\034\216\055\125\060\066\001\001\000\010\014" +
    "\141\023\137\052\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\141\023\137\052" +
    "\150\001\001\000\002\001\001\000\010\014\141\023\137" +
    "\052\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\141\023\137\052\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\042\012\124\013\110\027\121\030" +
    "\107\031\241\032\054\033\116\034\047\055\125\060\066" +
    "\001\001\000\002\001\001\000\006\012\243\013\110\001" +
    "\001\000\002\001\001\000\004\016\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\042\012\124\013\110\027\121\030\107\031\111\032\054" +
    "\033\116\034\251\055\125\060\066\001\001\000\010\014" +
    "\141\023\137\052\150\001\001\000\030\005\042\012\124" +
    "\013\110\027\121\030\107\031\253\032\054\033\116\034" +
    "\047\055\125\060\066\001\001\000\002\001\001\000\006" +
    "\012\255\013\110\001\001\000\002\001\001\000\004\016" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\042\012\124\013\110\027\121\030" +
    "\107\031\263\032\054\033\116\034\047\055\125\060\066" +
    "\001\001\000\002\001\001\000\006\012\265\013\110\001" +
    "\001\000\002\001\001\000\004\016\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\042\012\124\013\110\027\121\030\107\031\111\032\054" +
    "\033\116\034\273\055\125\060\066\001\001\000\010\014" +
    "\141\023\137\052\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\042\012\124\013" +
    "\110\027\121\030\107\031\111\032\054\033\116\034\300" +
    "\055\125\060\066\001\001\000\010\014\141\023\137\052" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\042\012\124\013\110\027\121\030\107\031\111\032" +
    "\054\033\116\034\304\055\125\060\066\001\001\000\010" +
    "\014\141\023\137\052\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\042\012\124\013\110\027\121\030\107\031\111\032" +
    "\054\033\116\034\320\055\125\060\066\063\321\001\001" +
    "\000\010\014\141\023\137\052\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\042\012\124\013\110" +
    "\027\121\030\107\031\111\032\054\033\116\034\324\055" +
    "\125\060\066\001\001\000\010\014\141\023\137\052\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\042\012\124\013\110\027\121\030\107" +
    "\031\111\032\054\033\116\034\342\055\125\060\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\042\012" +
    "\124\013\110\027\121\030\107\031\111\032\054\033\116" +
    "\034\320\055\125\060\066\063\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\141" +
    "\023\137\052\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Manejo de errores
    public void syntax_error(Symbol cur_token) {
    System.err.println("Error sintáctico en la línea " + (cur_token.left+1) + 
                       ", columna " + (cur_token.right));
    }
    
    //Errores no recuperables
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.err.println("Se alcanzó el final del archivo.");
        } else {
            System.err.println("Error de sintaxis irrecuperable en la línea " + (cur_token.left + 1) + 
                            ", columna " + (cur_token.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){  
            System.out.println("\nLa tabla contiene estos valores: ");
            System.out.println("Tabla de simbolo: " + key);
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    // Agarra el tipo del token en la tabla de símbolos
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for(String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[2])){
                //System.out.println("Nombre variable:" + partesToken[2]  + " tipo: " + tipo);
                tipo = partesToken[3];
                
            }
        }
        return tipo;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literales_navidenios ::= l_COLACHO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + ":char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_santas ::= SANTACLAUSULA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elfos ::= ELFO1 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // elfos ::= ELFO2 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elfos ::= ELFO3 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elfos ::= ELFO4 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // elfos ::= ELFO5 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elfos ::= ELFO6 
            {
              Object RESULT =null;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = elf;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // renos ::= CUPIENTERO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = gr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object qn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = qn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprUni ::= exprP FINREGALO 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = pr.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }
                else{
                    RESULT = "dir:null";
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprUni ::= grinchYQuien FINREGALO 
            {
              Object RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object gr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = gr.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }
                else{
                    RESULT = "dir:null";
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprP ::= regaloprin 
            {
              Object RESULT =null;
		int prinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prinright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = prin.toString().split(":");
            if(!(partesOperando[1].equals("null"))){
                RESULT = "dir:"+ partesOperando[1];
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprP ::= regaloCompradoLogRel 
            {
              Object RESULT =null;
		int prlogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prlogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prlog = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            //System.out.println("prlog es: "+prlog);
            String[] partesOperando = prlog.toString().split(":");
            if(prlog != null || !(partesOperando[1].equals("null"))){
                RESULT = "dir:"+partesOperando[1];
            }
            else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // regaloprin ::= COMETA operando 
            {
              Object RESULT =null;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando = oper3.toString().split(":");
                if(partesOperando[1].equals("int") || partesOperando[1].equals("float") ){
                    RESULT = "dir:"+partesOperando[1];  
                }else{
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // regaloprin ::= operando renos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando1 = oper1.toString().split(":");
                String[] partesOperando2 = oper2.toString().split(":");

                if(rn.equals("/")){
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("float")){
                            System.out.println("Es división flotante");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) +
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitido: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }   
                else if(rn.equals("//")){
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("int")){
                            System.out.println("Es división entera");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitido: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
                else{  
                    if(partesOperando1[1].equals(partesOperando2[1])){
                        if(partesOperando1[1].equals("int") || partesOperando1[1].equals("float")){
                                RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son del tipo permitidos \n para las operaciones aritméticas: " + partesOperando1[1] + ", " + partesOperando2[1]);
                            RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                        }
                    }     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloprin",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // grinchYQuien ::= unidadNavidenia operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = oper1.toString().split(":");
            if(partesOperando[1].equals("int")){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
                System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) +": "  + "El tipo para su unario no es correcto");
                        RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // regaloCompradoAux ::= operando elfos operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                // Permite expresiones relacionales (==, !=) del mismo tipo, mientras que sean int, float y bool
                if((elf.equals("==") || elf.equals("!="))){
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        //System.out.println("Los tipos de los operadores == y != son los mismos");
                        if ((partesOperando1[1].equals("int")|| partesOperando1[1].equals("float")|| partesOperando1[1].equals("bool"))){
                            //System.out.println("Los tipos int, float y bool son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos, sólo int-float-bool: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
                // Permite expresiones relacionales (<, >, =>, =<) del mismo tipo, mientras que sean int y float
                else{
                    if (partesOperando1[1].equals(partesOperando2[1])){
                        //System.out.println("Los tipos del resto de operadores relacionales son los mismos");
                        if (partesOperando1[1].equals("int") || partesOperando1[1].equals("float")){
                            //System.out.println("Los tipos int, float son permitidos");
                            RESULT = "dir:"+partesOperando1[1];
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                ", columna " + (cur_token.right) +": "  + "Los tipos de los operando no son permitidos i-f: ");
                                 RESULT = "dir:null";
                        }
                    }
                    else{
                        System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos relacionales no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                        RESULT = "dir:null";
                    }
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoAux",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // regaloCompradoLogRel ::= regaloCompradoAux 
            {
              Object RESULT =null;
		int relauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int relauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object relaux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("relaux es:" +relaux);
            if(relaux != null){
                RESULT = relaux;
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoLogRel",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // regaloCompradoLogRel ::= regaloManualAux 
            {
              Object RESULT =null;
		int logauxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logauxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object logaux = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("logaux es:" +logaux);
            if(logaux != null){
                RESULT = logaux;
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloCompradoLogRel",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;
		int melleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int melright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;
		int galleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int galright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = gal;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // regaloManualAux ::= BALTASAR operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = oper1.toString().split(":");
            if(oper1 != null || !(partesOperando[1].equals("null"))){
                RESULT = "dir:"+partesOperando[1];
            }
            else{
                RESULT = "dir:null";
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManualAux",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // regaloManualAux ::= operando logisticadeNavidad operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int logisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int logisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object logis = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando1 = oper1.toString().split(":");
            String[] partesOperando2 = oper2.toString().split(":");
                if(partesOperando1[1].equals(partesOperando2[1])){
                    /*System.out.println("Los operandos de esta operación en la línea" + (cur_token.left+1) + 
                     ", columna " + (cur_token.right) +":"+"son del mismo tipo logico");*/
                    RESULT = "dir:"+partesOperando1[1];
                }else{
                    System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                        ", columna " + (cur_token.right) +": "  + "Los tipos de los operandos lógicos no son iguales: " + partesOperando1[1] + ", " + partesOperando2[1]);
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloManualAux",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operando ::= PERSONA 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<String> ts = listaTablaSimbolos.get(currentHash);
            String tipoId = getTipo(ts,per.toString());
            if(tipoId != "null"){
                RESULT = "dir:"+tipoId;
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operando ::= literales_navidenios 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            String[] partesOperando = lst.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1]; 
            }else{
                RESULT = "dir:null";
            }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operando ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operando ::= accesoArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operando ::= exprP 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = pr.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operando ::= grinchYQuien 
            {
              Object RESULT =null;
		int gqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = gq.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operando ::= ABRECUENTO operando CIERRACUENTO 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            //System.out.println("pr es:" +pr);
            String[] partesOperando = ope.toString().split(":");
            if(partesOperando[1] != "null"){
                RESULT = "dir:"+partesOperando[1];  
            }else{
                RESULT = "dir:null";
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creaRegalo ::= POLO t_santas PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(!(tst.equals("null"))){
                            //System.out.println("Bien declarada la variable sin asignación");
                            RESULT = "dir:"+ tst;
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                            ", columna " + (cur_token.right) + " Mal declarada la variable sin asignación");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creaRegaloAssign ::= POLO t_santas PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                    String[] partesOperando = oper1.toString().split(":");

                    // Se verifica su tipo de la variable
                        if(!(tst.equals("null"))){
                            //System.out.println("tipo de la variable permitido");
                            if(tst.equals(partesOperando[1])){
                                //System.out.println("La variable coincide con su asignación");
                                RESULT = "dir:"+ tst;
                            }
                            else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +":"  + " Tipo de la variable no coincide con su tipo de asignación");
                                RESULT = "dir:null";
                            }
                        }else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo de la variable vacía");
                            RESULT = "dir:null";
                        }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decl_G ::= PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo ::= ABREREGALO CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(reg != null){
                String[] partesOperando = reg.toString().split(":");
                if(!(partesOperando[1].equals("null"))){
                    RESULT = "dir:"+ partesOperando[1];
                }else{
                    RESULT = "dir:null";
                }
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arrayDeclaration ::= POLO t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(tst.equals("int")|| tst.equals("char")){  
                            RESULT = "dir:"+tst;
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de tipo char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arrayDeclaration ::= POLO GALLETAQUIETA t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int gaieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int gaieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object gaie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                     listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        if(tst.equals("int")|| tst.equals("char")){  
                            RESULT = "dir:"+tst;
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de tipo char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arrayInitialization ::= POLO t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lisexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lisexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        String[] partesOperando = lisexpr.toString().split(":");
                        if(tst.equals("int")){  
                            if((partesOperando[1].equals("int"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo INT");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else if(tst.equals("char")){
                            if((partesOperando[1].equals("char"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo CHAR");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arrayInitialization ::= POLO GALLETAQUIETA t_santas PERSONA ABREEMPAQUE l_SANTA CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int gaieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int gaieright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object gaie = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lisexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lisexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lisexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                        String[] partesOperando = lisexpr.toString().split(":");
                        if(tst.equals("int")){  
                            if((partesOperando[1].equals("int"))){
                                if(tst.equals(partesOperando[1])){
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else if(tst.equals("char")){
                            if((partesOperando[1].equals("char"))){
                                if(tst.equals(partesOperando[1])){
                                    System.out.println("Tipo de array y contenido dentro de llaves parejo CHAR");
                                    RESULT = "dir:"+ partesOperando[1];
                                }else{
                                    System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves incorrecto");
                                    RESULT = "dir:null";
                                }
                            }else{
                                System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                    ", columna " + (cur_token.right) +":"  + "Tipo de array y contenido dentro de llaves no concuerda");
                                RESULT = "dir:null";
                            }
                        }
                        else{
                            System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "Tipo iniciación de array incorrecto, sólo puede ser de char o int");
                            RESULT = "dir:null";
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaExpresiones ::= operando 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = oper1.toString().split(":");
                    if(partesOperando[1].equals("int")|| partesOperando[1].equals("char")){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "No llega cargado de ni de tipo int ni char");
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaExpresiones ::= listaExpresiones MUERDAGO operando 
            {
              Object RESULT =null;
		int lsexprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsexprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lsexpr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = oper2.toString().split(":");
                    if(partesOperando[1].equals("int")|| partesOperando[1].equals("char")){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                            ", columna " + (cur_token.right) +":"  + "No llega cargado de ni de tipo int ni char");
                        RESULT = "dir:null";
                    }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // doUntilStmt ::= HACE cuerpo REVISA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doUntilStmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO regaloCompradoLogRel MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO regaloCompradoLogRel MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA operando MUERDAGO regaloCompradoLogRel MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cuer1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuer1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuer1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo duendeStm 
            {
              Object RESULT =null;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object oper2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuer2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuer2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cuer2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti 
            {
              Object RESULT =null;
		int oper3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oper3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object oper3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuer3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuer3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cuer3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo hadaMulti duendeStm 
            {
              Object RESULT =null;
		int oper4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oper4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object oper4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuer4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuer4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cuer4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elfoStm ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // hadaStm ::= HADA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // hadaMulti ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // hadaMulti ::= hadaMulti hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaMulti",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructura ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura ::= doUntilStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ids ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ids ::= ids MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // llamadaNavidenia ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // llamadaNavidenia ::= PERSONA ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamadaNavideniaAux ::= llamadaNavidenia FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavideniaAux",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                // Meterlo a la tabla de símbolos
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if (!listaTablaSimbolos.containsKey(per.toString())) {
                            // La función no existe, entonces se agrega
                            currentHash = per.toString();
                            String tipoTabla = "tipo:function:" + tst.toString();
                            ArrayList<String> funcionMain = new ArrayList<String>();
                            funcionMain.add(tipoTabla);
                            listaTablaSimbolos.put(currentHash, funcionMain);

                            // Se verifica si el valor de retorno es apropiado
                            if ((tst.equals("int") || tst.equals("float") || tst.equals("char") || tst.equals("bool"))) {
                                RESULT = "dir:"+tst;
                            } else {
                                System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                                ", columna " + (cur_token.right) + ": Este tipo de función no es permitido: " + tst);
                                RESULT = "dir:null";
                            }
                        } else {
                            // La función ya existe, se muestra un mensaje de error
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                            ", columna " + (cur_token.right) + ": Esta función ya existe con este nombre");
                            RESULT = "dir:null";     
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas ENTREGAREGALOS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if (listaTablaSimbolos.containsKey("main")) {
                            // Si ya existe un 'main', se muestra un mensaje de error
                            System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                            ", columna " + (cur_token.right) + ": Solo puede haber un 'main' en el programa");
                            RESULT = "dir:null"; 
                        } else {
                            // Si no existe un 'main', se agrega a la tabla de símbolos
                            currentHash = per.toString(); 
                            String tipoTabla = "tipo:main:" + tst.toString();
                            ArrayList<String> funcionMain = new ArrayList<String>();
                            funcionMain.add(tipoTabla);
                            listaTablaSimbolos.put(currentHash, funcionMain);

                            // Se verifica si el valor de retorno es apropiado
                            if ((tst.equals("int"))) {
                                RESULT = "dir:" + tst;
                            } else {
                                System.err.println("Error semántico en la línea " + (cur_token.left+1) + 
                                                ", columna " + (cur_token.right) + ": Este tipo de función no es permitido: " + tst);
                                RESULT = "dir:null";
                            }
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                String[] partesOperando = defin.toString().split(":");
                RESULT = "dir:"+partesOperando[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // definirFunNav ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // definirFunNav ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // definirFunNav ::= error ABREREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 String[] partesOperando1 = defin.toString().split(":");
                 RESULT = "dir:" + partesOperando1[1];
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;
		int definleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int definright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cuerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cuer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String[] partesOperando1 = defin.toString().split(":");
                String[] partesOperando2 = cuer.toString().split(":");
                if(!(partesOperando1[1].equals(partesOperando2[1]))){
                    System.out.println("Error Semántico: El retorno de la función no cumple con su tipo esperado de salida");
                    RESULT = "dir:" + partesOperando1[1];
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // envia ::= ENVIA operando FINREGALO 
            {
              Object RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object oper = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            String[] partesOperando = oper.toString().split(":");
                    // Se verifica si tipo de la variable
                        if((partesOperando[1].equals("null") || partesOperando[1].equals("string"))){
                           System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo de retorno de la función es nulo, revise si esa variable existe");
                                RESULT = "dir:null"; 
                        }else{ 
                            RESULT = "dir:"+ partesOperando[1];
                            //System.out.println("El tipo de retorno es: " + partesOperando[1]);
                         }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // narraNavidad ::= NARRA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int opernarraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opernarraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opernarra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = opernarra.toString().split(":");
                    if(partesOperando[1].equals("int")||partesOperando[1].equals("float") || partesOperando[1].equals("string")){
                        RESULT = "dir:"+ partesOperando[1];
                        System.out.println("tipo del print correcto");
                    }else{
                        RESULT = "dir:null";
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo del print erróneo, revise su tipo");
                                RESULT = "dir:null"; 
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // escuchaNavidad ::= ESCUCHA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;
		int operescuchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operescucharight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object operescucha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                String[] partesOperando = operescucha.toString().split(":");
                    if(partesOperando[1].equals("int")||(partesOperando[1].equals("float"))){
                        RESULT = "dir:"+ partesOperando[1];
                        System.out.println("tipo del read correcto");
                    }else{
                        RESULT = "dir:null";
                        System.err.println("Error semántico en la línea " + (cur_token.left) + 
                                ", columna " + (cur_token.right) +": "  + "Tipo del read erróneo");
                                RESULT = "dir:null"; 
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // poloNorte ::= creaRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // poloNorte ::= creaRegaloAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;
		int narraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int narraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object narra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = narra.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // poloNorte ::= estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // poloNorte ::= envia 
            {
              Object RESULT =null;
		int envleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object env = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = env.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // poloNorte ::= exprUni 
            {
              Object RESULT =null;
		int prUnileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prUniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object prUni = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = prUni.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;
		int escuchaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int escucharight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object escucha = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    String[] partesOperando = escucha.toString().split(":");
                    if(!(partesOperando[1].equals("null"))){
                        RESULT = "dir:"+ partesOperando[1];
                    }else{
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // poloNorte ::= arrayInitialization 
            {
              Object RESULT =null;
		int arzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arzright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arz = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (arz != null) {
                        RESULT = arz;
                    } else {
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // poloNorte ::= arrayDeclaration 
            {
              Object RESULT =null;
		int ardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ard = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if (ard != null) {
                        RESULT = ard;
                    } else {
                        RESULT = "dir:null";
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // poloNorte ::= llamadaNavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // regalo ::= poloNorte 
            {
              Object RESULT =null;
		int poli1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (poli1 != null) {
                    RESULT = poli1;
                } else {
                    RESULT = "dir:null";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int poli2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int poli2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object poli2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = poli2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // regalo ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Empieza el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // navidad ::= NT$0 pbolsanavideniaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                imprimirTablaSimbolos();
                System.out.println("Termina el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
