
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ParserLexer;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\006\003\000\002\006\003\000\002\005\003\000" +
    "\002\005\003\000\002\012\007\000\002\013\007\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\053\005\000\002\026\004\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\032\004\000\002\033\003\000" +
    "\002\033\003\000\002\034\004\000\002\034\005\000\002" +
    "\016\003\000\002\016\003\000\002\015\004\000\002\035" +
    "\003\000\002\035\003\000\002\036\005\000\002\017\003" +
    "\000\002\017\003\000\002\037\004\000\002\037\005\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\005\000\002\030\006\000\002\044\010\000\002\044\004" +
    "\000\002\060\006\000\002\022\005\000\002\066\011\000" +
    "\002\066\004\000\002\067\014\000\002\067\004\000\002" +
    "\070\003\000\002\070\005\000\002\065\006\000\002\065" +
    "\011\000\002\045\007\000\002\052\011\000\002\046\015" +
    "\000\002\046\016\000\002\046\017\000\002\054\007\000" +
    "\002\055\007\000\002\056\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\064\003\000\002\064\005" +
    "\000\002\062\005\000\002\062\006\000\002\063\004\000" +
    "\002\023\004\000\002\023\003\000\002\024\003\000\002" +
    "\024\005\000\002\061\005\000\002\025\005\000\002\025" +
    "\006\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\007\003\000\002\007\004\000\002\011\003\000" +
    "\002\011\004\000\002\071\002\000\002\010\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\021\003\000\002\021\004\000\002\051\003\000\002" +
    "\051\003\000\002\050\003\000\002\050\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\003\uff9c\004\uff9c\001\002\000\006\003" +
    "\011\004\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\002\uff9e\003\uff9e\004\uff9e\001" +
    "\002\000\020\060\262\061\267\062\266\063\263\064\265" +
    "\065\264\072\270\001\002\000\010\055\313\056\312\057" +
    "\311\001\002\000\004\051\277\001\002\000\012\002\uffa0" +
    "\003\uffa0\004\uffa0\055\017\001\002\000\010\002\uff9b\003" +
    "\011\004\010\001\002\000\010\002\uff9d\003\uff9d\004\uff9d" +
    "\001\002\000\010\002\uff9f\003\uff9f\004\uff9f\001\002\000" +
    "\060\003\063\007\033\010\026\011\045\012\046\013\027" +
    "\014\035\024\060\025\102\027\054\034\100\035\031\036" +
    "\040\037\053\040\101\041\052\043\074\044\062\047\064" +
    "\050\024\051\065\070\047\071\072\001\002\000\046\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\045\uffde\046" +
    "\uffde\052\uffde\054\uffde\057\uffde\067\uffde\001\002\000\062" +
    "\003\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\024\uffb2\025\uffb2\027\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\043\uffb2\044\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\056\uffb2\070\uffb2\071\uffb2\001\002\000\062" +
    "\003\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\024\uff90\025\uff90\027\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\043\uff90\044\uff90\047\uff90\050" +
    "\uff90\051\uff90\056\uff90\070\uff90\071\uff90\001\002\000\062" +
    "\003\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\024\uffb5\025\uffb5\027\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\056\uffb5\070\uffb5\071\uffb5\001\002\000\020" +
    "\060\262\061\267\062\266\063\263\064\265\065\264\072" +
    "\270\001\002\000\046\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\045\uffd0\046\uffd0\052\uffd0\054\uffd0\057\uffd0" +
    "\067\uffd0\001\002\000\046\016\000\017\000\020\000\021" +
    "\000\022\000\023\000\026\000\027\000\030\000\031\000" +
    "\032\000\033\000\045\000\046\000\052\000\054\000\057" +
    "\000\067\000\001\002\000\046\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\045\ufffd\046\ufffd\052\ufffd\054\ufffd" +
    "\057\ufffd\067\ufffd\001\002\000\062\003\uffb3\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\043\uffb3\044\uffb3\047\uffb3\050\uffb3\051\uffb3\056\uffb3" +
    "\070\uffb3\071\uffb3\001\002\000\004\051\256\001\002\000" +
    "\062\003\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\024\uffb1\025\uffb1\027\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\056\uffb1\070\uffb1\071\uffb1\001\002\000" +
    "\044\015\253\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\045\uffd1\046\uffd1\051\112\053\111\001\002\000\036" +
    "\016\137\017\135\020\134\021\133\022\131\023\130\026" +
    "\136\027\125\030\123\031\141\032\140\033\126\045\124" +
    "\046\127\001\002\000\046\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\045\ufffc\046\ufffc\052\ufffc\054\ufffc\057" +
    "\ufffc\067\ufffc\001\002\000\046\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\045\uffd8\046\uffd8\052\uffd8\054\uffd8" +
    "\057\uffd8\067\uffd8\001\002\000\062\003\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\043\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\056\uffb4" +
    "\070\uffb4\071\uffb4\001\002\000\004\055\017\001\002\000" +
    "\062\003\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\024\uff97\025\uff97\027\uff97\034\uff97\035\uff97\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\043\uff97\044\uff97\047\uff97" +
    "\050\uff97\051\uff97\056\uff97\070\uff97\071\uff97\001\002\000" +
    "\062\003\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\024\uffb0\025\uffb0\027\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\056\uffb0\070\uffb0\071\uffb0\001\002\000" +
    "\046\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\045" +
    "\uffd7\046\uffd7\052\uffd7\054\uffd7\057\uffd7\067\uffd7\001\002" +
    "\000\062\003\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\024\uff9a\025\uff9a\027\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\043\uff9a\044\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\056\uff9a\070\uff9a\071\uff9a\001\002" +
    "\000\046\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\045\uffff\046\uffff\052\uffff\054\uffff\057\uffff\067\uffff\001" +
    "\002\000\046\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\045\ufffe\046\ufffe\052\ufffe\054\ufffe\057\ufffe\067\ufffe" +
    "\001\002\000\004\051\246\001\002\000\062\003\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\024\uff92" +
    "\025\uff92\027\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\043\uff92\044\uff92\047\uff92\050\uff92\051\uff92" +
    "\056\uff92\070\uff92\071\uff92\001\002\000\040\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\045\uffcf\046\uffcf\057" +
    "\245\001\002\000\004\055\017\001\002\000\004\051\200" +
    "\001\002\000\030\007\107\010\026\011\045\012\046\013" +
    "\027\014\035\024\060\025\102\027\054\047\064\051\065" +
    "\001\002\000\062\003\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\024\uff96\025\uff96\027\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\043\uff96\044" +
    "\uff96\047\uff96\050\uff96\051\uff96\056\uff96\070\uff96\071\uff96" +
    "\001\002\000\046\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\045\uffce\046\uffce\052\uffce\054\uffce\057\uffce\067" +
    "\uffce\001\002\000\046\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\045\uffcc\046\uffcc\052\uffcc\054\uffcc\057\uffcc" +
    "\067\uffcc\001\002\000\030\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\024\uffdb\025\uffdb\027\uffdb\047\uffdb" +
    "\051\uffdb\001\002\000\062\003\uff94\007\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\024\uff94\025\uff94\027\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043" +
    "\uff94\044\uff94\047\uff94\050\uff94\051\uff94\056\uff94\070\uff94" +
    "\071\uff94\001\002\000\004\057\176\001\002\000\004\057" +
    "\175\001\002\000\030\007\107\010\026\011\045\012\046" +
    "\013\027\014\035\024\060\025\102\027\054\047\064\051" +
    "\065\001\002\000\030\007\107\010\026\011\045\012\046" +
    "\013\027\014\035\024\060\025\102\027\054\047\064\051" +
    "\065\001\002\000\062\003\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\024\uff95\025\uff95\027\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\043\uff95" +
    "\044\uff95\047\uff95\050\uff95\051\uff95\056\uff95\070\uff95\071" +
    "\uff95\001\002\000\062\003\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\024\uff99\025\uff99\027\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99" +
    "\044\uff99\047\uff99\050\uff99\051\uff99\056\uff99\070\uff99\071" +
    "\uff99\001\002\000\062\003\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\014\uff98\024\uff98\025\uff98\027\uff98\034" +
    "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\043\uff98" +
    "\044\uff98\047\uff98\050\uff98\051\uff98\056\uff98\070\uff98\071" +
    "\uff98\001\002\000\040\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\045\uffcd\046\uffcd\057\171\001\002\000\004" +
    "\051\165\001\002\000\062\003\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\013\uff91\014\uff91\024\uff91\025\uff91\027\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\043" +
    "\uff91\044\uff91\047\uff91\050\uff91\051\uff91\056\uff91\070\uff91" +
    "\071\uff91\001\002\000\030\007\107\010\026\011\045\012" +
    "\046\013\027\014\035\024\060\025\102\027\054\047\064" +
    "\051\065\001\002\000\030\007\107\010\026\011\045\012" +
    "\046\013\027\014\035\024\060\025\102\027\054\047\064" +
    "\051\065\001\002\000\046\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\045\uffdf\046\uffdf\052\uffdf\054\uffdf\057" +
    "\uffdf\067\uffdf\001\002\000\062\003\063\007\033\010\026" +
    "\011\045\012\046\013\027\014\035\024\060\025\102\027" +
    "\054\034\100\035\031\036\040\037\053\040\101\041\052" +
    "\043\074\044\062\047\064\050\024\051\065\056\161\070" +
    "\047\071\072\001\002\000\004\051\154\001\002\000\004" +
    "\051\104\001\002\000\030\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\024\uffda\025\uffda\027\uffda\047\uffda" +
    "\051\uffda\001\002\000\062\003\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\024\uff93\025\uff93\027\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\043" +
    "\uff93\044\uff93\047\uff93\050\uff93\051\uff93\056\uff93\070\uff93" +
    "\071\uff93\001\002\000\030\007\107\010\026\011\045\012" +
    "\046\013\027\014\035\024\060\025\102\027\054\047\064" +
    "\051\065\001\002\000\046\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\045\uffcd\046\uffcd\052\uffcd\054\uffcd\057" +
    "\uffcd\067\uffcd\001\002\000\040\016\137\017\135\020\134" +
    "\021\133\022\131\023\130\026\136\027\125\030\123\031" +
    "\141\032\140\033\126\045\124\046\127\052\152\001\002" +
    "\000\052\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\045\uffd1\046\uffd1\051\112\052\uffd1\053\111\054\uffd1\057" +
    "\uffd1\067\uffd1\001\002\000\046\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\045\uffcf\046\uffcf\052\uffcf\054\uffcf" +
    "\057\uffcf\067\uffcf\001\002\000\030\007\107\010\026\011" +
    "\045\012\046\013\027\014\035\024\060\025\102\027\054" +
    "\047\064\051\065\001\002\000\032\007\107\010\026\011" +
    "\045\012\046\013\027\014\035\024\060\025\102\027\054" +
    "\047\064\051\065\052\113\001\002\000\046\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\045\uffad\046\uffad\052" +
    "\uffad\054\uffad\057\uffad\067\uffad\001\002\000\042\016\137" +
    "\017\135\020\134\021\133\022\131\023\130\026\136\027" +
    "\125\030\123\031\141\032\140\033\126\045\124\046\127" +
    "\052\uffaf\067\uffaf\001\002\000\006\052\116\067\117\001" +
    "\002\000\046\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\045\uffac\046\uffac\052\uffac\054\uffac\057\uffac\067\uffac" +
    "\001\002\000\030\007\107\010\026\011\045\012\046\013" +
    "\027\014\035\024\060\025\102\027\054\047\064\051\065" +
    "\001\002\000\042\016\137\017\135\020\134\021\133\022" +
    "\131\023\130\026\136\027\125\030\123\031\141\032\140" +
    "\033\126\045\124\046\127\052\uffae\067\uffae\001\002\000" +
    "\030\007\107\010\026\011\045\012\046\013\027\014\035" +
    "\024\060\025\102\027\054\047\064\051\065\001\002\000" +
    "\030\007\107\010\026\011\045\012\046\013\027\014\035" +
    "\024\060\025\102\027\054\047\064\051\065\001\002\000" +
    "\030\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\024\uffe4\025\uffe4\027\uffe4\047\uffe4\051\uffe4\001\002\000" +
    "\030\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\047\uffd5\051\uffd5\001\002\000" +
    "\030\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\047\uffe6\051\uffe6\001\002\000" +
    "\030\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\024\uffe1\025\uffe1\027\uffe1\047\uffe1\051\uffe1\001\002\000" +
    "\030\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\047\uffd4\051\uffd4\001\002\000" +
    "\030\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\024\uffe7\025\uffe7\027\uffe7\047\uffe7\051\uffe7\001\002\000" +
    "\030\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\024\uffe8\025\uffe8\027\uffe8\047\uffe8\051\uffe8\001\002\000" +
    "\030\007\107\010\026\011\045\012\046\013\027\014\035" +
    "\024\060\025\102\027\054\047\064\051\065\001\002\000" +
    "\030\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\047\uffe9\051\uffe9\001\002\000" +
    "\030\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\024\uffea\025\uffea\027\uffea\047\uffea\051\uffea\001\002\000" +
    "\030\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\024\uffeb\025\uffeb\027\uffeb\047\uffeb\051\uffeb\001\002\000" +
    "\030\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\024\uffe5\025\uffe5\027\uffe5\047\uffe5\051\uffe5\001\002\000" +
    "\030\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\024\uffec\025\uffec\027\uffec\047\uffec\051\uffec\001\002\000" +
    "\030\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\024\uffe2\025\uffe2\027\uffe2\047\uffe2\051\uffe2\001\002\000" +
    "\030\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\024\uffe3\025\uffe3\027\uffe3\047\uffe3\051\uffe3\001\002\000" +
    "\046\016\137\017\135\020\134\021\133\022\131\023\130" +
    "\026\136\027\125\030\123\031\141\032\140\033\126\045" +
    "\124\046\127\052\uffd6\054\uffd6\057\uffd6\067\uffd6\001\002" +
    "\000\046\016\137\017\135\020\134\021\133\022\131\023" +
    "\130\026\136\027\125\030\123\031\141\032\140\033\126" +
    "\045\124\046\127\052\uffd2\054\uffd2\057\uffd2\067\uffd2\001" +
    "\002\000\046\016\137\017\135\020\134\021\133\022\131" +
    "\023\130\026\136\027\125\030\123\031\141\032\140\033" +
    "\126\045\124\046\127\052\uffdc\054\uffdc\057\uffdc\067\uffdc" +
    "\001\002\000\040\016\137\017\135\020\134\021\133\022" +
    "\131\023\130\026\136\027\125\030\123\031\141\032\140" +
    "\033\126\045\124\046\127\054\146\001\002\000\050\015" +
    "\147\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\045" +
    "\uffbf\046\uffbf\052\uffbf\054\uffbf\057\uffbf\067\uffbf\001\002" +
    "\000\030\007\107\010\026\011\045\012\046\013\027\014" +
    "\035\024\060\025\102\027\054\047\064\051\065\001\002" +
    "\000\040\016\137\017\135\020\134\021\133\022\131\023" +
    "\130\026\136\027\125\030\123\031\141\032\140\033\126" +
    "\045\124\046\127\057\151\001\002\000\046\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\045\uffbe\046\uffbe\052" +
    "\uffbe\054\uffbe\057\uffbe\067\uffbe\001\002\000\004\055\017" +
    "\001\002\000\062\003\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\024\uffbd\025\uffbd\027\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\056\uffbd\070\uffbd\071\uffbd" +
    "\001\002\000\030\007\107\010\026\011\045\012\046\013" +
    "\027\014\035\024\060\025\102\027\054\047\064\051\065" +
    "\001\002\000\040\016\137\017\135\020\134\021\133\022" +
    "\131\023\130\026\136\027\125\030\123\031\141\032\140" +
    "\033\126\045\124\046\127\052\156\001\002\000\004\055" +
    "\017\001\002\000\062\003\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\024\uffb8\025\uffb8\027\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\044\uffb8\047\uffb8\050\uffb8\051\uffb8\056\uffb8\070\uffb8\071" +
    "\uffb8\001\002\000\062\003\uff8f\007\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\024\uff8f\025\uff8f\027\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f" +
    "\044\uff8f\047\uff8f\050\uff8f\051\uff8f\056\uff8f\070\uff8f\071" +
    "\uff8f\001\002\000\070\002\uffc6\003\uffc6\004\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\024\uffc6\025" +
    "\uffc6\027\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\056\uffc6\070\uffc6\071\uffc6\001\002\000\046\016\137" +
    "\017\135\020\134\021\133\022\131\023\130\026\136\027" +
    "\125\030\123\031\141\032\140\033\126\045\124\046\127" +
    "\052\uffd9\054\uffd9\057\uffd9\067\uffd9\001\002\000\040\016" +
    "\137\017\135\020\134\021\133\022\131\023\130\026\136" +
    "\027\125\030\123\031\141\032\140\033\126\045\124\046" +
    "\127\057\164\001\002\000\062\003\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\024\uffee\025\uffee\027" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\043\uffee\044\uffee\047\uffee\050\uffee\051\uffee\056\uffee\070" +
    "\uffee\071\uffee\001\002\000\030\007\107\010\026\011\045" +
    "\012\046\013\027\014\035\024\060\025\102\027\054\047" +
    "\064\051\065\001\002\000\040\016\137\017\135\020\134" +
    "\021\133\022\131\023\130\026\136\027\125\030\123\031" +
    "\141\032\140\033\126\045\124\046\127\052\167\001\002" +
    "\000\004\057\170\001\002\000\062\003\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\043\ufff6\044\ufff6\047\ufff6\050\ufff6\051\ufff6\056\ufff6" +
    "\070\ufff6\071\ufff6\001\002\000\062\003\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\043\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\056\uffe0" +
    "\070\uffe0\071\uffe0\001\002\000\040\016\137\017\135\020" +
    "\134\021\133\022\131\023\130\026\136\027\125\030\123" +
    "\031\141\032\140\033\126\045\124\046\127\052\173\001" +
    "\002\000\046\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\045\uffcb\046\uffcb\052\uffcb\054\uffcb\057\uffcb\067\uffcb" +
    "\001\002\000\046\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\045\uffd3\046\uffd3\052\uffd3\054\uffd3\057\uffd3\067" +
    "\uffd3\001\002\000\062\003\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\024\uffc8\025\uffc8\027\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\047\uffc8\050\uffc8\051\uffc8\056\uffc8\070\uffc8\071" +
    "\uffc8\001\002\000\062\003\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\024\uffed\025\uffed\027\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\056\uffed\070\uffed\071" +
    "\uffed\001\002\000\046\016\137\017\135\020\134\021\133" +
    "\022\131\023\130\026\uffdd\027\uffdd\030\123\031\141\032" +
    "\140\033\126\045\124\046\127\052\uffdd\054\uffdd\057\uffdd" +
    "\067\uffdd\001\002\000\010\007\202\050\201\061\203\001" +
    "\002\000\004\061\225\001\002\000\004\015\215\001\002" +
    "\000\004\007\204\001\002\000\004\015\205\001\002\000" +
    "\004\010\206\001\002\000\004\067\207\001\002\000\030" +
    "\007\107\010\026\011\045\012\046\013\027\014\035\024" +
    "\060\025\102\027\054\047\064\051\065\001\002\000\040" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\045\uffde" +
    "\046\uffde\067\211\001\002\000\006\024\060\025\102\001" +
    "\002\000\004\052\213\001\002\000\004\055\017\001\002" +
    "\000\062\003\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\024\uffba\025\uffba\027\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\044\uffba\047" +
    "\uffba\050\uffba\051\uffba\056\uffba\070\uffba\071\uffba\001\002" +
    "\000\004\010\216\001\002\000\004\067\217\001\002\000" +
    "\030\007\107\010\026\011\045\012\046\013\027\014\035" +
    "\024\060\025\102\027\054\047\064\051\065\001\002\000" +
    "\040\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\045" +
    "\uffde\046\uffde\067\221\001\002\000\006\024\060\025\102" +
    "\001\002\000\004\052\223\001\002\000\004\055\017\001" +
    "\002\000\062\003\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\024\uffbb\025\uffbb\027\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\056\uffbb\070\uffbb\071\uffbb\001" +
    "\002\000\004\007\226\001\002\000\004\015\227\001\002" +
    "\000\030\007\107\010\026\011\045\012\046\013\027\014" +
    "\035\024\060\025\102\027\054\047\064\051\065\001\002" +
    "\000\040\016\137\017\135\020\134\021\133\022\131\023" +
    "\130\026\136\027\125\030\123\031\141\032\140\033\126" +
    "\045\124\046\127\067\231\001\002\000\030\007\107\010" +
    "\026\011\045\012\046\013\027\014\035\024\060\025\102" +
    "\027\054\047\064\051\065\001\002\000\040\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\045\uffde\046\uffde\067" +
    "\233\001\002\000\006\024\060\025\102\001\002\000\004" +
    "\052\235\001\002\000\004\055\017\001\002\000\062\003" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\024\uffb9\025\uffb9\027\uffb9\034\uffb9\035\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\056\uffb9\070\uffb9\071\uffb9\001\002\000\004\042" +
    "\240\001\002\000\004\051\241\001\002\000\030\007\107" +
    "\010\026\011\045\012\046\013\027\014\035\024\060\025" +
    "\102\027\054\047\064\051\065\001\002\000\040\016\137" +
    "\017\135\020\134\021\133\022\131\023\130\026\136\027" +
    "\125\030\123\031\141\032\140\033\126\045\124\046\127" +
    "\052\243\001\002\000\004\057\244\001\002\000\062\003" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\024\uffbc\025\uffbc\027\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\043\uffbc\044\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\056\uffbc\070\uffbc\071\uffbc\001\002\000\062\003" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\024\uffab\025\uffab\027\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\043\uffab\044\uffab\047\uffab\050\uffab" +
    "\051\uffab\056\uffab\070\uffab\071\uffab\001\002\000\030\007" +
    "\107\010\026\011\045\012\046\013\027\014\035\024\060" +
    "\025\102\027\054\047\064\051\065\001\002\000\040\016" +
    "\137\017\135\020\134\021\133\022\131\023\130\026\136" +
    "\027\125\030\123\031\141\032\140\033\126\045\124\046" +
    "\127\052\250\001\002\000\004\057\251\001\002\000\062" +
    "\003\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\024\ufff7\025\ufff7\027\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\056\ufff7\070\ufff7\071\ufff7\001\002\000\062" +
    "\003\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\024\uffb6\025\uffb6\027\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\056\uffb6\070\uffb6\071\uffb6\001\002\000\030" +
    "\007\107\010\026\011\045\012\046\013\027\014\035\024" +
    "\060\025\102\027\054\047\064\051\065\001\002\000\040" +
    "\016\137\017\135\020\134\021\133\022\131\023\130\026" +
    "\136\027\125\030\123\031\141\032\140\033\126\045\124" +
    "\046\127\057\255\001\002\000\062\003\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\024\uffc7\025\uffc7" +
    "\027\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\043\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7\056\uffc7" +
    "\070\uffc7\071\uffc7\001\002\000\030\007\107\010\026\011" +
    "\045\012\046\013\027\014\035\024\060\025\102\027\054" +
    "\047\064\051\065\001\002\000\040\016\137\017\135\020" +
    "\134\021\133\022\131\023\130\026\136\027\125\030\123" +
    "\031\141\032\140\033\126\045\124\046\127\052\260\001" +
    "\002\000\004\055\017\001\002\000\062\003\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\056" +
    "\uffb7\070\uffb7\071\uffb7\001\002\000\004\007\ufff5\001\002" +
    "\000\004\007\ufff2\001\002\000\004\007\ufff0\001\002\000" +
    "\004\007\ufff1\001\002\000\004\007\ufff3\001\002\000\004" +
    "\007\ufff4\001\002\000\004\007\uffef\001\002\000\004\007" +
    "\272\001\002\000\006\015\274\057\273\001\002\000\062" +
    "\003\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\024\uffca\025\uffca\027\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca\047\uffca\050" +
    "\uffca\051\uffca\056\uffca\070\uffca\071\uffca\001\002\000\030" +
    "\007\107\010\026\011\045\012\046\013\027\014\035\024" +
    "\060\025\102\027\054\047\064\051\065\001\002\000\040" +
    "\016\137\017\135\020\134\021\133\022\131\023\130\026" +
    "\136\027\125\030\123\031\141\032\140\033\126\045\124" +
    "\046\127\057\276\001\002\000\062\003\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\024\uffc9\025\uffc9" +
    "\027\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\043\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\056\uffc9" +
    "\070\uffc9\071\uffc9\001\002\000\024\007\300\052\303\060" +
    "\262\061\267\062\266\063\263\064\265\065\264\072\270" +
    "\001\002\000\006\052\uffa9\067\uffa9\001\002\000\004\007" +
    "\310\001\002\000\006\052\uffa8\067\uffa8\001\002\000\012" +
    "\002\uffa5\003\uffa5\004\uffa5\055\uffa5\001\002\000\006\052" +
    "\305\067\306\001\002\000\012\002\uffa4\003\uffa4\004\uffa4" +
    "\055\uffa4\001\002\000\022\007\300\060\262\061\267\062" +
    "\266\063\263\064\265\065\264\072\270\001\002\000\006" +
    "\052\uffa7\067\uffa7\001\002\000\006\052\uffaa\067\uffaa\001" +
    "\002\000\012\002\uffa3\003\uffa3\004\uffa3\055\uffa3\001\002" +
    "\000\012\002\uffa2\003\uffa2\004\uffa2\055\uffa2\001\002\000" +
    "\012\002\uffa1\003\uffa1\004\uffa1\055\uffa1\001\002\000\004" +
    "\007\315\001\002\000\004\051\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\006\010\004\071\003\001\001\000\012\007" +
    "\006\011\013\025\012\061\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\015" +
    "\001\001\000\010\007\014\025\012\061\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\002\021\004\024" +
    "\012\040\013\102\015\056\016\074\021\076\026\047\030" +
    "\066\031\054\032\060\033\070\034\075\035\017\036\035" +
    "\037\042\040\033\044\067\045\022\046\036\052\027\053" +
    "\065\054\020\055\031\056\041\060\043\062\050\063\072" +
    "\065\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\121\027\131\057\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\236\001\001\000\002\001\001\000\030" +
    "\004\024\015\056\016\074\033\104\034\075\035\017\036" +
    "\035\037\042\040\176\062\107\065\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\024\015\056\016\074\033\104\034\075\035" +
    "\017\036\035\037\042\040\173\062\107\065\055\001\001" +
    "\000\030\004\024\015\056\016\074\033\104\034\075\035" +
    "\017\036\035\037\042\040\171\062\107\065\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\024\015\056\016\074\033\104\034\075\035\017\036" +
    "\035\037\042\040\162\062\107\065\055\001\001\000\030" +
    "\004\024\015\056\016\074\033\104\034\075\035\017\036" +
    "\035\037\042\040\161\062\107\065\055\001\001\000\002" +
    "\001\001\000\072\002\157\004\024\012\040\013\102\015" +
    "\056\016\074\026\047\030\066\031\054\032\060\033\070" +
    "\034\075\035\017\036\035\037\042\040\033\044\067\045" +
    "\022\046\036\052\027\053\065\054\020\055\031\056\041" +
    "\060\043\062\050\063\072\065\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\004\024\015\056\016\074\033\104\034\075\035" +
    "\017\036\035\037\042\040\105\062\107\065\055\001\001" +
    "\000\002\001\001\000\010\017\121\027\131\057\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\024" +
    "\015\056\016\074\033\104\034\075\035\017\036\035\037" +
    "\042\040\144\062\107\065\055\001\001\000\032\004\024" +
    "\015\056\016\074\033\104\034\075\035\017\036\035\037" +
    "\042\040\113\062\107\064\114\065\055\001\001\000\002" +
    "\001\001\000\010\017\121\027\131\057\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\024\015\056" +
    "\016\074\033\104\034\075\035\017\036\035\037\042\040" +
    "\117\062\107\065\055\001\001\000\010\017\121\027\131" +
    "\057\120\001\001\000\030\004\024\015\056\016\074\033" +
    "\104\034\075\035\017\036\035\037\042\040\143\062\107" +
    "\065\055\001\001\000\030\004\024\015\056\016\074\033" +
    "\104\034\075\035\017\036\035\037\042\040\142\062\107" +
    "\065\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\024\015\056\016" +
    "\074\033\104\034\075\035\017\036\035\037\042\040\141" +
    "\062\107\065\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\121\027" +
    "\131\057\120\001\001\000\010\017\121\027\131\057\120" +
    "\001\001\000\010\017\121\027\131\057\120\001\001\000" +
    "\010\017\121\027\131\057\120\001\001\000\002\001\001" +
    "\000\030\004\024\015\056\016\074\033\104\034\075\035" +
    "\017\036\035\037\042\040\147\062\107\065\055\001\001" +
    "\000\010\017\121\027\131\057\120\001\001\000\002\001" +
    "\001\000\004\022\152\001\001\000\002\001\001\000\030" +
    "\004\024\015\056\016\074\033\104\034\075\035\017\036" +
    "\035\037\042\040\154\062\107\065\055\001\001\000\010" +
    "\017\121\027\131\057\120\001\001\000\004\022\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\121\027\131\057\120\001\001\000\010\017" +
    "\121\027\131\057\120\001\001\000\002\001\001\000\030" +
    "\004\024\015\056\016\074\033\104\034\075\035\017\036" +
    "\035\037\042\040\165\062\107\065\055\001\001\000\010" +
    "\017\121\027\131\057\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\121\027\131" +
    "\057\120\001\001\000\002\001\001\000\010\017\121\027" +
    "\131\057\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\121\027\131\057\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\024\015\056\016\074\033\104\034\075\035\207" +
    "\036\035\037\042\040\033\062\107\065\055\001\001\000" +
    "\002\001\001\000\006\015\211\016\074\001\001\000\002" +
    "\001\001\000\004\022\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\024\015\056" +
    "\016\074\033\104\034\075\035\217\036\035\037\042\040" +
    "\033\062\107\065\055\001\001\000\002\001\001\000\006" +
    "\015\221\016\074\001\001\000\002\001\001\000\004\022" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\024\015\056\016\074\033\104\034" +
    "\075\035\017\036\035\037\042\040\227\062\107\065\055" +
    "\001\001\000\010\017\121\027\131\057\120\001\001\000" +
    "\030\004\024\015\056\016\074\033\104\034\075\035\231" +
    "\036\035\037\042\040\033\062\107\065\055\001\001\000" +
    "\002\001\001\000\006\015\233\016\074\001\001\000\002" +
    "\001\001\000\004\022\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\024\015\056" +
    "\016\074\033\104\034\075\035\017\036\035\037\042\040" +
    "\241\062\107\065\055\001\001\000\010\017\121\027\131" +
    "\057\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\024\015\056\016\074\033\104" +
    "\034\075\035\017\036\035\037\042\040\246\062\107\065" +
    "\055\001\001\000\010\017\121\027\131\057\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\024\015\056\016\074\033\104\034\075\035\017" +
    "\036\035\037\042\040\253\062\107\065\055\001\001\000" +
    "\010\017\121\027\131\057\120\001\001\000\002\001\001" +
    "\000\030\004\024\015\056\016\074\033\104\034\075\035" +
    "\017\036\035\037\042\040\256\062\107\065\055\001\001" +
    "\000\010\017\121\027\131\057\120\001\001\000\004\022" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\024\015" +
    "\056\016\074\033\104\034\075\035\017\036\035\037\042" +
    "\040\274\062\107\065\055\001\001\000\010\017\121\027" +
    "\131\057\120\001\001\000\002\001\001\000\010\003\300" +
    "\023\301\024\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\300\023\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    //Conectar parser a un escaner
    LexerJflex lex;

    @SuppressWarnings(value = { "deprecation" })
    public parser(LexerJflex lex){
        this.lex = lex;
        this.symbolFactory = new DefaultSymbolFactory();
    }

    //Manejo de errores
    public void syntax_error(Symbol cur_token) {
    System.err.println("Error sintáctico en la línea " + (cur_token.left+1) + 
                       ", columna " + (cur_token.right));
    }
    
    //Errores no recuperables
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.err.println("Se alcanzó el final del archivo.");
        } else {
            System.err.println("Error de sintaxis irrecuperable en la línea " + (cur_token.left + 1) + 
                            ", columna " + (cur_token.right + 1) + ". Se terminó el archivo.");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    // Definición del HashMap
    HashMap<String, ArrayList<String>> listaTablaSimbolos = new HashMap<String, ArrayList<String>>();
    String currentHash;
     
    // Función para imprimir la tabla de símbolos
    public void imprimirTablaSimbolos(){
        for (String key: listaTablaSimbolos.keySet()){
            System.out.println("Tabla de simbolo: " + key);
            System.out.println("La tabla contiene estos valores: ");
            for(String item: listaTablaSimbolos.get(key)){
                System.out.println(item);
            }
            System.out.println("");
        }
    }

    // Agarra el tipo del token en la tabla de símbolos
    public String getTipo(ArrayList<String> tablasSimbolos, String id){
        String tipo = "null";
        for(String token : tablasSimbolos){
            String[] partesToken = token.split(":");
            if(id.equals(partesToken[2])){
                tipo = partesToken[3];
            }
        }
        System.out.println("tipo: "+tipo);
        return tipo;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pNocheBuena EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // literales_navidenios ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literales_navidenios ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literales_navidenios ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literales_navidenios ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literales_navidenios ::= l_COLACHO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_navidenios",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal_nums ::= l_SANTA 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_nums",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literal_nums ::= l_PASCUERO 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_nums",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal_no_nums ::= l_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_no_nums",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal_no_nums ::= l_PAPANOEL 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = lst + "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_no_nums",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // narraNavidad ::= NARRA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("narraNavidad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // escuchaNavidad ::= ESCUCHA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("escuchaNavidad",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_santas ::= SANTACLAUS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t_santas ::= PAPANOEL 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t_santas ::= SANNICOLAS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t_santas ::= SINTERKLASS 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t_santas ::= VIEJITOPASCUERO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // t_santas ::= COLACHO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // t_santas ::= SANTACLAUSULA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tst;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_santas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // envia ::= ENVIA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("envia",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // corta ::= CORTA FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("corta",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elfos ::= ELFO1 
            {
              Object RESULT =null;
		int elfgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elfos ::= ELFO2 
            {
              Object RESULT =null;
		int elfgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elfos ::= ELFO3 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elfos ::= ELFO4 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elfos ::= ELFO5 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elfos ::= ELFO6 
            {
              Object RESULT =null;
		int elfnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elfnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elfn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // renos ::= COMETA 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // renos ::= RODOLFO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // renos ::= BAILARIN 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // renos ::= CUPIDO 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // renos ::= DONNER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // renos ::= DASHER 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = rn;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renos",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exprUni ::= exprP FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprUni",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprP ::= exprArit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprP ::= exprRelLog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprArit ::= COMETA operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprArit ::= operando renos operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unidadNavidenia ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unidadNavidenia ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unidadNavidenia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // grinchYQuien ::= unidadNavidenia operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grinchYQuien",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprRelLog ::= exprRelAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprRelLog ::= exprLogAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelLog",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprRelAux ::= operando elfos operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelAux",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // logisticadeNavidad ::= MELCHOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logisticadeNavidad ::= GASPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logisticadeNavidad",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprLogAux ::= BALTASAR operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprLogAux ::= operando logisticadeNavidad operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogAux",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operando ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operando ::= literales_navidenios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operando ::= llamadaNavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operando ::= accesoArray 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operando ::= exprP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operando ::= grinchYQuien 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operando ::= ABRECUENTO operando CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creaRegalo ::= POLO t_santas PERSONA FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegalo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // creaRegaloAssign ::= POLO t_santas PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                listaTablaSimbolos.get(currentHash).add("tipo:Local:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // creaRegaloAssign ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creaRegaloAssign",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decl_G ::= PERSONA ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_G",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo ::= ABREREGALO regalo CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arrayDeclaration ::= POLO t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arrayDeclaration ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arrayInitialization ::= t_santas PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA ABREREGALO listaExpresiones CIERRAREGALO FINREGALO 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arrayInitialization ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitialization",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaExpresiones ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listaExpresiones ::= listaExpresiones MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // accesoArray ::= PERSONA ABREEMPAQUE operando CIERRAEMPAQUE ENTREGA operando FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoArray",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // whileStmt ::= ENVOLTURA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileStmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // doWhileStmt ::= HACE cuerpo REVISA ABRECUENTO operando CIERRACUENTO FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // forStmt ::= ENVUELVE ABRECUENTO PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // forStmt ::= ENVUELVE ABRECUENTO PAPANOEL PERSONA ENTREGA l_SANTA MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // forStmt ::= ENVUELVE ABRECUENTO POLO PAPANOEL PERSONA ENTREGA operando MUERDAGO exprRelLog MUERDAGO grinchYQuien CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elfoStm ::= ELFO ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elfoStm",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // hadaStm ::= HADA ABRECUENTO operando CIERRACUENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hadaStm",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // duendeStm ::= DUENDE cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("duendeStm",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura ::= whileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructura ::= forStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructura ::= doWhileStmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura ::= elfoStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructura ::= hadaStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructura ::= duendeStm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ids ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ids ::= ids MUERDAGO operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ids",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamadaNavidenia ::= PERSONA ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamadaNavidenia ::= PERSONA ABRECUENTO ids CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavidenia",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // llamadaNavideniaAux ::= llamadaNavidenia FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaNavideniaAux",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ayudanteDeSanta ::= t_santas PERSONA 
            {
              Object RESULT =null;
		int tstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (!listaTablaSimbolos.containsKey(currentHash)) {
                listaTablaSimbolos.put(currentHash, new ArrayList<String>());
                }
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString()+":"+ tst.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ayudanteDeSanta ::= PERSONA 
            {
              Object RESULT =null;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (!listaTablaSimbolos.containsKey(currentHash)) {
                listaTablaSimbolos.put(currentHash, new ArrayList<String>());
                }
                listaTablaSimbolos.get(currentHash).add("tipo:param:" + per.toString());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudanteDeSanta",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ayudaDefFunNav ::= ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ayudaDefFunNav ::= ayudaDefFunNav MUERDAGO ayudanteDeSanta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefFunNav",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ayudaDefinirFuncionNavi ::= EMPEZONAVIDAD t_santas PERSONA 
            {
              Object RESULT =null;
		int tscleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tscright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tsc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int perleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int perright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object per = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        currentHash = per.toString();
                        String tipoTabla = "main";
                        if (per.toString().equals("main"))
                            tipoTabla = "tipo:main:"+tsc.toString();
                        else
                            tipoTabla = "tipo:function:"+tsc.toString();
                        ArrayList<String> funcionMain = new ArrayList<String>();
                        funcionMain.add(tipoTabla);
                        listaTablaSimbolos.put(currentHash, funcionMain);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ayudaDefinirFuncionNavi",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // definirFunNav ::= ayudaDefinirFuncionNavi ABRECUENTO ayudaDefFunNav CIERRACUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // definirFunNav ::= error FINREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // definirFunNav ::= error CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // definirFunNav ::= error ABREREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("definirFunNav",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bolsanavidenia ::= definirFunNav 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // bolsanavidenia ::= definirFunNav cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsanavidenia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pbolsanavideniaAux ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pbolsanavideniaAux ::= pbolsanavideniaAux bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pbolsanavideniaAux",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$0 ::= 
            {
              Object RESULT =null;

                System.out.println("Empieza el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // pNocheBuena ::= NT$0 pbolsanavideniaAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                imprimirTablaSimbolos();
                System.out.println("Termina el asunto");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pNocheBuena",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // poloNorte ::= decl_G 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // poloNorte ::= creaRegalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // poloNorte ::= creaRegaloAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // poloNorte ::= narraNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // poloNorte ::= estructura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // poloNorte ::= envia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // poloNorte ::= exprUni 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // poloNorte ::= escuchaNavidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // poloNorte ::= corta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // poloNorte ::= llamadaNavideniaAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poloNorte",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // regalo ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // regalo ::= regalo poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // antartica ::= bolsanavidenia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // antartica ::= poloNorte 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("antartica",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // regaloExtn ::= antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // regaloExtn ::= regaloExtn antartica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regaloExtn",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
