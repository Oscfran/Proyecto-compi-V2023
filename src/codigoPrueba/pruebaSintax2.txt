function string func3(string b1){ @semantico string
	    return b1| 
    }

 function int asdf(int x, string prueba){
    print("HASD")|
    local int x <= 5|
    local int vary <= 5+3-(3+4)*8|
    -(5+4)-2*4**(2-1)*(3+1)+x/2.0**vary
    local int x <= 1000|
    break|
 }

  function string cocinaaaaa(string b1){ @semantico string
	    return b1| 
}

 function string func3(string b1){ @semantico string
    return b1| 
 }

 function string after(){
    do{
        print("do While")|
    }until (true)|
 }

 function int asd(int a){   
    local int varPrueba <= 34|
    local int i <= 0|
    local string cadenaPrueba <= "comida"|
    if(i == cadenaPrueba){
        local int w <= 2|
    }
    return a|
}

 function int sad(){ @function
    /_
    Comentario 1
     _/ 
    @comentario 2
    local bool b1|
    local string s1|
    read(s1)| @semantico
    print(b1)| @semantico
    print(true)| @semantico
    hola()|
    adios('a',b)|
    print(-6.7)|
    miFunc(miFunc(),'a')| @semantico miFunc, hola
    local bool bl0 <= 6.7 != 8.9| @ok
    local bool bl1 <= in1 > fl1 # false # 56 - !3 * func2(a,b) - func3()||@ error necesita doble pipe para funcionar
    return bl1| @semantico
 }

